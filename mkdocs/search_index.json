{
    "docs": [
        {
            "location": "/", 
            "text": "Snom IO\n #\n\n\nSnom.io means \u201cInnovation \u2013 Output\u201d\n\n\n\n\nSnom phones are smart business endpoints capable of many integration features.\n\n\nThis website documents all these features in order to help developers to create applications.\n\n\n\n\nContents are structured in categories:\n\n\n\n\nXML Minibrowser\n\n\nXML Definitions\n\n\nCTI (coming soon)\n\n\n\n\nThe aim of this website is to provide a reference for developers, but you can also find a number of \nexamples\n and ready to use code snippets.\n\n\nDevelopers community\n #\n\n\nThis website and all the code are published on \nGithub\n, the largest developers community.\nYou can also find a list of awesome ready-to-use \nintegrations and tools\n, if you have an application to summit please \nsubmit\n us a request, we will be happy to to add your work to the list.\n\n\nShowcase\n #\n\n\nSnom io is your gateway to your applications development and distribution.\nCheck out the video of examples of what is possible.", 
            "title": "Home"
        }, 
        {
            "location": "/#snom_io", 
            "text": "Snom.io means \u201cInnovation \u2013 Output\u201d   Snom phones are smart business endpoints capable of many integration features.  This website documents all these features in order to help developers to create applications.   Contents are structured in categories:   XML Minibrowser  XML Definitions  CTI (coming soon)   The aim of this website is to provide a reference for developers, but you can also find a number of  examples  and ready to use code snippets.", 
            "title": "Snom IO"
        }, 
        {
            "location": "/#developers_community", 
            "text": "This website and all the code are published on  Github , the largest developers community.\nYou can also find a list of awesome ready-to-use  integrations and tools , if you have an application to summit please  submit  us a request, we will be happy to to add your work to the list.", 
            "title": "Developers community"
        }, 
        {
            "location": "/#showcase", 
            "text": "Snom io is your gateway to your applications development and distribution.\nCheck out the video of examples of what is possible.", 
            "title": "Showcase"
        }, 
        {
            "location": "/xml_minibrowser/", 
            "text": "Snom XML Minibrowser\n #\n\n\nIntroduction\n #\n\n\nThe XML Minibrowser is a feature of the standard SIP software delivered with Snom phones. It allows processing Snom XML objects which is stored on standard web servers (http(s)). The feature can be used for various applications.\nAvailable XML objects are following :\n\n\n\n\n\n\n\n\nMain Tag Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSnomIPPhoneMenu\n\n\nShow a Menu calling other applications\n\n\n\n\n\n\nSnomIPPhoneDirectory\n\n\nShows a phone book\n\n\n\n\n\n\nSnomIPPhoneText\n\n\nPrint a text\n\n\n\n\n\n\nSnomIPPhoneImage\n\n\nShow a \nbase64\n encoded image\n\n\n\n\n\n\nSnomIPPhoneImageFile\n\n\nShow an image fetched via an \nURL\n\n\n\n\n\n\nSnomIPPhoneInput\n\n\nRequest for an input from the user\n\n\n\n\n\n\nSnomIPPhoneBatch\n\n\nCombine several main tags in one XML data\n\n\n\n\n\n\n\n\nTo understand how Snom Minibrowser works, the knowledge on following theme are required :\n\n\n\n\nSnom telephone\n\n\nBasic XML element (tag and attributes) and XML structure\n\n\nURI (fragment and query) and URL-encoding\n\n\n\n\nWith the previous knowledge, programmer can start developing minibrowser program by doing the following simple task :\n\n\n\n\nLearn minibrowser basic structure in given XML schema. (see \nhere\n)\n\n\nUnderstand minibrowser tag and attribute on this page\n\n\nCreate simple minibrowser application or test the sample program given in the example page\n\n\nLearn about minibrowser \ncallback\n and \nfragment\n function\n\n\nYou can see many ready-to-use \nexamples\n\n\n\n\nCommon rule for writing XML for minibrowser\n #\n\n\n\n\nFirst and foremost, use XML Editor with capability of validating XML file with XSD (XML Schema Definition).\n\n\nXML header is recommended to make XML parser not guessing which encoding will be used.\n\n\nMinibrowser can only load one one object at a time. see \nSnomIPPhoneBatch\n for instruction to write multiple object in one file.\n\n\nMinibrowser can also load file with php and cgi extension, if they are generating the XML file. Don't forget to set the header of the file to XML type content. \n\n\nTo write XML file using character other than English alphabet, check if the editor encoded the file in utf-8 and PUI language supported the character. As example by arabic PUI language can't show Chinese and Japanese character or by English PUI language can't show Arabic character.\n\n\nTo enable validation in common XML editor you have to include the schema declaration in main object.\n\n\nYou don't have to include another schema declaration in main element when using \nSnomIPPhoneBatch\n, except that you want to use different schema.\n\n\n\n\n\n\n\n\nExample of how to include XML schema from upper directory.\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\nHello world\n/Text\n\n\n/SnomIPPhoneText\n\n\n\n\nSome special instruction and hints (This may change by different firmware version or new XML parser behaviour)\n\n\n\n\nMinibrowser XML parser is not case sensitive, so you can write the opening tag and closing tag with the different character case. In proper XML editor, it will check the character case. \n\n\nName convention of  minibrowser tags and attributes are following : \n\n\nAll tag written in camel case and start with upper-case with exception of \n tag.\n\n\nAll Attribute is written and start in lower-case character and underscore is used to replace white space.\n\n\nThe link provided in example may be invalid, broken and unavailable.\n\n\nSome example was provided with light content, to make it short and understandable in first glance.\n\n\nDue to XSD limitation there is some behaviour that may not described here.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xml_minibrowser/#snom_xml_minibrowser", 
            "text": "", 
            "title": "Snom XML Minibrowser"
        }, 
        {
            "location": "/xml_minibrowser/#introduction", 
            "text": "The XML Minibrowser is a feature of the standard SIP software delivered with Snom phones. It allows processing Snom XML objects which is stored on standard web servers (http(s)). The feature can be used for various applications.\nAvailable XML objects are following :     Main Tag Name  Description      SnomIPPhoneMenu  Show a Menu calling other applications    SnomIPPhoneDirectory  Shows a phone book    SnomIPPhoneText  Print a text    SnomIPPhoneImage  Show a  base64  encoded image    SnomIPPhoneImageFile  Show an image fetched via an  URL    SnomIPPhoneInput  Request for an input from the user    SnomIPPhoneBatch  Combine several main tags in one XML data     To understand how Snom Minibrowser works, the knowledge on following theme are required :   Snom telephone  Basic XML element (tag and attributes) and XML structure  URI (fragment and query) and URL-encoding   With the previous knowledge, programmer can start developing minibrowser program by doing the following simple task :   Learn minibrowser basic structure in given XML schema. (see  here )  Understand minibrowser tag and attribute on this page  Create simple minibrowser application or test the sample program given in the example page  Learn about minibrowser  callback  and  fragment  function  You can see many ready-to-use  examples", 
            "title": "Introduction"
        }, 
        {
            "location": "/xml_minibrowser/#common_rule_for_writing_xml_for_minibrowser", 
            "text": "First and foremost, use XML Editor with capability of validating XML file with XSD (XML Schema Definition).  XML header is recommended to make XML parser not guessing which encoding will be used.  Minibrowser can only load one one object at a time. see  SnomIPPhoneBatch  for instruction to write multiple object in one file.  Minibrowser can also load file with php and cgi extension, if they are generating the XML file. Don't forget to set the header of the file to XML type content.   To write XML file using character other than English alphabet, check if the editor encoded the file in utf-8 and PUI language supported the character. As example by arabic PUI language can't show Chinese and Japanese character or by English PUI language can't show Arabic character.  To enable validation in common XML editor you have to include the schema declaration in main object.  You don't have to include another schema declaration in main element when using  SnomIPPhoneBatch , except that you want to use different schema.", 
            "title": "Common rule for writing XML for minibrowser"
        }, 
        {
            "location": "/xml_minibrowser/#example_of_how_to_include_xml_schema_from_upper_directory", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text Hello world /Text  /SnomIPPhoneText  Some special instruction and hints (This may change by different firmware version or new XML parser behaviour)   Minibrowser XML parser is not case sensitive, so you can write the opening tag and closing tag with the different character case. In proper XML editor, it will check the character case.   Name convention of  minibrowser tags and attributes are following :   All tag written in camel case and start with upper-case with exception of   tag.  All Attribute is written and start in lower-case character and underscore is used to replace white space.  The link provided in example may be invalid, broken and unavailable.  Some example was provided with light content, to make it short and understandable in first glance.  Due to XSD limitation there is some behaviour that may not described here.", 
            "title": "Example of how to include XML schema from upper directory."
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneMenu\n displays a Menu of selectable items. These items can either be sub-menus, containing items themselves, or items with a specific target, like URLs, key-events or internal callbacks.\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneMenu\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nhas_scrollbar\n: Display a scrollbar. Valid values: true, false, yes, no, on, off.\n\n\nspeedselect\n: If enabled, an item or line can be selected by entering the according number. If set to \nenter\n, the item is directly entered, as if you pressed the OK button. If set to \nselect\n, the item/line is only preselected. \nValid values: \noff\n, \nselect\n, \nenter\n.\n\n\nMain Attributes\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneMenu\n can contain some subtags:\n\n\n\n\nMenu\n\n\nMenuItem\n \n\n\nMain Sub Tags\n\n\n\n\nMenu\n #\n\n\nA sub menu containing again menu elements.\n\n\nValid Attributes\n #\n\n\nA \nMenu\n tag support a number of attributes hereby described\n\n\nspeedselect\n #\n\n\nDescription:\n If enabled, an item or line can be selected by entering the according number.\nIf set to \nenter\n, the item is directly entered, as if you pressed the OK button.\nIf set to \nselect\n, the item/line is only preselected. \n\n\nValid values:\n \noff\n, \nselect\n, \nenter\n\n\nhas_scrollbar\n #\n\n\nDescription:\n Display a scrollbar.\n\n\nValid Values:\n Any text.\n\n\nname\n #\n\n\nDescription:\n Name that is displayed for this menu entry in the parent menu. This is also the default title for menu elements, if none is specified.\n\n\nValid Values:\n Any text.\n\n\n\n\nWarning\n\n\nDon't use line break inside this attribute.\n\n\n\n\nid\n #\n\n\nDescription:\n Arbitrary id to make alternative (via if clause) menu entries with different names identifiable. This can be necessary for the internal XPath-based navigation mechanism in nested menus.\n\n\nValid Values:\n Any text.\n\n\non_selected\n #\n\n\nDescription:\n Fetch URL when this element selected.\n\n\nValid Values:\n Any URL.\n\n\non_deselected\n #\n\n\nDescription:\n Fetch URL when this element is selected.\n\n\nValid Values:\n Any URL.\n\n\nValid Subtags\n #\n\n\nHere are listed the tags that a \nMenu\n tag can contain\n\n\nTitle\n #\n\n\nDescription:\n Title of the sub-menu.\n\n\nValid Values:\n Any text.\n\n\n\n\nWarning\n\n\nDon't use line break inside this attribute.\n\n\n\n\nInputField\n #\n\n\nDescription:\n First line is an input field.\n\n\nValid Attributes\n\n\nHere the valid attributes for \nInputField\n\n\n\n\non_selected\n: Fetch URL when this element selected\n\n\non_deselected\n: Fetch URL when this element is selected\n\n\n\n\nValid Subtags\n\n\nHere the valid tags that can be nested into \nInputField\n\n\n\n\nIf, Elif, Else\n TODO: add link\n\n\nHandler\n: Name of handler of the input.\n\n\nKey\n: Key that triggers the handler.\n\n\nTimeout\n: Time in ms after which the handler is called.\n\n\nMinimum\n: Minimum number of characters to enable timeout.\n\n\nPrompt\n: Prompt for the input field.\n\n\n\n\nSoftKeyItem\n #\n\n\nSee \nSoftKey\n\n\nMenu\n #\n\n\nThe \nMenu\n tag can contain another \nMenu\n tag\n\n\nMenuItem\n #\n\n\nSee \nMenuItem\n\n\nRepeat\n #\n\n\nSee \nRepeat\n\n\nMenuItem\n #\n\n\nDescribes a menu entry that targets to either an URL, an key event or an internal callback.\n\n\nValid Attributes\n #\n\n\nA \nMenuItem\n tag can contain a number of attributes hereby descripted\n\n\nsel\n #\n\n\nDescription:\n Preselect this directory entry.\n\n\nValid Values:\n \ntrue\n, \nfalse\n\n\nname\n #\n\n\nDescription:\n Name that is displayed for this menu entry in the parent menu.\n\n\nValid Values:\n Any text.\n\n\n\n\nWarning\n\n\nDon't use line break inside this attribute.\n\n\n\n\nid\n #\n\n\nDescription:\n Arbitrary id to make alternative (via if clause) menu entries with different names identifiable. This can be necessary for the internal XPath-based navigation mechanism in nested menus.\n\n\nValid Values:\n Any text.\n\n\non_selected\n #\n\n\nDescription:\n Fetch URL when this element selected.\n\n\nValid Values:\n Any URL.\n\n\non_deselected\n #\n\n\nDescription:\n Fetch URL when this element is selected.\n\n\nValid Values:\n Any URL.\n\n\nsort_key\n #\n\n\nDescription:\n Key by which the items get sorted if main attribute \nsort\n is enabled.\nIf omitted it gets set to the value of menu attribute \nname\n. Applicable with \nRepeat\n only.\n\n\nValid Subtags\n #\n\n\nHere are listed the tags that a \nMenuItem\n tag can contain\n\n\nIf, EndIf, Else\n TODO add link\n #\n\n\nIcon\n #\n\n\nDescription:\n Show an icon beside the menu text\n\n\nValid Values:\n Any valid internal icon on 'file://snom/bmp/colored'. More available icon name can be found inside tar archive with file name prefix 'snom820_icon_' on branding instruction page. To use an external image use the \nImage\n tag instead.\n\n\nURL\n #\n\n\nDescription:\n Url of the file that is fetched when the menu entry is selected.\n\n\nValid Attributes\n\n\nHere the valid attributes for the \nURL\n tag\n\n\n\n\nnew_context\n: Creates a new minibrowser context for that Url. Valid values: \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\ntrack\n: Determine if the Url will be loaded as replaceable on top of minibrowser history stack or not. Valid values: \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\n\n\nValid Subags\n\n\nHere the valid tags that can be nested into URL\n\n\n\n\nIf, Elif, Else\n: TODO: add link\n\n\nDetailUrl\n: Detail for selection. \nFor Snom870 only\n\n\n\n\nSoftKey\n #\n\n\nDescription:\n Identifier of a virtual key, that is pressed when the menu entry is selected.\n\n\nValid Values:\n Any valid soft key\n\n\nImage\n #\n\n\nDescription:\n Use external image as icon for menu entry\n\n\nValid Value:\n Any valid image URL\n\n\n\n\nInfo\n\n\nThe \nImage\n supports the attribute \ndefault\n containing the URL of a fallback image to display if the image failed to load\n\n\n\n\nItemData\n #\n\n\nDescription:\n Define date to be hidden within (saved beneath) this menu-line, the ItemData can contains the following tags:\n\n\n\n\nRepeat\n\n\nIf, Elif, Else\n: TODO: add link\n\n\nVariable\n: Defines a variable. Allowed 0..n times\n\n\n\n\n\n\nInfo\n\n\nThe \nVariable\n tag \nmust\n have a tag \nname\n containing the name of the variable and optionally a tag \nvalue\n containing the value of the variable, when not set or set as empty (i.e.:value=\"\") the variable will be deleted", 
            "title": "SnomIPPhoneMenu"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#description", 
            "text": "The  SnomIPPhoneMenu  displays a Menu of selectable items. These items can either be sub-menus, containing items themselves, or items with a specific target, like URLs, key-events or internal callbacks.   Info  You can see a  SnomIPPhoneMenu  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#valid_attributes", 
            "text": "has_scrollbar : Display a scrollbar. Valid values: true, false, yes, no, on, off.  speedselect : If enabled, an item or line can be selected by entering the according number. If set to  enter , the item is directly entered, as if you pressed the OK button. If set to  select , the item/line is only preselected. \nValid values:  off ,  select ,  enter .  Main Attributes", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#valid_subtags", 
            "text": "The  SnomIPPhoneMenu  can contain some subtags:   Menu  MenuItem    Main Sub Tags", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#menu", 
            "text": "A sub menu containing again menu elements.", 
            "title": "Menu"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#valid_attributes_1", 
            "text": "A  Menu  tag support a number of attributes hereby described", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#speedselect", 
            "text": "Description:  If enabled, an item or line can be selected by entering the according number.\nIf set to  enter , the item is directly entered, as if you pressed the OK button.\nIf set to  select , the item/line is only preselected.   Valid values:   off ,  select ,  enter", 
            "title": "speedselect"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#has_scrollbar", 
            "text": "Description:  Display a scrollbar.  Valid Values:  Any text.", 
            "title": "has_scrollbar"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#name", 
            "text": "Description:  Name that is displayed for this menu entry in the parent menu. This is also the default title for menu elements, if none is specified.  Valid Values:  Any text.   Warning  Don't use line break inside this attribute.", 
            "title": "name"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#id", 
            "text": "Description:  Arbitrary id to make alternative (via if clause) menu entries with different names identifiable. This can be necessary for the internal XPath-based navigation mechanism in nested menus.  Valid Values:  Any text.", 
            "title": "id"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#on_selected", 
            "text": "Description:  Fetch URL when this element selected.  Valid Values:  Any URL.", 
            "title": "on_selected"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#on_deselected", 
            "text": "Description:  Fetch URL when this element is selected.  Valid Values:  Any URL.", 
            "title": "on_deselected"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#valid_subtags_1", 
            "text": "Here are listed the tags that a  Menu  tag can contain", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#title", 
            "text": "Description:  Title of the sub-menu.  Valid Values:  Any text.   Warning  Don't use line break inside this attribute.", 
            "title": "Title"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#inputfield", 
            "text": "Description:  First line is an input field.  Valid Attributes  Here the valid attributes for  InputField   on_selected : Fetch URL when this element selected  on_deselected : Fetch URL when this element is selected   Valid Subtags  Here the valid tags that can be nested into  InputField   If, Elif, Else  TODO: add link  Handler : Name of handler of the input.  Key : Key that triggers the handler.  Timeout : Time in ms after which the handler is called.  Minimum : Minimum number of characters to enable timeout.  Prompt : Prompt for the input field.", 
            "title": "InputField"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#softkeyitem", 
            "text": "See  SoftKey", 
            "title": "SoftKeyItem"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#menu_1", 
            "text": "The  Menu  tag can contain another  Menu  tag", 
            "title": "Menu"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#menuitem", 
            "text": "See  MenuItem", 
            "title": "MenuItem"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#repeat", 
            "text": "See  Repeat", 
            "title": "Repeat"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#menuitem_1", 
            "text": "Describes a menu entry that targets to either an URL, an key event or an internal callback.", 
            "title": "MenuItem"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#valid_attributes_2", 
            "text": "A  MenuItem  tag can contain a number of attributes hereby descripted", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#sel", 
            "text": "Description:  Preselect this directory entry.  Valid Values:   true ,  false", 
            "title": "sel"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#name_1", 
            "text": "Description:  Name that is displayed for this menu entry in the parent menu.  Valid Values:  Any text.   Warning  Don't use line break inside this attribute.", 
            "title": "name"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#id_1", 
            "text": "Description:  Arbitrary id to make alternative (via if clause) menu entries with different names identifiable. This can be necessary for the internal XPath-based navigation mechanism in nested menus.  Valid Values:  Any text.", 
            "title": "id"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#on_selected_1", 
            "text": "Description:  Fetch URL when this element selected.  Valid Values:  Any URL.", 
            "title": "on_selected"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#on_deselected_1", 
            "text": "Description:  Fetch URL when this element is selected.  Valid Values:  Any URL.", 
            "title": "on_deselected"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#sort_key", 
            "text": "Description:  Key by which the items get sorted if main attribute  sort  is enabled.\nIf omitted it gets set to the value of menu attribute  name . Applicable with  Repeat  only.", 
            "title": "sort_key"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#valid_subtags_2", 
            "text": "Here are listed the tags that a  MenuItem  tag can contain", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#if_endif_else_todo_add_link", 
            "text": "", 
            "title": "If, EndIf, Else TODO add link"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#icon", 
            "text": "Description:  Show an icon beside the menu text  Valid Values:  Any valid internal icon on 'file://snom/bmp/colored'. More available icon name can be found inside tar archive with file name prefix 'snom820_icon_' on branding instruction page. To use an external image use the  Image  tag instead.", 
            "title": "Icon"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#url", 
            "text": "Description:  Url of the file that is fetched when the menu entry is selected.  Valid Attributes  Here the valid attributes for the  URL  tag   new_context : Creates a new minibrowser context for that Url. Valid values:  true ,  false ,  yes ,  no ,  on ,  off .  track : Determine if the Url will be loaded as replaceable on top of minibrowser history stack or not. Valid values:  true ,  false ,  yes ,  no ,  on ,  off .   Valid Subags  Here the valid tags that can be nested into URL   If, Elif, Else : TODO: add link  DetailUrl : Detail for selection.  For Snom870 only", 
            "title": "URL"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#softkey", 
            "text": "Description:  Identifier of a virtual key, that is pressed when the menu entry is selected.  Valid Values:  Any valid soft key", 
            "title": "SoftKey"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#image", 
            "text": "Description:  Use external image as icon for menu entry  Valid Value:  Any valid image URL   Info  The  Image  supports the attribute  default  containing the URL of a fallback image to display if the image failed to load", 
            "title": "Image"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneMenu/#itemdata", 
            "text": "Description:  Define date to be hidden within (saved beneath) this menu-line, the ItemData can contains the following tags:   Repeat  If, Elif, Else : TODO: add link  Variable : Defines a variable. Allowed 0..n times    Info  The  Variable  tag  must  have a tag  name  containing the name of the variable and optionally a tag  value  containing the value of the variable, when not set or set as empty (i.e.:value=\"\") the variable will be deleted", 
            "title": "ItemData"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneDirectory/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneDirectory\n tag displays a directory of name-number pairs from which you can select one to call.\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneDireectory\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nhas_scrollbar\n: Display a scrollbar. Valid values: \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n\n\nspeedselect\n: If enabled, an item or line can be selected by entering the according number. If set to \nenter\n, the item is directly entered, as if you pressed the OK button. If set to \nselect\n, the item/line is only preselected. Valid values: \noff\n, \nselect\n, \nenter\n.\n\n\nMain Attributes\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneDirectory\n can contain some subtags:\n\n\nDirectoryEntry\n #\n\n\nA single directory entry\n\n\nValid Attributes\n\n\n\n\nsel\n: Preselect this directory entry\n\n\n\n\nValid Subtags\n\n\n\n\nName\n: The displayed text for the directory entry\n\n\nTelephone\n: The number dialed, when the directory entry is selected.", 
            "title": "SnomIPPhoneDirectory"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneDirectory/#description", 
            "text": "The  SnomIPPhoneDirectory  tag displays a directory of name-number pairs from which you can select one to call.   Info  You can see a  SnomIPPhoneDireectory  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneDirectory/#valid_attributes", 
            "text": "has_scrollbar : Display a scrollbar. Valid values:  true ,  false ,  yes ,  no ,  on ,  off  speedselect : If enabled, an item or line can be selected by entering the according number. If set to  enter , the item is directly entered, as if you pressed the OK button. If set to  select , the item/line is only preselected. Valid values:  off ,  select ,  enter .  Main Attributes", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneDirectory/#valid_subtags", 
            "text": "The  SnomIPPhoneDirectory  can contain some subtags:", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneDirectory/#directoryentry", 
            "text": "A single directory entry  Valid Attributes   sel : Preselect this directory entry   Valid Subtags   Name : The displayed text for the directory entry  Telephone : The number dialed, when the directory entry is selected.", 
            "title": "DirectoryEntry"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneText\n tag shows arbitrary text\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneMenu\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nhas_scrollbar\n: Display a scrollbar. Valid values: \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n\n\nMain Attributes\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneText\n can contain some subtags:\n\n\nText\n #\n\n\nThe text to display. This tag contain mixed content.\n\n\nValid Subtags\n\n\n\n\nRepeat\n\n\nbr\n \n\n\n\n\nLocationX\n #\n\n\nX coordinate of the text position\n\n\nLocationY\n #\n\n\nY coordinate of the text position\n\n\nImage\n #\n\n\nShow image alongside the text\n\n\nValid Attributes\n\n\n\n\ndefault\n: Default image if the image url content on \nURL\n failed to load\n\n\n\n\nValid Subtags\n\n\n\n\nContidional blocks\n\n\nLocationX\n: X coordinate of the image position\n\n\nLocationY\n: Y coordinate of the text position\n\n\nwidth\n: Determine the width of image\n\n\nheight\n: Determine the height of image", 
            "title": "SnomIPPhoneText"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#description", 
            "text": "The  SnomIPPhoneText  tag shows arbitrary text   Info  You can see a  SnomIPPhoneMenu  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#valid_attributes", 
            "text": "has_scrollbar : Display a scrollbar. Valid values:  true ,  false ,  yes ,  no ,  on ,  off  Main Attributes", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#valid_subtags", 
            "text": "The  SnomIPPhoneText  can contain some subtags:", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#text", 
            "text": "The text to display. This tag contain mixed content.  Valid Subtags   Repeat  br", 
            "title": "Text"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#locationx", 
            "text": "X coordinate of the text position", 
            "title": "LocationX"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#locationy", 
            "text": "Y coordinate of the text position", 
            "title": "LocationY"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneText/#image", 
            "text": "Show image alongside the text  Valid Attributes   default : Default image if the image url content on  URL  failed to load   Valid Subtags   Contidional blocks  LocationX : X coordinate of the image position  LocationY : Y coordinate of the text position  width : Determine the width of image  height : Determine the height of image", 
            "title": "Image"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneImage\n tag displays an image that is contained in the XML file\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneImage\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nfkeys_in_front\n: Show label when showing the image. \nValid values\n: \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\nMain Attributes\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneImage\n can contain some subtags:\n\n\nLocationX\n #\n\n\nThe X-coordinate where the image should be placed on the phone display\n\n\nLocationY\n #\n\n\nThe Y-coordinate where the image should be placed on the phone display\n\n\nData\n #\n\n\nThe raw image data in base64 encoding.\n\n\nValid Attributes\n\n\n\n\nencoding\n: Valid value: \nbase64\n\n\n\n\nMain Sub Tags\n #", 
            "title": "SnomIPPhoneImage"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#description", 
            "text": "The  SnomIPPhoneImage  tag displays an image that is contained in the XML file   Info  You can see a  SnomIPPhoneImage  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#valid_attributes", 
            "text": "fkeys_in_front : Show label when showing the image.  Valid values :  true ,  false ,  yes ,  no ,  on ,  off .  Main Attributes", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#valid_subtags", 
            "text": "The  SnomIPPhoneImage  can contain some subtags:", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#locationx", 
            "text": "The X-coordinate where the image should be placed on the phone display", 
            "title": "LocationX"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#locationy", 
            "text": "The Y-coordinate where the image should be placed on the phone display", 
            "title": "LocationY"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#data", 
            "text": "The raw image data in base64 encoding.  Valid Attributes   encoding : Valid value:  base64", 
            "title": "Data"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImage/#main_sub_tags", 
            "text": "", 
            "title": "Main Sub Tags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneImageFile\n tag displays an image that is contained in the XML file\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneImageFile\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nfkeys_in_front\n: Show label when showing the image. \nValid values\n: \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\nMain Attributes\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneImage\n can contain some subtags:\n\n\nURL\n #\n\n\nThe location of the image file\n\n\nHeight\n #\n\n\nDetermine the height of the image\n\n\nWidth\n #\n\n\nDetermine the width of the image\n\n\nLocationX\n #\n\n\nThe X-coordinate where the image should be placed on the phone display\n\n\nLocationY\n #\n\n\nThe Y-coordinate where the image should be placed on the phone display\n\n\nData\n #\n\n\nThe raw image data in base64 encoding.\n\n\nValid Attributes\n\n\n\n\nencoding\n: Valid value: \nbase64\n\n\n\n\nMain Sub Tags\n #", 
            "title": "SnomIPPhoneImageFile"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#description", 
            "text": "The  SnomIPPhoneImageFile  tag displays an image that is contained in the XML file   Info  You can see a  SnomIPPhoneImageFile  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#valid_attributes", 
            "text": "fkeys_in_front : Show label when showing the image.  Valid values :  true ,  false ,  yes ,  no ,  on ,  off .  Main Attributes", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#valid_subtags", 
            "text": "The  SnomIPPhoneImage  can contain some subtags:", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#url", 
            "text": "The location of the image file", 
            "title": "URL"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#height", 
            "text": "Determine the height of the image", 
            "title": "Height"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#width", 
            "text": "Determine the width of the image", 
            "title": "Width"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#locationx", 
            "text": "The X-coordinate where the image should be placed on the phone display", 
            "title": "LocationX"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#locationy", 
            "text": "The Y-coordinate where the image should be placed on the phone display", 
            "title": "LocationY"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#data", 
            "text": "The raw image data in base64 encoding.  Valid Attributes   encoding : Valid value:  base64", 
            "title": "Data"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneImageFile/#main_sub_tags", 
            "text": "", 
            "title": "Main Sub Tags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneInput/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneInput\n tag isplays an input field. The entered value can be put anywhere into the Url for the next XML file to process by a freely definable token. In combination with URI fragment commands the value can be used to set settings or variables.\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneInput\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nMain Attributes\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneInput\n can contain some subtags:\n\n\nURL\n #\n\n\nThe URL that is fetched after the input has been finished with the OK (check-mark) button. All occurences of the string defined in the InputToken element will be replaced by the entered value.\n\n\nValid Attributes\n\n\n\n\nsel\n: Preselect this directory entry\n\n\n\n\nValid Subtags\n\n\n\n\nName\n: The displayed text for the directory entry\n\n\nTelephone\n: The number dialed, when the directory entry is selected.\n\n\n\n\nInputItem\n #\n\n\nRequired element to determine the input rule.\n\n\nValid Subtags\n\n\n\n\nConditional Elements\n: TODO add link\n\n\nDisplayName\n: Header of the intput field. Currently this is displayed in the title, so the Title element has no effect for SnomIPPhoneInput\n\n\nDefaultValue\n: The default value that will be pre-filled into the input field\n\n\nInputToken\n: Defines a token, that will be replaced in the Url by the entered value\n\n\nInputMask\n: limiting the input position and input mode. \n9\n, \na\n, \nA\n characters will act as mask with correspondent input mode (\n9\n as number input mode, \na\n as lower-case input mode and \nA\n as upper-case input mode)\n\n\nInputFlags\n: Specifies the type of input field. \n\n\nValid values\n:\n\n\na\n: normal text\n\n\nt\n: telephone number\n\n\nn\n: number\n\n\ne\n: number with text\n\n\nu\n: uppercase text\n\n\nl\n: lowercase text\n\n\np\n: password\n\n\npn\n: numeric password", 
            "title": "SnomIPPhoneInput"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneInput/#description", 
            "text": "The  SnomIPPhoneInput  tag isplays an input field. The entered value can be put anywhere into the Url for the next XML file to process by a freely definable token. In combination with URI fragment commands the value can be used to set settings or variables.   Info  You can see a  SnomIPPhoneInput  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneInput/#valid_attributes", 
            "text": "Main Attributes", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneInput/#valid_subtags", 
            "text": "The  SnomIPPhoneInput  can contain some subtags:", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneInput/#url", 
            "text": "The URL that is fetched after the input has been finished with the OK (check-mark) button. All occurences of the string defined in the InputToken element will be replaced by the entered value.  Valid Attributes   sel : Preselect this directory entry   Valid Subtags   Name : The displayed text for the directory entry  Telephone : The number dialed, when the directory entry is selected.", 
            "title": "URL"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneInput/#inputitem", 
            "text": "Required element to determine the input rule.  Valid Subtags   Conditional Elements : TODO add link  DisplayName : Header of the intput field. Currently this is displayed in the title, so the Title element has no effect for SnomIPPhoneInput  DefaultValue : The default value that will be pre-filled into the input field  InputToken : Defines a token, that will be replaced in the Url by the entered value  InputMask : limiting the input position and input mode.  9 ,  a ,  A  characters will act as mask with correspondent input mode ( 9  as number input mode,  a  as lower-case input mode and  A  as upper-case input mode)  InputFlags : Specifies the type of input field.   Valid values :  a : normal text  t : telephone number  n : number  e : number with text  u : uppercase text  l : lowercase text  p : password  pn : numeric password", 
            "title": "InputItem"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneBatch/", 
            "text": "Description\n #\n\n\nThe \nSnomIPPhoneBatch\n tag contains a sequence of other main elements (document elements) in order to combine several smaller XML documents in one file.\n\n\nAll but the first main elements in the batch should have an unique id attribute to be selectable.\nA main element can be selected to be processed by the URI fragment command \nsub={XPath-step}\n, where \n{XPath-step}\n is an XPath step expression for the level of the batch subelements.\n\n\nExample URL: \nhttp://example.com/example.xml#sub=\n[@id=\"example-id\"]* By default the first main element in the batch is processed.\n\n\n\n\nInfo\n\n\nYou can see a \nSnomIPPhoneBatch\n usage example \nhere\n\n\n\n\nValid Subtags\n #\n\n\nThe \nSnomIPPhoneBatch\n can contain all the main tags:\n\n\n\n\nSnomIPPhoneMenu\n\n\nSnomIPPhoneText\n\n\nSnomIPPhoneInput\n\n\nSnomIPPhoneImage\n\n\nSnomIPPhoneImageFile\n\n\nSnomIPPhoneDirectory", 
            "title": "SnomIPPhoneBatch"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneBatch/#description", 
            "text": "The  SnomIPPhoneBatch  tag contains a sequence of other main elements (document elements) in order to combine several smaller XML documents in one file.  All but the first main elements in the batch should have an unique id attribute to be selectable.\nA main element can be selected to be processed by the URI fragment command  sub={XPath-step} , where  {XPath-step}  is an XPath step expression for the level of the batch subelements.  Example URL:  http://example.com/example.xml#sub= [@id=\"example-id\"]* By default the first main element in the batch is processed.   Info  You can see a  SnomIPPhoneBatch  usage example  here", 
            "title": "Description"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/SnomIPPhoneBatch/#valid_subtags", 
            "text": "The  SnomIPPhoneBatch  can contain all the main tags:   SnomIPPhoneMenu  SnomIPPhoneText  SnomIPPhoneInput  SnomIPPhoneImage  SnomIPPhoneImageFile  SnomIPPhoneDirectory", 
            "title": "Valid Subtags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/", 
            "text": "Main Sub tags\n #\n\n\nAll the main tags can contain the following sub tags:\n\n\nConditional blocks\n #\n\n\nThe \nIf, Elif, Else\n tags are used as a conditional elements, depending on dynamic evaluations like callback expressions of the form $(...) for instance. This tags sequence must be start with \nIf\n tag and end with \nElse\n tag, which both can only appear once under the parent element. The \nElif\n tag is optional and can be written many time after \nIf\n tag end and before \nElse\n tag start. This is especially useful for describing alternative child elements.\n\n\n\n\nInfo\n\n\nYou can see an usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\ncondition\n: \nIf\n and \nElif\n tag only!. Only if this attribute evaluates to true, the sub elements are interpreted as elements at the position of the if element. This can be either a boolean value like \ntrue\n or \nfalse\n or a comparative expression with one of the following operators: \n==\n, \n!=\n, \n, \n, \n=\n, \n=\n Additionally you can invert the result by using a ! as first character.\n\n\n\n\nRepeats\n #\n\n\nRepeats the containing menu entries while iterating over a list of values and replacing certain parts with them.\n\n\n\n\nInfo\n\n\nYou can see a \nRepeats\n usage example \nhere\n\n\n\n\nValid Attributes\n #\n\n\n\n\nvalues\n: Contains a list of values, over which the repeat loop iterates. During each iteration to each given token the next value from that list is asigned. The first character is the seperator, and the list should also end with a seperator. Can't be combined with value_key and \nvar_ifc\n attribute.\n\n\nvar_ifc\n: Contains a composed-id indicating the variable exposed by the addressed variable interface.\n\n\ntoken\n: Contains a list of tokens. During each iteration each given token in the sub elements are replaced by the asigned values from the values list. The first character is the seperator, and the list should also end with a seperator. If combined with \nvar_ifc\n attribute, the available token will be used as variable for the query.\n\n\n\n\nRepeat tag exist as a sibling of a tag if that tag can don't have maximal occurrence limit.\n\n\nTitle\n #\n\n\nThe title that is displayed at the top of the screen when displaying the XML document. Don't use line break inside this tag.\n\n\nFetch\n #\n\n\nFetches the specified URL (probably another XML file) after a certain delay\n\n\nValid Attributes\n #\n\n\n\n\nmil\n: The delay in miliseconds, after which the URL is fetched\n\n\n\n\nSoftKeyItem\n #\n\n\nReconfigures the functionality of a key and - in case of a context key - its screen label. The keys can be mapped to an URL that will be fetched or to another (virtual-)key.\n\n\nValid Sub Tags\n #\n\n\n\n\nName\n: the name of the function key Example: F1, F2, F3, F4, F_REDIAL, F_CANCEL,... For a list of valid values see: \nthe wiki\n\n\nLabel\n: text for the screen label. Only applies to context keys.\n\n\nSoftKey\n: Key identifier to which the key is remapped to. Example: F_REDIAL, F_DND, F_CANCEL,... For a list of valid values see: \nthe wiki\n\n\nUrl\n: the URL to fetch when the key is pressed\n\n\nIf, Elif, Else\n: \nconditional blocks\n\n\nLed\n: Controls the status of the phone LEDs. Valid values: \non\n, \noff\n, \nblink\n, \nblinkfast\n, \nblinkslow\n.\n\n\nAttributes\n:\n\n\nnumber\n: LED numbering (I.e. number=\"0\" is addressed to message LED)\n\n\ncolor\n: Valid values: \nred\n, \ngreen\n, \norange\n, \nredgreen\n, \ngreenorange", 
            "title": "Main Sub Tags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#main_sub_tags", 
            "text": "All the main tags can contain the following sub tags:", 
            "title": "Main Sub tags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#conditional_blocks", 
            "text": "The  If, Elif, Else  tags are used as a conditional elements, depending on dynamic evaluations like callback expressions of the form $(...) for instance. This tags sequence must be start with  If  tag and end with  Else  tag, which both can only appear once under the parent element. The  Elif  tag is optional and can be written many time after  If  tag end and before  Else  tag start. This is especially useful for describing alternative child elements.   Info  You can see an usage example  here", 
            "title": "Conditional blocks"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#valid_attributes", 
            "text": "condition :  If  and  Elif  tag only!. Only if this attribute evaluates to true, the sub elements are interpreted as elements at the position of the if element. This can be either a boolean value like  true  or  false  or a comparative expression with one of the following operators:  == ,  != ,  ,  ,  = ,  =  Additionally you can invert the result by using a ! as first character.", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#repeats", 
            "text": "Repeats the containing menu entries while iterating over a list of values and replacing certain parts with them.   Info  You can see a  Repeats  usage example  here", 
            "title": "Repeats"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#valid_attributes_1", 
            "text": "values : Contains a list of values, over which the repeat loop iterates. During each iteration to each given token the next value from that list is asigned. The first character is the seperator, and the list should also end with a seperator. Can't be combined with value_key and  var_ifc  attribute.  var_ifc : Contains a composed-id indicating the variable exposed by the addressed variable interface.  token : Contains a list of tokens. During each iteration each given token in the sub elements are replaced by the asigned values from the values list. The first character is the seperator, and the list should also end with a seperator. If combined with  var_ifc  attribute, the available token will be used as variable for the query.   Repeat tag exist as a sibling of a tag if that tag can don't have maximal occurrence limit.", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#title", 
            "text": "The title that is displayed at the top of the screen when displaying the XML document. Don't use line break inside this tag.", 
            "title": "Title"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#fetch", 
            "text": "Fetches the specified URL (probably another XML file) after a certain delay", 
            "title": "Fetch"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#valid_attributes_2", 
            "text": "mil : The delay in miliseconds, after which the URL is fetched", 
            "title": "Valid Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#softkeyitem", 
            "text": "Reconfigures the functionality of a key and - in case of a context key - its screen label. The keys can be mapped to an URL that will be fetched or to another (virtual-)key.", 
            "title": "SoftKeyItem"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/main_sub_tags/#valid_sub_tags", 
            "text": "Name : the name of the function key Example: F1, F2, F3, F4, F_REDIAL, F_CANCEL,... For a list of valid values see:  the wiki  Label : text for the screen label. Only applies to context keys.  SoftKey : Key identifier to which the key is remapped to. Example: F_REDIAL, F_DND, F_CANCEL,... For a list of valid values see:  the wiki  Url : the URL to fetch when the key is pressed  If, Elif, Else :  conditional blocks  Led : Controls the status of the phone LEDs. Valid values:  on ,  off ,  blink ,  blinkfast ,  blinkslow .  Attributes :  number : LED numbering (I.e. number=\"0\" is addressed to message LED)  color : Valid values:  red ,  green ,  orange ,  redgreen ,  greenorange", 
            "title": "Valid Sub Tags"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/", 
            "text": "Main Attributes\n #\n\n\nFollowing attributes are supported in all the snom Minibrowser main tags\n\n\ntitle\n #\n\n\nDescription:\n Set the title for the main element. If this and title tag written inside the main element, the value from this attribute will be taken as the title.\n\n\nValid Values:\n Any text\n\n\n\n\nWarning\n\n\nDon't use line break inside this attribute.\n\n\n\n\nsort\n #\n\n\nDescription:\n Sort a list.\n\n\nValid values:\n \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n. \n\n\n\n\nInfo\nYou can see a \nsort\n usage example \nhere\n\n\n\n\n\n\nselectable\n #\n\n\nDescription:\n Determine if list is selectable or not.\n\n\nValid values:\n \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\n\n\nInfo\nYou can see a \nselectable\n usage example \nhere\n\n\n\n\n\n\npredict\n #\n\n\nDescription:\n Input with T9 (predictive text).\n\n\nValid values:\n \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\ndtmf\n #\n\n\nDescription:\n If enabled DTMF tones are played on each digit input, otherwise no DTMF tones are played out.\n\n\nValid values:\n \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\nid\n #\n\n\nDescription:\n An arbitrary id, that can be used to select the main element if it is contained in a batch of several main elements. See \nSnomIPPhoneBatch\n.\n\n\nValid Value:\n Any text identifying a main element\n\n\ntrack\n #\n\n\nDescription:\n If false, the URL of the displayed XML document is not tracked in the history. That is, this document will be skipped when you go back in history by pressing the Cancel (X) button.\n\n\nValid values:\n \ntrue\n, \nfalse\n, \nyes\n, \nno\n, \non\n, \noff\n.\n\n\nstate\n #\n\n\nDescription:\n\n\n\n\nIf set to \nrelevant\n, key events will not only be processed by the minibrowser but also be forwarded to the underlying phone state \n\n\nIf set to \nonly_mb\n, key events will only be processed by the minibrowser (Default value).\n\n\nIf set to \nothers_except_mb\n, unrecognized key events will not processed by minibrowser.\n\n\n\n\nValid values:\n \nrelevant\n, \nonly_mb\n, \nothers_except_mb\n.\n\n\n\n\nInfo\nYou can see a \nstate\n usage example \nhere\n\n\n\n\n\n\nshow_line_info_layer\n #\n\n\nDescription:\n If the line info shall be displayed.\n\n\nValid values:\n \non\n, \noff\n, \nsmart", 
            "title": "Main Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#main_attributes", 
            "text": "Following attributes are supported in all the snom Minibrowser main tags", 
            "title": "Main Attributes"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#title", 
            "text": "Description:  Set the title for the main element. If this and title tag written inside the main element, the value from this attribute will be taken as the title.  Valid Values:  Any text   Warning  Don't use line break inside this attribute.", 
            "title": "title"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#sort", 
            "text": "Description:  Sort a list.  Valid values:   true ,  false ,  yes ,  no ,  on ,  off .    Info You can see a  sort  usage example  here", 
            "title": "sort"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#selectable", 
            "text": "Description:  Determine if list is selectable or not.  Valid values:   true ,  false ,  yes ,  no ,  on ,  off .   Info You can see a  selectable  usage example  here", 
            "title": "selectable"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#predict", 
            "text": "Description:  Input with T9 (predictive text).  Valid values:   true ,  false ,  yes ,  no ,  on ,  off .", 
            "title": "predict"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#dtmf", 
            "text": "Description:  If enabled DTMF tones are played on each digit input, otherwise no DTMF tones are played out.  Valid values:   true ,  false ,  yes ,  no ,  on ,  off .", 
            "title": "dtmf"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#id", 
            "text": "Description:  An arbitrary id, that can be used to select the main element if it is contained in a batch of several main elements. See  SnomIPPhoneBatch .  Valid Value:  Any text identifying a main element", 
            "title": "id"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#track", 
            "text": "Description:  If false, the URL of the displayed XML document is not tracked in the history. That is, this document will be skipped when you go back in history by pressing the Cancel (X) button.  Valid values:   true ,  false ,  yes ,  no ,  on ,  off .", 
            "title": "track"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#state", 
            "text": "Description:   If set to  relevant , key events will not only be processed by the minibrowser but also be forwarded to the underlying phone state   If set to  only_mb , key events will only be processed by the minibrowser (Default value).  If set to  others_except_mb , unrecognized key events will not processed by minibrowser.   Valid values:   relevant ,  only_mb ,  others_except_mb .   Info You can see a  state  usage example  here", 
            "title": "state"
        }, 
        {
            "location": "/xml_minibrowser/main_tags/MainAttributes/#show_line_info_layer", 
            "text": "Description:  If the line info shall be displayed.  Valid values:   on ,  off ,  smart", 
            "title": "show_line_info_layer"
        }, 
        {
            "location": "/xml_minibrowser/callbacks/", 
            "text": "Snom Minibrowser Callbacks\n #\n\n\nTo make use of dynamic information the content of certain elements and attributes are evaluated in order to translate special callback expressions.\nThey have the form \n$(name)\n or \n$(name:arg)\n and are dynamically replaced by their return values.\n\n\n\n\nNote\n\n\nThe result from callback in example code, which using the telephone specific setting, may differs for another Snom telephone\n\n\n\n\nThings to consider when writing callbacks:\n\n\n\n\nCallbacks argument\n: necessity of the argument, limitation on argument.\n\n\nExtra white space on callbacks name and arguments\n: see the example below.\n\n\nCharacter case of the callback and its argument\n\n\n\n\n\n\nWarning\n\n\nThere are 2 type of callback place holder, \n$(...)\n and \n$[...]\n. The one using square brackets will be explained \nhere\n\n\n\n\nHere some examples of common errors:\n\n\nCorrect syntax:\n\n\n$(max_pkeys)\n$(set:vol_speakers)\n\n\n\n\n\n\n\n\n\n\nError Example\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$ (max_pkeys)\n\n\nwhitespace\n\n\n\n\n\n\n$( max_pkeys)\n\n\nwhitespace\n\n\n\n\n\n\n$(max_pkeys )\n\n\nwhitespace\n\n\n\n\n\n\n$(max_pkeys:argument)\n\n\nunnecessary argument\n\n\n\n\n\n\n$(set :vol_speaker)\n\n\nwhitespace\n\n\n\n\n\n\n$(set: vol_speaker)\n\n\nwhitespace\n\n\n\n\n\n\n$(set:vol_speaker )\n\n\nwhitespace\n\n\n\n\n\n\n$(set)\n\n\nmissing argument\n\n\n\n\n\n\n\n\nList of available callbacks\n #\n\n\n\n\n\n\n\n\nCallback Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narch_series\n\n\nReturns the device architecture (Eg. architecture: snom3XX, snom7Xx, snom8XX)\n\n\n\n\n\n\nbool_eval\n\n\nReturns the boolean value for true or false value\n\n\n\n\n\n\ncheckbox_property\n\n\nReturns if the checkbox property is available on this phone (\navailable\n, \nnone\n)\n\n\n\n\n\n\ncondition\n\n\nReturns \"1\" if the condition is true, else \"0\". This is the callback version of the attribute of the same name \nhere\n.\n\n\n\n\n\n\ncreate_url\n\n\nCreates an URL out of the parameter\n\n\n\n\n\n\ncurrent_input\n\n\nReturns the current minibrowser input\n\n\n\n\n\n\ncurrent_line\n\n\nReturns the current line of 1-12 (active user id)\n\n\n\n\n\n\ndate\n\n\nReturn the current date\n\n\n\n\n\n\ntime\n\n\nReturns the current time\n\n\n\n\n\n\ndisplay_type\n\n\nReturns the display type of phone: \ncolor_touch\n, \ncolor\n, \ngreyscale\n, \nmonochrome\n, \ncharacter\n, \nnone\n\n\n\n\n\n\nedit_mode\n\n\nToggles edit mode to the next one\n\n\n\n\n\n\nnext_edit_mode\n\n\nReturns the next edit mode of the system\n\n\n\n\n\n\nempty\n\n\nReturns \ntrue\n or \nfalse\n depending if arg is a an empty string\n\n\n\n\n\n\nenum\n\n\nReturns an enumeration out of parameter \nstart[:end[:step]]\n. e.g. \n$(enum:$(max_registrations)) = |1|2|3|4|5|6|7|8|9|10|11|12|\n\n\n\n\n\n\nfragment\n\n\nReturns the corresponding value for the given key from the current uri fragment\n\n\n\n\n\n\nlang\n\n\nReturns the localized gui string for a given language key\n\n\n\n\n\n\nlastsel\n\n\nReturns the data of the selected list item. (Sometimes it's the id attribute of the last MenuItem)\n\n\n\n\n\n\nsel\n\n\nReturns the data of the selected list item. (Sometimes it's the id attribute of a MenuItem)\n\n\n\n\n\n\nlines\n\n\nReturns number of calls\n\n\n\n\n\n\nlist_size\n\n\nReturns the number of listed items\n\n\n\n\n\n\ncb_math_eval\n\n\nEvaluate the parameter into a math result\n\n\n\n\n\n\nmax_registrations\n\n\nReturns the number of maximum registrations\n\n\n\n\n\n\nmax_pkeys\n\n\nReturns the number of maximum programable keys\n\n\n\n\n\n\nmod_ifc\n\n\nReturn boolean value if module (or module's variable) exists\n\n\n\n\n\n\nmodule_id_of_current_line\n\n\nReturns the module-id of the current menu line\n\n\n\n\n\n\non_off\n\n\nReturns the localized string of an on/off for boolean value\n\n\n\n\n\n\nphone_state\n\n\nReturns the current phone state\n\n\n\n\n\n\nremove_cmd\n\n\nCommand to remove leading cmd of fkeys setting (Eg. \nblf 123\n)\n\n\n\n\n\n\nset\n\n\nReturns the value of a setting\n\n\n\n\n\n\nsetcache\n\n\nReturns the corresponding value for the given setting in the settings cache\n\n\n\n\n\n\nshow_feature\n\n\nReturn \ntrue\n or \nfalse\n depend if feature is activated or exist\n\n\n\n\n\n\nstatus_message\n\n\nReturns the status message\n\n\n\n\n\n\nurlencode\n\n\nReturns the argument URL-encoded\n\n\n\n\n\n\nuser_displayname\n\n\nReturns the displayname of given identity\n\n\n\n\n\n\nvar\n\n\nReturns the corresponding value for the given variable in the variables cache\n\n\n\n\n\n\nvar_ifc\n\n\nAsk the value of a variable from telephone modules\n\n\n\n\n\n\nwifiscan\n\n\nScans for available WIFI SSIDs and returns them as a list\n\n\n\n\n\n\nwlang\n\n\nReturns the localized web string for a given language key\n\n\n\n\n\n\nx_o\n\n\nReturns checked or unchecked character for boolean value\n\n\n\n\n\n\nyes_no\n\n\nReturns the localized string of an yes/no for boolean value\n\n\n\n\n\n\n\n\nDifferences between placeholders\n #\n\n\nCallback can be used with two different placeholder, \n$(...)\n and \n$[...]\n. the main difference between them is, when the value will be fetched.\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneMenu id=\nmenu\n\n        \nMenuItem name=\nmi1\n id=\nmi1\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_different_placeholdes.xml#sub=*[@id=\ntext\n]\namp;var:text=$[sel]\n/Url\n\n        \n/MenuItem\n\n        \nMenuItem name=\nmi2\n id=\nmi2\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_different_placeholdes.xml#sub=*[@id=\ntext\n]\namp;var:text=$[sel]\n/Url\n\n        \n/MenuItem\n\n        \nMenuItem name=\nmi3\n id=\nmi3\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_different_placeholdes.xml#sub=*[@id=\ntext\n]\namp;var:text=$[sel]\n/Url\n\n        \n/MenuItem\n\n    \n/SnomIPPhoneMenu\n\n    \nSnomIPPhoneText id=\ntext\n\n        \nText\nselected id = $(var:text)\n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch\n\n\n\n\nIn the first page \nsel\n callback is not yet replaced. But after one of the \nMenuItem\n is selected, the \nsel\n callback will be replaced with selected \nMenuItem\n id and it will be printed on second page through \nvar\n callback.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xml_minibrowser/callbacks/#snom_minibrowser_callbacks", 
            "text": "To make use of dynamic information the content of certain elements and attributes are evaluated in order to translate special callback expressions.\nThey have the form  $(name)  or  $(name:arg)  and are dynamically replaced by their return values.   Note  The result from callback in example code, which using the telephone specific setting, may differs for another Snom telephone   Things to consider when writing callbacks:   Callbacks argument : necessity of the argument, limitation on argument.  Extra white space on callbacks name and arguments : see the example below.  Character case of the callback and its argument    Warning  There are 2 type of callback place holder,  $(...)  and  $[...] . The one using square brackets will be explained  here   Here some examples of common errors:  Correct syntax:  $(max_pkeys)\n$(set:vol_speakers)     Error Example  Description      $ (max_pkeys)  whitespace    $( max_pkeys)  whitespace    $(max_pkeys )  whitespace    $(max_pkeys:argument)  unnecessary argument    $(set :vol_speaker)  whitespace    $(set: vol_speaker)  whitespace    $(set:vol_speaker )  whitespace    $(set)  missing argument", 
            "title": "Snom Minibrowser Callbacks"
        }, 
        {
            "location": "/xml_minibrowser/callbacks/#list_of_available_callbacks", 
            "text": "Callback Name  Description      arch_series  Returns the device architecture (Eg. architecture: snom3XX, snom7Xx, snom8XX)    bool_eval  Returns the boolean value for true or false value    checkbox_property  Returns if the checkbox property is available on this phone ( available ,  none )    condition  Returns \"1\" if the condition is true, else \"0\". This is the callback version of the attribute of the same name  here .    create_url  Creates an URL out of the parameter    current_input  Returns the current minibrowser input    current_line  Returns the current line of 1-12 (active user id)    date  Return the current date    time  Returns the current time    display_type  Returns the display type of phone:  color_touch ,  color ,  greyscale ,  monochrome ,  character ,  none    edit_mode  Toggles edit mode to the next one    next_edit_mode  Returns the next edit mode of the system    empty  Returns  true  or  false  depending if arg is a an empty string    enum  Returns an enumeration out of parameter  start[:end[:step]] . e.g.  $(enum:$(max_registrations)) = |1|2|3|4|5|6|7|8|9|10|11|12|    fragment  Returns the corresponding value for the given key from the current uri fragment    lang  Returns the localized gui string for a given language key    lastsel  Returns the data of the selected list item. (Sometimes it's the id attribute of the last MenuItem)    sel  Returns the data of the selected list item. (Sometimes it's the id attribute of a MenuItem)    lines  Returns number of calls    list_size  Returns the number of listed items    cb_math_eval  Evaluate the parameter into a math result    max_registrations  Returns the number of maximum registrations    max_pkeys  Returns the number of maximum programable keys    mod_ifc  Return boolean value if module (or module's variable) exists    module_id_of_current_line  Returns the module-id of the current menu line    on_off  Returns the localized string of an on/off for boolean value    phone_state  Returns the current phone state    remove_cmd  Command to remove leading cmd of fkeys setting (Eg.  blf 123 )    set  Returns the value of a setting    setcache  Returns the corresponding value for the given setting in the settings cache    show_feature  Return  true  or  false  depend if feature is activated or exist    status_message  Returns the status message    urlencode  Returns the argument URL-encoded    user_displayname  Returns the displayname of given identity    var  Returns the corresponding value for the given variable in the variables cache    var_ifc  Ask the value of a variable from telephone modules    wifiscan  Scans for available WIFI SSIDs and returns them as a list    wlang  Returns the localized web string for a given language key    x_o  Returns checked or unchecked character for boolean value    yes_no  Returns the localized string of an yes/no for boolean value", 
            "title": "List of available callbacks"
        }, 
        {
            "location": "/xml_minibrowser/callbacks/#differences_between_placeholders", 
            "text": "Callback can be used with two different placeholder,  $(...)  and  $[...] . the main difference between them is, when the value will be fetched.   Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneMenu id= menu \n         MenuItem name= mi1  id= mi1 \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_different_placeholdes.xml#sub=*[@id= text ] amp;var:text=$[sel] /Url \n         /MenuItem \n         MenuItem name= mi2  id= mi2 \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_different_placeholdes.xml#sub=*[@id= text ] amp;var:text=$[sel] /Url \n         /MenuItem \n         MenuItem name= mi3  id= mi3 \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_different_placeholdes.xml#sub=*[@id= text ] amp;var:text=$[sel] /Url \n         /MenuItem \n     /SnomIPPhoneMenu \n     SnomIPPhoneText id= text \n         Text selected id = $(var:text) /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch  In the first page  sel  callback is not yet replaced. But after one of the  MenuItem  is selected, the  sel  callback will be replaced with selected  MenuItem  id and it will be printed on second page through  var  callback.", 
            "title": "Differences between placeholders"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_arch_series/", 
            "text": "arch_series callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow menuitem based on architecture series\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nIf condition=\n$(arch_series)==snom8xx\n\n        \nMenuItem name=\nFor 8xx\n\n            \nUrl\nhttp://website.com/snom8xx.xml\n/Url\n\n        \n/MenuItem\n\n    \n/If\n\n    \nElif condition=\n$(arch_series)==snom7xx\n\n        \nMenuItem name=\nFor 7xx\n\n            \nUrl\nhttp://website.com/snom7xx.xml\n/Url\n\n        \n/MenuItem\n\n    \n/Elif\n\n    \nElif condition=\n$(arch_series)==snom3xx\n\n        \nMenuItem name=\nFor 3xx\n\n            \nUrl\nhttp://website.com/snom3xx.xml\n/Url\n\n        \n/MenuItem\n\n    \n/Elif\n\n    \nElif condition=\n$(arch_series)==snomD3X5\n\n        \nMenuItem name=\nFor D3X5\n\n            \nUrl\nhttp://website.com/snomD3x5.xml\n/Url\n\n        \n/MenuItem\n\n    \n/Elif\n\n    \nElse\n\n        \nMenuItem name=\nNot found: I am $(arch_series)\n\n            \nUrl\nhttp://website.com/no_arch_series.xml\n/Url\n\n        \n/MenuItem\n\n    \n/Else\n\n\n/SnomIPPhoneMenu", 
            "title": "arch_series"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_arch_series/#arch_series_callback", 
            "text": "Demo  Try on your phone   Show menuitem based on architecture series  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     If condition= $(arch_series)==snom8xx \n         MenuItem name= For 8xx \n             Url http://website.com/snom8xx.xml /Url \n         /MenuItem \n     /If \n     Elif condition= $(arch_series)==snom7xx \n         MenuItem name= For 7xx \n             Url http://website.com/snom7xx.xml /Url \n         /MenuItem \n     /Elif \n     Elif condition= $(arch_series)==snom3xx \n         MenuItem name= For 3xx \n             Url http://website.com/snom3xx.xml /Url \n         /MenuItem \n     /Elif \n     Elif condition= $(arch_series)==snomD3X5 \n         MenuItem name= For D3X5 \n             Url http://website.com/snomD3x5.xml /Url \n         /MenuItem \n     /Elif \n     Else \n         MenuItem name= Not found: I am $(arch_series) \n             Url http://website.com/no_arch_series.xml /Url \n         /MenuItem \n     /Else  /SnomIPPhoneMenu", 
            "title": "arch_series callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_bool_eval/", 
            "text": "bool_eval callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nSome simple comparison and example on bool_eval operator.\nCallback \nbool_eval\n have additional operators, which are \nOR\n operator (\n|\n pipe character) and \nAND\n operator (\n ampersand character).\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n\nTitle\ncb bool_eval\n/Title\n\n\n!-- 1 --\nMenuItem name=\ntrue:$(bool_eval:true)\n /\n\n\n!-- 0 --\nMenuItem name=\nfalse:$(bool_eval:false)\n /\n\n\n!-- 1 --\nMenuItem name=\ntrue | true : $(bool_eval:true | true)\n /\n\n\n!-- 1 --\nMenuItem name=\ntrue | false :$(bool_eval:true | false)\n /\n\n\n!-- 1 --\nMenuItem name=\nfalse | true :$(bool_eval:false | true)\n /\n\n\n!-- 0 --\nMenuItem name=\nfalse | false :$(bool_eval:false | false) \n /\n\n\n!-- 1 --\nMenuItem name=\ntrue \n true : $(bool_eval:true \n true)\n /\n\n\n!-- 0 --\nMenuItem name=\ntrue \n false :$(bool_eval:true \n false)\n /\n\n\n!-- 0 --\nMenuItem name=\nfalse \n true :$(bool_eval:false \n true)\n /\n\n\n!-- 0 --\nMenuItem name=\nfalse \n false :$(bool_eval:false \n false) \n /\n\n\n!-- 0 --\nMenuItem name=\nfalse | true \n false :$(bool_eval:false | true \n false)\n /\n\n\n!-- 0 --\nMenuItem name=\ntrue \n false | false :$(bool_eval:true \n false | false)\n /\n\n\n!-- 1 --\nMenuItem name=\ntrue \n false | true :$(bool_eval:true \n false | true)\n /\n\n\n/SnomIPPhoneMenu", 
            "title": "bool_eval"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_bool_eval/#bool_eval_callback", 
            "text": "Demo  Try on your phone   Some simple comparison and example on bool_eval operator.\nCallback  bool_eval  have additional operators, which are  OR  operator ( |  pipe character) and  AND  operator (  ampersand character).  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  Title cb bool_eval /Title  !-- 1 -- MenuItem name= true:$(bool_eval:true)  /  !-- 0 -- MenuItem name= false:$(bool_eval:false)  /  !-- 1 -- MenuItem name= true | true : $(bool_eval:true | true)  /  !-- 1 -- MenuItem name= true | false :$(bool_eval:true | false)  /  !-- 1 -- MenuItem name= false | true :$(bool_eval:false | true)  /  !-- 0 -- MenuItem name= false | false :$(bool_eval:false | false)   /  !-- 1 -- MenuItem name= true   true : $(bool_eval:true   true)  /  !-- 0 -- MenuItem name= true   false :$(bool_eval:true   false)  /  !-- 0 -- MenuItem name= false   true :$(bool_eval:false   true)  /  !-- 0 -- MenuItem name= false   false :$(bool_eval:false   false)   /  !-- 0 -- MenuItem name= false | true   false :$(bool_eval:false | true   false)  /  !-- 0 -- MenuItem name= true   false | false :$(bool_eval:true   false | false)  /  !-- 1 -- MenuItem name= true   false | true :$(bool_eval:true   false | true)  /  /SnomIPPhoneMenu", 
            "title": "bool_eval callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_checkbox_property/", 
            "text": "cb_checkbox_property callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow menu item if phone have/don't have check box property\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n\nMenu name=\nmenu1\n\n \nIf condition=\n$(checkbox_property)==available\n\n\nMenuItem name=\ncheckbox property available\n/MenuItem\n\n \n/If\n\n \nElif condition=\n$(checkbox_property)==none\n\n \nMenuItem name=\nno checkbox property\n/MenuItem\n\n \n/Elif\n\n \nElse\n\n \nMenuItem name=\nunknown checkbox property\n/MenuItem\n\n \n/Else\n\n\n/Menu\n\n\n/SnomIPPhoneMenu", 
            "title": "checkbox_property"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_checkbox_property/#cb_checkbox_property_callback", 
            "text": "Demo  Try on your phone   Show menu item if phone have/don't have check box property  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  Menu name= menu1 \n  If condition= $(checkbox_property)==available  MenuItem name= checkbox property available /MenuItem \n  /If \n  Elif condition= $(checkbox_property)==none \n  MenuItem name= no checkbox property /MenuItem \n  /Elif \n  Else \n  MenuItem name= unknown checkbox property /MenuItem \n  /Else  /Menu  /SnomIPPhoneMenu", 
            "title": "cb_checkbox_property callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_condition/", 
            "text": "condition callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nSome simple comparison operation. All of the rule from condition attribute from \nif\n tag is still valid here. It include the operator and how this callback work.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\ncb condition\nbr/\n\n    a==a:$(condition:a==a)\nbr/\n \n    !a==a:$(condition:!a==a)\nbr/\n\n    a==A:$(condition:a==A)\nbr/\n\n    10\n=10:$(condition: 10\n=10)\nbr/\n\n    9\nlt;10:$(condition:9\nlt;10)\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "condition"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_condition/#condition_callback", 
            "text": "Demo  Try on your phone   Some simple comparison operation. All of the rule from condition attribute from  if  tag is still valid here. It include the operator and how this callback work.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text cb condition br/ \n    a==a:$(condition:a==a) br/  \n    !a==a:$(condition:!a==a) br/ \n    a==A:$(condition:a==A) br/ \n    10 =10:$(condition: 10 =10) br/ \n    9 lt;10:$(condition:9 lt;10)\n     /Text  /SnomIPPhoneText", 
            "title": "condition callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_create_url/", 
            "text": "create_url callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nCreate a SIP URL.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\nDemo\n/Title\n\n    \nText\n\n        $(create_url:abc)\n    \n/Text\n\n\n\n/SnomIPPhoneText\n\n\n!--\nresult:\n\nsip:abc@10.110.22.237\n;user=phone\nThe later part '10.110.22.237' is the registrar of the telephone\n--", 
            "title": "create_url"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_create_url/#create_url_callback", 
            "text": "Demo  Try on your phone   Create a SIP URL.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title Demo /Title \n     Text \n        $(create_url:abc)\n     /Text  /SnomIPPhoneText  !--\nresult: sip:abc@10.110.22.237 ;user=phone\nThe later part '10.110.22.237' is the registrar of the telephone\n--", 
            "title": "create_url callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_current_input/", 
            "text": "current_input callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nSame example of \nInputField\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nnormal menu\n speedselect=\noff\n\n        \nTitle\nnormal menu title\n/Title\n\n        \nInputField\n\n            \nHandler event=\nkeypress\nfile:///xml/text.xml#var:text=$[current_input]\n/Handler\n\n            \nHandler event=\ntimeout\nfile:///xml/text.xml#var:text=TIMEOUT:$[current_input]\n/Handler\n\n            \nTimeout\n3000\n/Timeout\n\n            \nMinimum\n3\n/Minimum\n\n            \nPrompt\nInput:\n/Prompt\n\n            \nKey\nENTER\n/Key\n\n        \n/InputField\n\n        \nMenuitem name=\nJudith Bernhardt\n /\n\n        \nMenuitem name=\nLeigh Vargas\n /\n\n        \nMenuitem name=\nWilliam Kosinski\n /\n\n    \n/Menu\n\n\n/SnomIPPhoneMenu", 
            "title": "current_input"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_current_input/#current_input_callback", 
            "text": "Demo  Try on your phone   Same example of  InputField  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= normal menu  speedselect= off \n         Title normal menu title /Title \n         InputField \n             Handler event= keypress file:///xml/text.xml#var:text=$[current_input] /Handler \n             Handler event= timeout file:///xml/text.xml#var:text=TIMEOUT:$[current_input] /Handler \n             Timeout 3000 /Timeout \n             Minimum 3 /Minimum \n             Prompt Input: /Prompt \n             Key ENTER /Key \n         /InputField \n         Menuitem name= Judith Bernhardt  / \n         Menuitem name= Leigh Vargas  / \n         Menuitem name= William Kosinski  / \n     /Menu  /SnomIPPhoneMenu", 
            "title": "current_input callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_current_line/", 
            "text": "current_line callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow the id of current active user. This can range from 1 to 12 or 1 to 4 depend on your snom phone max user registration\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n$(current_line)\n/Text\n\n\n/SnomIPPhoneText", 
            "title": "current_line"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_current_line/#current_line_callback", 
            "text": "Demo  Try on your phone   Show the id of current active user. This can range from 1 to 12 or 1 to 4 depend on your snom phone max user registration  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text $(current_line) /Text  /SnomIPPhoneText", 
            "title": "current_line callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_date/", 
            "text": "date callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow current date.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n\nText\ndate: $(date)\n/Text\n \n!-- 12.03.2014 or 03/12/2014 --\n\n\n/SnomIPPhoneText", 
            "title": "date"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_date/#date_callback", 
            "text": "Demo  Try on your phone   Show current date.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  Text date: $(date) /Text   !-- 12.03.2014 or 03/12/2014 --  /SnomIPPhoneText", 
            "title": "date callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_time/", 
            "text": "time callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow current time with format HH:MM\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nFetch mil=\n500\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_time.xml\n/Fetch\n\n    \nText\ntime: $(time)\n/Text\n!-- 05:15AM or 05:15 --\n\n\n/SnomIPPhoneText", 
            "title": "time"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_time/#time_callback", 
            "text": "Demo  Try on your phone   Show current time with format HH:MM  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Fetch mil= 500 http://docs.snom.io/xml_minibrowser/examples/xml/cb_time.xml /Fetch \n     Text time: $(time) /Text !-- 05:15AM or 05:15 --  /SnomIPPhoneText", 
            "title": "time callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_display_type/", 
            "text": "display_type callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nCheck which display type is used and print the text on based on result\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nTitle\n$(display_type)\n/Title\n\n    \nIf condition=\n$(display_type)==color_touch\n\n        \nMenuItem name=\nDisplay type:color_touch\n/MenuItem\n\n    \n/If\n\n    \nElif condition=\n$(display_type)==color\n\n        \nMenuItem name=\nDisplay type:color\n/MenuItem\n\n    \n/Elif\n\n    \nElif condition=\n$(display_type)==greyscale\n\n        \nMenuItem name=\nDisplay type:greyscale\n/MenuItem\n\n    \n/Elif\n\n    \nElif condition=\n$(display_type)==monochrome\n\n        \nMenuItem name=\nDisplay type:monochrome\n/MenuItem\n\n    \n/Elif\n\n    \nElif condition=\n$(display_type)==character\n\n        \nMenuItem name=\nDisplay type:character\n/MenuItem\n\n    \n/Elif\n\n    \nElif condition=\n$(display_type)==none\n\n        \nMenuItem name=\nDisplay type:none\n/MenuItem\n\n    \n/Elif\n\n    \nElse\n\n        \nMenuItem name=\nNot defined display type\n\n        \n/MenuItem\n\n    \n/Else\n\n\n/SnomIPPhoneMenu", 
            "title": "display_type"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_display_type/#display_type_callback", 
            "text": "Demo  Try on your phone   Check which display type is used and print the text on based on result  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Title $(display_type) /Title \n     If condition= $(display_type)==color_touch \n         MenuItem name= Display type:color_touch /MenuItem \n     /If \n     Elif condition= $(display_type)==color \n         MenuItem name= Display type:color /MenuItem \n     /Elif \n     Elif condition= $(display_type)==greyscale \n         MenuItem name= Display type:greyscale /MenuItem \n     /Elif \n     Elif condition= $(display_type)==monochrome \n         MenuItem name= Display type:monochrome /MenuItem \n     /Elif \n     Elif condition= $(display_type)==character \n         MenuItem name= Display type:character /MenuItem \n     /Elif \n     Elif condition= $(display_type)==none \n         MenuItem name= Display type:none /MenuItem \n     /Elif \n     Else \n         MenuItem name= Not defined display type \n         /MenuItem \n     /Else  /SnomIPPhoneMenu", 
            "title": "display_type callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_edit_mode/", 
            "text": "edit_mode and next_edit_mode callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nWarning\n\n\nThis section is for \nedit_mode\n and \nnext_edit_mode\n callbacks.\n\n\n\n\nShow the current and next input mode. This example is taken from \nnext_edit_mode\n fragment.\nJust select the first menu and see the value from \nedit_mode\n and \nnext_edit_mode\n callback and also the input mode (lower-case, upper-case and number) change when pressing F1.\n\n\n\n\nWarning\n\n\nDon't forget to add the server IP address or hostname as minibrowser trusted host, when running this example.\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nem:$(edit_mode);nem:$(next_edit_mode)\n speedselect=\noff\n\n        \nInputField\n\n            \nHandler event=\nkeypress\nfile:///xml/text.xml#var:text=$[current_input]\n/Handler\n\n            \nHandler event=\ntimeout\nfile:///xml/text.xml#var:text=TIMEOUT:$[current_input]\n/Handler\n\n            \nKey\nENTER\n/Key\n\n            \nTimeout\n3000\n/Timeout\n\n            \nMinimum\n3\n/Minimum\n\n            \nPrompt\nInput:\n/Prompt\n\n        \n/InputField\n\n        \nSoftKeyItem\n\n            \nName\nF1\n/Name\n\n            \nLabel\nNext mode\n/Label\n\n            \nUrl\nsnom://mb_nop#next_edit_mode\n/Url\n\n        \n/SoftKeyItem\n\n    \n/Menu\n\n\n\n/SnomIPPhoneMenu", 
            "title": "edit_mode"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_edit_mode/#edit_mode_and_next_edit_mode_callback", 
            "text": "Demo  Try on your phone    Warning  This section is for  edit_mode  and  next_edit_mode  callbacks.   Show the current and next input mode. This example is taken from  next_edit_mode  fragment.\nJust select the first menu and see the value from  edit_mode  and  next_edit_mode  callback and also the input mode (lower-case, upper-case and number) change when pressing F1.   Warning  Don't forget to add the server IP address or hostname as minibrowser trusted host, when running this example.   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= em:$(edit_mode);nem:$(next_edit_mode)  speedselect= off \n         InputField \n             Handler event= keypress file:///xml/text.xml#var:text=$[current_input] /Handler \n             Handler event= timeout file:///xml/text.xml#var:text=TIMEOUT:$[current_input] /Handler \n             Key ENTER /Key \n             Timeout 3000 /Timeout \n             Minimum 3 /Minimum \n             Prompt Input: /Prompt \n         /InputField \n         SoftKeyItem \n             Name F1 /Name \n             Label Next mode /Label \n             Url snom://mb_nop#next_edit_mode /Url \n         /SoftKeyItem \n     /Menu  /SnomIPPhoneMenu", 
            "title": "edit_mode and next_edit_mode callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_empty/", 
            "text": "empty callback\n #\n\n\n\n\nDemo\n\n\n\n\nWith value\n: \nTry on your phone\n\n\nEmpty\n: \nTry on your phone\n\n\n\n\n\n\nThis example code will return two different result depending of the existence of the content of variable \nsome_var\n\n\nIf called with \nhttp://server/thisexample.xml#var:some_var=hello_world\n\n\nResult:\n\n\nVariable received\nsome_var:hello_world\n\n\n\n\nIf called only with \nhttp://server/this.xml\n\n\nResult:\n\n\nNo variable received\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n\nIf condition=\n$(empty:$(var:some_var))\n\n    \nText\nNo variable received\nbr/\n/Text\n\n\n/If\nElse\n\n    \nText\nVariable received\nbr/\n\n    some_var:$(var:some_var)\n/Text\n\n\n/Else\n\n\n/SnomIPPhoneText", 
            "title": "empty"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_empty/#empty_callback", 
            "text": "Demo   With value :  Try on your phone  Empty :  Try on your phone    This example code will return two different result depending of the existence of the content of variable  some_var  If called with  http://server/thisexample.xml#var:some_var=hello_world  Result:  Variable received\nsome_var:hello_world  If called only with  http://server/this.xml  Result:  No variable received  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  If condition= $(empty:$(var:some_var)) \n     Text No variable received br/ /Text  /If Else \n     Text Variable received br/ \n    some_var:$(var:some_var) /Text  /Else  /SnomIPPhoneText", 
            "title": "empty callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_enum/", 
            "text": "enum callback\n #\n\n\nUsage Hint\n\n\n\n\nArguments is an integer type. It mean there is no decimal point for arguments.\n\n\nArguments is separated by colon.\n\n\nIf only one argument given, the argument will transferred as end value. The loop will start from one to end value with step from one (or minus one if end value is smaller than one).\n\n\nIf two arguments give, the first argument will transferred to start value and the second one to end value. If the start value is bigger than end value the loop will have step value from one. In other case the loop will have step value from minus one.\n\n\nIf three arguments given, the arguments will transferred to start, end and step value respectively. The sign of step value will be modified based on the comparison of start and end value.\n\n\nIf Step value is bigger than the difference between start and end value, the callback will only return start value.\n\n\nBe careful for the syntax when using another callback as argument. In this example you have to write following: \n$(enum:$(max_registrations))\n or \n$(enum:$(set:vol_speaker_mic))\n\n\n\n\n\n\n\n\n\n\nArgument\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n5\n\n\n|1|2|3|4|5|\n\n\n\n\n\n\n-5\n\n\n|1|0|-1|-2|-3|-4|-5|\n\n\n\n\n\n\n1:8\n\n\n|1|2|3|4|5|6|7|8|\n\n\n\n\n\n\n1:-3\n\n\n|1|0|-1|-2|-3|\n\n\n\n\n\n\n4:-1\n\n\n|4|3|2|1|0|-1|\n\n\n\n\n\n\n1:8:2\n\n\n|1|3|5|7|\n\n\n\n\n\n\n1:-8:-2\n\n\n|1|-1|-3|-5|-7|\n\n\n\n\n\n\n1:-8:2\n\n\n|1|-1|-3|-5|-7|\n\n\n\n\n\n\n-8:1:-2\n\n\n|-8|-6|-4|-2|0|\n\n\n\n\n\n\n-8:1:3\n\n\n|-8|-5|-2|-1|\n\n\n\n\n\n\n-8:1:11\n\n\n|-8|\n\n\n\n\n\n\n$(max_registrations)\n\n\n|1|2|3|4|5|6|7|8|9|10|11|12|", 
            "title": "enum"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_enum/#enum_callback", 
            "text": "Usage Hint   Arguments is an integer type. It mean there is no decimal point for arguments.  Arguments is separated by colon.  If only one argument given, the argument will transferred as end value. The loop will start from one to end value with step from one (or minus one if end value is smaller than one).  If two arguments give, the first argument will transferred to start value and the second one to end value. If the start value is bigger than end value the loop will have step value from one. In other case the loop will have step value from minus one.  If three arguments given, the arguments will transferred to start, end and step value respectively. The sign of step value will be modified based on the comparison of start and end value.  If Step value is bigger than the difference between start and end value, the callback will only return start value.  Be careful for the syntax when using another callback as argument. In this example you have to write following:  $(enum:$(max_registrations))  or  $(enum:$(set:vol_speaker_mic))      Argument  Result      5  |1|2|3|4|5|    -5  |1|0|-1|-2|-3|-4|-5|    1:8  |1|2|3|4|5|6|7|8|    1:-3  |1|0|-1|-2|-3|    4:-1  |4|3|2|1|0|-1|    1:8:2  |1|3|5|7|    1:-8:-2  |1|-1|-3|-5|-7|    1:-8:2  |1|-1|-3|-5|-7|    -8:1:-2  |-8|-6|-4|-2|0|    -8:1:3  |-8|-5|-2|-1|    -8:1:11  |-8|    $(max_registrations)  |1|2|3|4|5|6|7|8|9|10|11|12|", 
            "title": "enum callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_fragment/", 
            "text": "condition fragment\n #\n\n\nUsage hints:\n\n\n\n\nArguments for fragment is case insensitive.\n\n\nIf fragment variable get more than one value, the first value will be taken as the result by callback.\n\n\n\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=text' \n$(fragment:op) -\n text\n$(fragment:OP) -\n text\n$(fragment:oP) -\n text\n$(fragment:Op) -\n text\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=text\nop=1234' \n$(fragment:op) -\n text\n$(fragment:OP) -\n text\n$(fragment:oP) -\n text\n$(fragment:Op) -\n text\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=1234\nop=text' \n$(fragment:op) -\n 1234\n$(fragment:OP) -\n 1234\n$(fragment:oP) -\n 1234\n$(fragment:Op) -\n 1234\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=1234\noP=text' \n$(fragment:op) -\n 1234\n$(fragment:OP) -\n 1234\n$(fragment:oP) -\n 1234\n$(fragment:Op) -\n 1234", 
            "title": "fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_fragment/#condition_fragment", 
            "text": "Usage hints:   Arguments for fragment is case insensitive.  If fragment variable get more than one value, the first value will be taken as the result by callback.   URI(without quotes) = 'http://abc.com/hello.xml#op=text' \n$(fragment:op) -  text\n$(fragment:OP) -  text\n$(fragment:oP) -  text\n$(fragment:Op) -  text\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=text op=1234' \n$(fragment:op) -  text\n$(fragment:OP) -  text\n$(fragment:oP) -  text\n$(fragment:Op) -  text\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=1234 op=text' \n$(fragment:op) -  1234\n$(fragment:OP) -  1234\n$(fragment:oP) -  1234\n$(fragment:Op) -  1234\n\nURI(without quotes) = 'http://abc.com/hello.xml#op=1234 oP=text' \n$(fragment:op) -  1234\n$(fragment:OP) -  1234\n$(fragment:oP) -  1234\n$(fragment:Op) -  1234", 
            "title": "condition fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_lang/", 
            "text": "lang callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nSome valid key and the result from two different PUI language.\nThe result may change if you use customized language or there is an update to language file.\nTo change PUI language go to PUI Menu -\n (1) Preference -\n (4) Language.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n\n!-- Deutsch --\n!-- English --\n\n\n!-- Ja --\nMenuItem name=\n$(lang:yes)\n/MenuItem\n!-- Yes --\n\n\n!-- Nein --\nMenuItem name=\n$(lang:no)\n/MenuItem\n!-- No --\n\n\n!-- Januar --\nMenuItem name=\n$(lang:lang_month_01)\n/MenuItem\n!-- January --\n\n\n!-- Februar --\nMenuItem name=\n$(lang:lang_month_02)\n/MenuItem\n!-- February --\n\n\n/SnomIPPhoneMenu", 
            "title": "lang"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_lang/#lang_callback", 
            "text": "Demo  Try on your phone   Some valid key and the result from two different PUI language.\nThe result may change if you use customized language or there is an update to language file.\nTo change PUI language go to PUI Menu -  (1) Preference -  (4) Language.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  !-- Deutsch -- !-- English --  !-- Ja -- MenuItem name= $(lang:yes) /MenuItem !-- Yes --  !-- Nein -- MenuItem name= $(lang:no) /MenuItem !-- No --  !-- Januar -- MenuItem name= $(lang:lang_month_01) /MenuItem !-- January --  !-- Februar -- MenuItem name= $(lang:lang_month_02) /MenuItem !-- February --  /SnomIPPhoneMenu", 
            "title": "lang callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_lastsel/", 
            "text": "lastsel callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nWarning\n\n\nThis documentation section is for \nsel\n and \nlastsel\n callbacks\n\n\n\n\nUsage hints:\n\n\n\n\nSee also \nhttp://phone_ip/minibrowser.htm?show=RENDERED_XML\n when running example code for \nsel\n callback result.\n\n\nsel\n Value is the id of the \nmenu\n / \nmenuitem\n where the cursor is located\n\n\nInto the \nRENDERED_XML\n phone web page: this will actually show the actual \nmenu\n / \nmenuitem\n id when you refresh the page \n\n\nIn PUI (phone display): it will only show the first \nmenu\n / \nmenuitem\n id, when it is not in the first \nmenu\n / \nmenuitem\n\n\n\n\n\n\nlastsel\n Value is the id of the last \nmenuitem\n id where the cursor in the last \nmenu\n located. As example when you change from first \nmenu\n to second \nmenu\n the \nlastsel\n callback will return id of the \nmenuitem\n in first \nmenu\n, where the cursor was last located.\n\n\n\n\nInstruction example for example code\n\n\nstep1:select first menu (l1menu1)\nstep2:move the cursor to fourth position (l2mi4)\nstep3:press X (go back to first layer)\nstep4:select l1menu2\nResult taken from state_of_gui.htm:\n   \u2192l2mi1:,l2m1mi4\n    l2mi2:l2m2mi1,l2m1mi4\n    l2mi3:l2m2mi1,l2m1mi4\n    l2mi4:l2m2mi1,l2m1mi4\n\n\n\n\nExample: Show the callback result in various menu\n and \nmenuitem* combination.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n track=\nyes\n\n    \nMenu name=\nl1menu1\n id=\nl1menu1\n\n        \nMenuItem name=\nl2mi1:$(sel),$(lastsel)\n id=\nl2m1mi1\n/MenuItem\n\n        \nMenuItem name=\nl2mi2:$(sel),$(lastsel)\n id=\nl2m1mi2\n/MenuItem\n\n        \nMenuItem name=\nl2mi3:$(sel),$(lastsel)\n id=\nl2m1mi3\n/MenuItem\n\n        \nMenuItem name=\nl2mi4:$(sel),$(lastsel)\n id=\nl2m1mi4\n/MenuItem\n\n    \n/Menu\n\n    \nMenu name=\nl1menu2\n id=\nl1menu2\n\n        \nMenuItem name=\nl2mi1:$(sel),$(lastsel)\n id=\nl2m2mi1\n/MenuItem\n\n        \nMenuItem name=\nl2mi2:$(sel),$(lastsel)\n id=\nl2m2mi2\n/MenuItem\n\n        \nMenuItem name=\nl2mi3:$(sel),$(lastsel)\n id=\nl2m2mi3\n/MenuItem\n\n        \nMenuItem name=\nl2mi4:$(sel),$(lastsel)\n id=\nl2m2mi4\n/MenuItem\n\n    \n/Menu\n\n    \nMenu name=\nl1menu3\n id=\nl1menu2\n \n\n        \nMenuItem name=\nl2mi1:$(sel),$(lastsel)\n id=\nl2m3mi1\n/MenuItem\n\n        \nMenuItem name=\nl2mi2:$(sel),$(lastsel)\n id=\nl2m3mi2\n/MenuItem\n\n        \nMenuItem name=\nl2mi3:$(sel),$(lastsel)\n id=\nl2m3mi3\n/MenuItem\n\n        \nMenuItem name=\nl2mi4:$(sel),$(lastsel)\n id=\nl2m3mi4\n sel=\ntrue\n/MenuItem\n\n    \n/Menu\n\n\n/SnomIPPhoneMenu", 
            "title": "lastsel"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_lastsel/#lastsel_callback", 
            "text": "Demo  Try on your phone    Warning  This documentation section is for  sel  and  lastsel  callbacks   Usage hints:   See also  http://phone_ip/minibrowser.htm?show=RENDERED_XML  when running example code for  sel  callback result.  sel  Value is the id of the  menu  /  menuitem  where the cursor is located  Into the  RENDERED_XML  phone web page: this will actually show the actual  menu  /  menuitem  id when you refresh the page   In PUI (phone display): it will only show the first  menu  /  menuitem  id, when it is not in the first  menu  /  menuitem    lastsel  Value is the id of the last  menuitem  id where the cursor in the last  menu  located. As example when you change from first  menu  to second  menu  the  lastsel  callback will return id of the  menuitem  in first  menu , where the cursor was last located.   Instruction example for example code  step1:select first menu (l1menu1)\nstep2:move the cursor to fourth position (l2mi4)\nstep3:press X (go back to first layer)\nstep4:select l1menu2\nResult taken from state_of_gui.htm:\n   \u2192l2mi1:,l2m1mi4\n    l2mi2:l2m2mi1,l2m1mi4\n    l2mi3:l2m2mi1,l2m1mi4\n    l2mi4:l2m2mi1,l2m1mi4  Example: Show the callback result in various menu  and  menuitem* combination.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  track= yes \n     Menu name= l1menu1  id= l1menu1 \n         MenuItem name= l2mi1:$(sel),$(lastsel)  id= l2m1mi1 /MenuItem \n         MenuItem name= l2mi2:$(sel),$(lastsel)  id= l2m1mi2 /MenuItem \n         MenuItem name= l2mi3:$(sel),$(lastsel)  id= l2m1mi3 /MenuItem \n         MenuItem name= l2mi4:$(sel),$(lastsel)  id= l2m1mi4 /MenuItem \n     /Menu \n     Menu name= l1menu2  id= l1menu2 \n         MenuItem name= l2mi1:$(sel),$(lastsel)  id= l2m2mi1 /MenuItem \n         MenuItem name= l2mi2:$(sel),$(lastsel)  id= l2m2mi2 /MenuItem \n         MenuItem name= l2mi3:$(sel),$(lastsel)  id= l2m2mi3 /MenuItem \n         MenuItem name= l2mi4:$(sel),$(lastsel)  id= l2m2mi4 /MenuItem \n     /Menu \n     Menu name= l1menu3  id= l1menu2   \n         MenuItem name= l2mi1:$(sel),$(lastsel)  id= l2m3mi1 /MenuItem \n         MenuItem name= l2mi2:$(sel),$(lastsel)  id= l2m3mi2 /MenuItem \n         MenuItem name= l2mi3:$(sel),$(lastsel)  id= l2m3mi3 /MenuItem \n         MenuItem name= l2mi4:$(sel),$(lastsel)  id= l2m3mi4  sel= true /MenuItem \n     /Menu  /SnomIPPhoneMenu", 
            "title": "lastsel callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_lines/", 
            "text": "lines callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturns number of calls. Can be filtered with parameter \nlines:connected\n. valid argument: connected, offered, offhook, auto_redial, holding, ringing, calling, invalid, on_hold, closed, ringback.\n\n\nExample: Show all the number of lines in various state. When no argument given, the callback will give the sum of lines in various state\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nText\n\n        $(lines):no argument\nbr/\n\n        $(lines:connected):connected\nbr/\n\n        $(lines:holding):holding\nbr/\n\n        $(lines:on_hold):on_hold\nbr/\n\n        $(lines:offered):offered\nbr/\n\n        $(lines:ringing):ringing\nbr/\nbr/\n\n        $(lines:closed):closed\nbr/\n\n        $(lines:offhook):offhook\nbr/\n\n        $(lines:calling):calling\nbr/\n\n        $(lines:ringback):ringback\nbr/\n\n        $(lines:auto_redial):auto_redial\nbr/\n\n        $(lines:invalid):invalid\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "lines"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_lines/#lines_callback", 
            "text": "Demo  Try on your phone   Returns number of calls. Can be filtered with parameter  lines:connected . valid argument: connected, offered, offhook, auto_redial, holding, ringing, calling, invalid, on_hold, closed, ringback.  Example: Show all the number of lines in various state. When no argument given, the callback will give the sum of lines in various state  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Text \n        $(lines):no argument br/ \n        $(lines:connected):connected br/ \n        $(lines:holding):holding br/ \n        $(lines:on_hold):on_hold br/ \n        $(lines:offered):offered br/ \n        $(lines:ringing):ringing br/ br/ \n        $(lines:closed):closed br/ \n        $(lines:offhook):offhook br/ \n        $(lines:calling):calling br/ \n        $(lines:ringback):ringback br/ \n        $(lines:auto_redial):auto_redial br/ \n        $(lines:invalid):invalid\n     /Text  /SnomIPPhoneText", 
            "title": "lines callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_list_size/", 
            "text": "list_size callback\n #\n\n\n\n\nDemo\n\n\n\n\nExample 1\n: \nTry on your phone\n\n\nExample 2\n: \nTry on your phone\n\n\n\n\n\n\n\n\nThe number of list size is based on where the callback is called. On example code 1, rather than return number 5, which is the amount of \nMenuItem\n, the callback return 3 as result.\n\n\nOn \nSnomIPPhoneText\n on example code 2, this is not limited when the line is differentiate by \nbr/\n. The lorem ipsum text add more additional lines and make the \nlist_size\n callback return 6 as result.\n\n\n\n\nExample 1\n: Get list size of simple \nMenuItem\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nline1\n/MenuItem\n\n    \nMenuItem name=\nline2\n/MenuItem\n\n    \nMenuItem name=\nline3\n/MenuItem\n\n    \nMenuItem name=\nlist_size:$(list_size)\n/MenuItem\n!-- list_size:3--\n\n    \nMenuItem name=\nline5\n/MenuItem\n\n\n/SnomIPPhoneMenu\n\n\n\n\nExample 2\n: Get list size of simple \nMenuItem\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        line1\nbr /\n\n        line2\nbr /\n\n        lorem ipusfjsa\u00f6ljkfsa\u00f6lj\n        lkf\u00f6lsdajf\u00f6l jf\u00f6 jfkj a\u00f6fjs \n        jf\u00f6dajf\u00f6j a\u00f6lj \u00f6ojsfdjsdkfj\u00f6ldfj\nbr /\n\n        list_size:$(list_size)\n    \n/Text\n!-- list_size:6 --\n\n\n/SnomIPPhoneText", 
            "title": "list_size"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_list_size/#list_size_callback", 
            "text": "Demo   Example 1 :  Try on your phone  Example 2 :  Try on your phone     The number of list size is based on where the callback is called. On example code 1, rather than return number 5, which is the amount of  MenuItem , the callback return 3 as result.  On  SnomIPPhoneText  on example code 2, this is not limited when the line is differentiate by  br/ . The lorem ipsum text add more additional lines and make the  list_size  callback return 6 as result.   Example 1 : Get list size of simple  MenuItem  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= line1 /MenuItem \n     MenuItem name= line2 /MenuItem \n     MenuItem name= line3 /MenuItem \n     MenuItem name= list_size:$(list_size) /MenuItem !-- list_size:3-- \n     MenuItem name= line5 /MenuItem  /SnomIPPhoneMenu  Example 2 : Get list size of simple  MenuItem  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n        line1 br / \n        line2 br / \n        lorem ipusfjsa\u00f6ljkfsa\u00f6lj\n        lkf\u00f6lsdajf\u00f6l jf\u00f6 jfkj a\u00f6fjs \n        jf\u00f6dajf\u00f6j a\u00f6lj \u00f6ojsfdjsdkfj\u00f6ldfj br / \n        list_size:$(list_size)\n     /Text !-- list_size:6 --  /SnomIPPhoneText", 
            "title": "list_size callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_math_eval/", 
            "text": "cb_math_eval callback\n #\n\n\n\n\nWarning\n\n\nCertain formulation can cause unexpected behaviour. As examples:\n\n division by zero\n\n division by negative number, example: \n48/-7\n\n\n using text or char except for callback for operand\n\n using another operator (\n, \n, \n=\n,etc)\n\n\n\n\n\n\nSupported operator is (\n+\n, \n-\n, *\n, \n/\n )\n\n\nArguments can't start and end with operator (\n+\n, \n-\n, *\n, \n/\n )\n\n\nTwo operator after another will create error\n\n\nPriority for operator is still working, which mean the multiplication and division will be executed first then addition and substraction\n\n\nParentheses (\n(\n, \n)\n) can't be used to change operator priority.\n\n\n\n\n\n\nInteger division method will be used for division.\n\n\nCallback can't received float number\n\n\n\n\n\n\n\n\n\n\nArgument\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n4\n\n\n4\n\n\n\n\n\n\n1+2\n\n\n3\n\n\n\n\n\n\n1-2\n\n\n-1\n\n\n\n\n\n\n$(max_pkeys)-$(max_registrations)\n\n\n0\n\n\n\n\n\n\n2*3\n\n\n6\n\n\n\n\n\n\n0*4\n\n\n0\n\n\n\n\n\n\n4/2\n\n\n2\n\n\n\n\n\n\n10/3\n\n\n3\n\n\n\n\n\n\n47/7\n\n\n6\n\n\n\n\n\n\n0/4\n\n\n0\n\n\n\n\n\n\n1+3*4\n\n\n13\n\n\n\n\n\n\n1-10/5\n\n\n-1\n\n\n\n\n\n\n109/10/4\n\n\n2", 
            "title": "math_eval"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_math_eval/#cb_math_eval_callback", 
            "text": "Warning  Certain formulation can cause unexpected behaviour. As examples:  division by zero  division by negative number, example:  48/-7   using text or char except for callback for operand  using another operator ( ,  ,  = ,etc)    Supported operator is ( + ,  - , * ,  /  )  Arguments can't start and end with operator ( + ,  - , * ,  /  )  Two operator after another will create error  Priority for operator is still working, which mean the multiplication and division will be executed first then addition and substraction  Parentheses ( ( ,  ) ) can't be used to change operator priority.    Integer division method will be used for division.  Callback can't received float number      Argument  Result      4  4    1+2  3    1-2  -1    $(max_pkeys)-$(max_registrations)  0    2*3  6    0*4  0    4/2  2    10/3  3    47/7  6    0/4  0    1+3*4  13    1-10/5  -1    109/10/4  2", 
            "title": "cb_math_eval callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_max_registrations/", 
            "text": "max_registrations callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nThis example shows the user displayname for each idenity.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nRepeat values=\n$(enum:$(max_registrations))\n token=\n|__number__|\n\n        \nMenuItem name=\nUSER __number__:$(user_displayname:__number__)\n/MenuItem\n\n    \n/Repeat\n\n\n/SnomIPPhoneMenu", 
            "title": "max_registrations"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_max_registrations/#max_registrations_callback", 
            "text": "Demo  Try on your phone   This example shows the user displayname for each idenity.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Repeat values= $(enum:$(max_registrations))  token= |__number__| \n         MenuItem name= USER __number__:$(user_displayname:__number__) /MenuItem \n     /Repeat  /SnomIPPhoneMenu", 
            "title": "max_registrations callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_max_pkeys/", 
            "text": "cb_max_pkeys callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow all label from programmable keys. Index to programmable keys setting starting from \n0\n not \n1\n.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        \nRepeat values=\n$(enum:$(max_pkeys))\n token=\n|__KEY__|\n\n            key$(math_eval:__KEY__-1):$(set:fkey_label $(math_eval:__KEY__-1))\nbr/\n\n        \n/Repeat\n\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "max_pkeys"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_max_pkeys/#cb_max_pkeys_callback", 
            "text": "Demo  Try on your phone   Show all label from programmable keys. Index to programmable keys setting starting from  0  not  1 .  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n         Repeat values= $(enum:$(max_pkeys))  token= |__KEY__| \n            key$(math_eval:__KEY__-1):$(set:fkey_label $(math_eval:__KEY__-1)) br/ \n         /Repeat \n     /Text  /SnomIPPhoneText", 
            "title": "cb_max_pkeys callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_mod_ifc/", 
            "text": "mod_ifc callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nSyntax: \nmod_ifc:mod_id:var_name\n\n\nCheck if 7xx expansion module exist in phone\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nIf condition=\n$(mod_ifc:7xxExp)\n\n        \nText\n7xx expansion module is exist\n/Text\n\n    \n/If\n\n    \nElse\n\n        \nText\n7xx expansion module is not exist\n/Text\n\n    \n/Else\n\n\n/SnomIPPhoneText", 
            "title": "mod_ifc"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_mod_ifc/#mod_ifc_callback", 
            "text": "Demo  Try on your phone   Syntax:  mod_ifc:mod_id:var_name  Check if 7xx expansion module exist in phone  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     If condition= $(mod_ifc:7xxExp) \n         Text 7xx expansion module is exist /Text \n     /If \n     Else \n         Text 7xx expansion module is not exist /Text \n     /Else  /SnomIPPhoneText", 
            "title": "mod_ifc callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_module_id_of_current_line/", 
            "text": "module_id_of_current_line callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturns the module-id of the current menu line. During parsing of an xml this is the menu-line currently being parsed/created. After Parsing this will return the module-id of the currently selected line in PUI.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu\n\n  \nRepeat value_key=\n$(contacts)\n token=\n|__NAME__|__CONTACTID__|__URL__|__PRESENCE__|__IMAGE__|__GROUP__|__SELECTED__|__DIAL_NR__|\n\n    \nMenuItem name=\n__NAME__\n id=\n__CONTACTID__\n sel=\n__SELECTED__\n on_selected=\nsnom://mb_nop#var_ifc:PUI='current_number=$[var_ifc:$(module_id_of_current_line)::nr2dial]'\n\n      \nItemData\n\n        \nVariable name=\nnr2dial\n value=\n__DIAL_NR__\n /\n\n      \n/ItemData\n\n      \nUrl track=\nyes\n__URL__\n/Url\n\n    \n/MenuItem\n\n  \n/Repeat\n\n\n/SnomIPPhoneMenu", 
            "title": "module_id_of_current_line"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_module_id_of_current_line/#module_id_of_current_line_callback", 
            "text": "Demo  Try on your phone   Returns the module-id of the current menu line. During parsing of an xml this is the menu-line currently being parsed/created. After Parsing this will return the module-id of the currently selected line in PUI.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu \n   Repeat value_key= $(contacts)  token= |__NAME__|__CONTACTID__|__URL__|__PRESENCE__|__IMAGE__|__GROUP__|__SELECTED__|__DIAL_NR__| \n     MenuItem name= __NAME__  id= __CONTACTID__  sel= __SELECTED__  on_selected= snom://mb_nop#var_ifc:PUI='current_number=$[var_ifc:$(module_id_of_current_line)::nr2dial]' \n       ItemData \n         Variable name= nr2dial  value= __DIAL_NR__  / \n       /ItemData \n       Url track= yes __URL__ /Url \n     /MenuItem \n   /Repeat  /SnomIPPhoneMenu", 
            "title": "module_id_of_current_line callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_on_off/", 
            "text": "on_off callback\n #\n\n\nReturns the localized string of an on/off for boolean value. Equivalent to $(lang:lang_on) for \nTrue\n and $(lang:lang_off) for \nFalse\n.", 
            "title": "on_off"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_on_off/#on_off_callback", 
            "text": "Returns the localized string of an on/off for boolean value. Equivalent to $(lang:lang_on) for  True  and $(lang:lang_off) for  False .", 
            "title": "on_off callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_phone_state/", 
            "text": "cb_phone_state callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturns the current phone's state.\nPrint the current phone state. Because it always to called in Minibrowser, the \"Minibrowser\" will be returned as result.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\nstate:$(phone_state)\n/Text\n!-- Minibrowser --\n\n\n/SnomIPPhoneText", 
            "title": "phone_state"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_phone_state/#cb_phone_state_callback", 
            "text": "Demo  Try on your phone   Returns the current phone's state.\nPrint the current phone state. Because it always to called in Minibrowser, the \"Minibrowser\" will be returned as result.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text state:$(phone_state) /Text !-- Minibrowser --  /SnomIPPhoneText", 
            "title": "cb_phone_state callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_remove_cmd/", 
            "text": "remove_cmd callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nExample: only \ntest\n will be written in every line after colon. The command and the content only separated by space.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        auto_answer:$(remove_cmd:auto_answer test)\nbr/\n\n        blf:$(remove_cmd:blf test)\nbr/\n\n        bossadmin:$(remove_cmd:bossadmin test)\nbr/\n\n        button:$(remove_cmd:button test)\nbr/\n\n        call_agent:$(remove_cmd:call_agent test)\nbr/\n\n        conference:$(remove_cmd:conference test)\nbr/\n\n        dtmf:$(remove_cmd:dtmf test)\nbr/\n\n        ivr:$(remove_cmd:ivr test)\nbr/\n\n        keyevent:$(remove_cmd:keyevent test)\nbr/\n\n        line:$(remove_cmd:line test)\nbr/\n\n        mult:$(remove_cmd:mult test)\nbr/\n\n        multicast:$(remove_cmd:multicast test)\nbr/\n\n        none:$(remove_cmd:none test)\nbr/\n\n        p2t:$(remove_cmd:p2t test)\nbr/\n\n        presence:$(remove_cmd:presence test)\nbr/\n\n        recorder:$(remove_cmd:recorder test)\nbr/\n\n        redirect:$(remove_cmd:redirect test)\nbr/\n\n        speed:$(remove_cmd:speed test)\nbr/\n\n        transfer:$(remove_cmd:transfer test)\nbr/\n\n        url:$(remove_cmd:url test)\nbr/\n\n\n/Text\n\n\n/SnomIPPhoneText", 
            "title": "remove_cmd"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_remove_cmd/#remove_cmd_callback", 
            "text": "Demo  Try on your phone   Example: only  test  will be written in every line after colon. The command and the content only separated by space.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n        auto_answer:$(remove_cmd:auto_answer test) br/ \n        blf:$(remove_cmd:blf test) br/ \n        bossadmin:$(remove_cmd:bossadmin test) br/ \n        button:$(remove_cmd:button test) br/ \n        call_agent:$(remove_cmd:call_agent test) br/ \n        conference:$(remove_cmd:conference test) br/ \n        dtmf:$(remove_cmd:dtmf test) br/ \n        ivr:$(remove_cmd:ivr test) br/ \n        keyevent:$(remove_cmd:keyevent test) br/ \n        line:$(remove_cmd:line test) br/ \n        mult:$(remove_cmd:mult test) br/ \n        multicast:$(remove_cmd:multicast test) br/ \n        none:$(remove_cmd:none test) br/ \n        p2t:$(remove_cmd:p2t test) br/ \n        presence:$(remove_cmd:presence test) br/ \n        recorder:$(remove_cmd:recorder test) br/ \n        redirect:$(remove_cmd:redirect test) br/ \n        speed:$(remove_cmd:speed test) br/ \n        transfer:$(remove_cmd:transfer test) br/ \n        url:$(remove_cmd:url test) br/  /Text  /SnomIPPhoneText", 
            "title": "remove_cmd callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_set/", 
            "text": "set callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturns the string of a setting. For valid argument see Settings documentaion or phone settings.htm\n\n\nShow phone mac address, ip address and netmask. It is recommended to use square bracket for index on argument. It is different with the same square bracket used as callback place holder.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nmac:$(set:mac)\n/\n!-- 00045467654C --\n\n    \nMenuItem name=\nip_adr:$(set:ip_adr)\n/\n!-- 10.112.11.64 --\n\n    \nMenuItem name=\nnetmask:$(set:netmask)\n/\n!-- 255.255.255.0 --\n\n    \n!-- recommendation on square bracket as settings index --\n\n    \nMenuItem name=\nfkey_label0:$(set:fkey_label[0])\n/\n!-- Key 0 label --\n\n\n/SnomIPPhoneMenu", 
            "title": "set"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_set/#set_callback", 
            "text": "Demo  Try on your phone   Returns the string of a setting. For valid argument see Settings documentaion or phone settings.htm  Show phone mac address, ip address and netmask. It is recommended to use square bracket for index on argument. It is different with the same square bracket used as callback place holder.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= mac:$(set:mac) / !-- 00045467654C -- \n     MenuItem name= ip_adr:$(set:ip_adr) / !-- 10.112.11.64 -- \n     MenuItem name= netmask:$(set:netmask) / !-- 255.255.255.0 -- \n     !-- recommendation on square bracket as settings index -- \n     MenuItem name= fkey_label0:$(set:fkey_label[0]) / !-- Key 0 label --  /SnomIPPhoneMenu", 
            "title": "set callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_setcache/", 
            "text": "setcache callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nExample:\n Holding the new setting until the \nflush\n fragment is called. At the \nSnomIPPhoneText\n with \npage1\n id, the \nsetcache\n callback value for \nfkey_label0\n setting is shown \nweather\n. While it is recommended to using the square bracket on setting with array format, please avoid using that here.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneText id=\npage0\n\n    \n!-- setcache callback not working, but setcache fragment and flush are working --\n\n        \nTitle\npage 0\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_setcache.xml#sub=*[@id=\npage1\n]\namp;setcache:fkey_label0=weather\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue to setcache\n/Text\n\n    \n/SnomIPPhoneText\n\n    \n!-- set: old value --\n\n    \nSnomIPPhoneText id=\npage1\n\n        \nTitle\npage 1\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_setcache.xml#sub=*[@id=\npage2\n]\namp;flush\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue flush\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage2\n\n        \nTitle\npage 2\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_setcache.xml#sub=*[@id=\npage3\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage3\n\n        \nTitle\npage 3\n/Title\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch", 
            "title": "setcache"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_setcache/#setcache_callback", 
            "text": "Demo  Try on your phone   Example:  Holding the new setting until the  flush  fragment is called. At the  SnomIPPhoneText  with  page1  id, the  setcache  callback value for  fkey_label0  setting is shown  weather . While it is recommended to using the square bracket on setting with array format, please avoid using that here.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneText id= page0 \n     !-- setcache callback not working, but setcache fragment and flush are working -- \n         Title page 0 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_setcache.xml#sub=*[@id= page1 ] amp;setcache:fkey_label0=weather /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue to setcache /Text \n     /SnomIPPhoneText \n     !-- set: old value -- \n     SnomIPPhoneText id= page1 \n         Title page 1 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_setcache.xml#sub=*[@id= page2 ] amp;flush /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue flush /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page2 \n         Title page 2 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_setcache.xml#sub=*[@id= page3 ] /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page3 \n         Title page 3 /Title \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch", 
            "title": "setcache callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_show_feature/", 
            "text": "cb_show_feature callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturn \ntrue\n or \nfalse\n depend if feature is activated or exist. Valid argument (without quotes) : \nFEATURE_BOSS_ADMIN\n or \nFEATURE_PARK_ORBIT\n.\n\n\nExample code: Show if boss admin and park orbit feature are active\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        $(x_o:$(show_feature:FEATURE_BOSS_ADMIN))boss admin feature\nbr/\n\n        $(x_o:$(show_feature:FEATURE_PARK_ORBIT))park orbit feature\nbr/\n\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "cb_show_feature"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_show_feature/#cb_show_feature_callback", 
            "text": "Demo  Try on your phone   Return  true  or  false  depend if feature is activated or exist. Valid argument (without quotes) :  FEATURE_BOSS_ADMIN  or  FEATURE_PARK_ORBIT .  Example code: Show if boss admin and park orbit feature are active  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n        $(x_o:$(show_feature:FEATURE_BOSS_ADMIN))boss admin feature br/ \n        $(x_o:$(show_feature:FEATURE_PARK_ORBIT))park orbit feature br/ \n     /Text  /SnomIPPhoneText", 
            "title": "cb_show_feature callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_status_message/", 
            "text": "cb_status_message callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nPrint available status message\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nCODE:STATUS\n/MenuItem\n\n    \nRepeat values=\n$(status_message)\n token=\n|__X__|__Y__|\n\n    \nMenuItem name=\n__Y__:__X__\n/MenuItem\n\n    \n/Repeat\n\n    \n!--\n        some possible result:\n        32:*Admin Password not set!\n        31:*HTTP Password not set!\n    --\n\n\n/SnomIPPhoneMenu", 
            "title": "status_message"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_status_message/#cb_status_message_callback", 
            "text": "Demo  Try on your phone   Print available status message  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= CODE:STATUS /MenuItem \n     Repeat values= $(status_message)  token= |__X__|__Y__| \n     MenuItem name= __Y__:__X__ /MenuItem \n     /Repeat \n     !--\n        some possible result:\n        32:*Admin Password not set!\n        31:*HTTP Password not set!\n    --  /SnomIPPhoneMenu", 
            "title": "cb_status_message callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_urlencode/", 
            "text": "cb_urlencode callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nURL encode \nabc.com/a b\n text .See \npercent-encoding\n for more info\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\nDemo\n/Title\n\n    \nText\n\n        $(urlencode:abc.com/a b)\n    \n/Text\n\n\n!-- \n $(urlencode:abc.com/a b) -\n abc.com%2fa%20b\nurl-decoded (without quotes): 'abc.com/a b'\n --\n\n\n/SnomIPPhoneText", 
            "title": "urlencode"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_urlencode/#cb_urlencode_callback", 
            "text": "Demo  Try on your phone   URL encode  abc.com/a b  text .See  percent-encoding  for more info  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title Demo /Title \n     Text \n        $(urlencode:abc.com/a b)\n     /Text  !-- \n $(urlencode:abc.com/a b) -  abc.com%2fa%20b\nurl-decoded (without quotes): 'abc.com/a b'\n --  /SnomIPPhoneText", 
            "title": "cb_urlencode callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_user_displayname/", 
            "text": "user_displayname callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturns the displayname of given identity. Valid argument are number from 1 to 4 or 1 to 12 depending on your snom telephone max user registration\n\n\n\n\nInfo\n\n\n\n\nIf no argument given, callback will return nothing.\n\n\nIf user_idle_text_idx is set, that value will be returned instead of user_realname_idx\n\n\nSee also \nmax_registrations\n example for better implementation of this example\n\n\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\nuser_displayname test\n/Title\n\n    \nText\n\n0 : $(user_displayname)\nbr/\n\n1 : $(user_displayname:1)\nbr/\n\n2 : $(user_displayname:2)\nbr/\n\n3 : $(user_displayname:3)\nbr/\n\n4 : $(user_displayname:4)\nbr/\n\n5 : $(user_displayname:5)\nbr/\n\n6 : $(user_displayname:6)\nbr/\n\n7 : $(user_displayname:7)\nbr/\n\n8 : $(user_displayname:8)\nbr/\n\n9 : $(user_displayname:9)\nbr/\n\n10 : $(user_displayname:10)\nbr/\n\n11 : $(user_displayname:11)\nbr/\n\n12 : $(user_displayname:12)\nbr/\n\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "user_displayname"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_user_displayname/#user_displayname_callback", 
            "text": "Demo  Try on your phone   Returns the displayname of given identity. Valid argument are number from 1 to 4 or 1 to 12 depending on your snom telephone max user registration   Info   If no argument given, callback will return nothing.  If user_idle_text_idx is set, that value will be returned instead of user_realname_idx  See also  max_registrations  example for better implementation of this example    ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title user_displayname test /Title \n     Text \n0 : $(user_displayname) br/ \n1 : $(user_displayname:1) br/ \n2 : $(user_displayname:2) br/ \n3 : $(user_displayname:3) br/ \n4 : $(user_displayname:4) br/ \n5 : $(user_displayname:5) br/ \n6 : $(user_displayname:6) br/ \n7 : $(user_displayname:7) br/ \n8 : $(user_displayname:8) br/ \n9 : $(user_displayname:9) br/ \n10 : $(user_displayname:10) br/ \n11 : $(user_displayname:11) br/ \n12 : $(user_displayname:12) br/ \n     /Text  /SnomIPPhoneText", 
            "title": "user_displayname callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_var/", 
            "text": "var callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nShow the variable \nfirst_page\n on before and after a value assigned to it. Value of the callback will only be lasted until the minibrowser closed\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneText id=\npage0\n\n        \nTitle\npage 0\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id=\npage1\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n            \nbr /\n\n            prees * to continue\n        \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage1\n\n        \nTitle\npage 1\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id=\npage2\n]\namp;var:first_page=$(urlencode:hello world)\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var_first_page = hello_world\n            \nbr /\n\n            prees * to continue\n        \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage2\n\n        \nTitle\npage 2\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id=\npage3\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n        \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage3\n\n        \nTitle\npage 3\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id=\npage0\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n        \n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch", 
            "title": "var"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_var/#var_callback", 
            "text": "Demo  Try on your phone   Show the variable  first_page  on before and after a value assigned to it. Value of the callback will only be lasted until the minibrowser closed  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneText id= page0 \n         Title page 0 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id= page1 ] /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n             br / \n            prees * to continue\n         /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page1 \n         Title page 1 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id= page2 ] amp;var:first_page=$(urlencode:hello world) /Url \n         /SoftKeyItem \n         Text \n            var_first_page = hello_world\n             br / \n            prees * to continue\n         /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page2 \n         Title page 2 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id= page3 ] /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n         /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page3 \n         Title page 3 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/cb_var.xml#sub=*[@id= page0 ] /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n         /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch", 
            "title": "var callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_var_ifc/", 
            "text": "cb_var_ifc callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nAsk the value of a variable from telephone modules. This is the callback version of the attribute of the same name here\n\n\nSyntax:\n\n\nvar_ifc:mod_id::var_name\n\n\n\n\nPrint all variable from language module. This example was done when phone is in english PUI language.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        state:$(var_ifc:lang.pui.ENGLISH::state)\n        \nbr /\n\n        name:$(var_ifc:lang.pui.ENGLISH::name)\n        \nbr /\n\n        file_name:$(var_ifc:lang.pui.ENGLISH::file_name)\n    \n/Text\n\n\n!--\nstate:active\nname:English\nfile_name:/snom/snomlang/gui_lang_EN.XML\n--\n\n\n/SnomIPPhoneText", 
            "title": "cb_var_ifc"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_var_ifc/#cb_var_ifc_callback", 
            "text": "Demo  Try on your phone   Ask the value of a variable from telephone modules. This is the callback version of the attribute of the same name here  Syntax:  var_ifc:mod_id::var_name  Print all variable from language module. This example was done when phone is in english PUI language.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n        state:$(var_ifc:lang.pui.ENGLISH::state)\n         br / \n        name:$(var_ifc:lang.pui.ENGLISH::name)\n         br / \n        file_name:$(var_ifc:lang.pui.ENGLISH::file_name)\n     /Text  !--\nstate:active\nname:English\nfile_name:/snom/snomlang/gui_lang_EN.XML\n--  /SnomIPPhoneText", 
            "title": "cb_var_ifc callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_wifiscan/", 
            "text": "cb_wifiscan callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nScans for available WIFI SSIDs and returns them as a list for use in a \nRepeat\n Tag.\n\n\nList all available wifi and its token\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        \nRepeat token=\n/__SSID__/__QUAL__/__AUTH__/__ENC__/\n values=\n$(wifiscan)\n\nSSID:__SSID__\nbr/\n\nQuality:__QUAL__\nbr/\n\nAuthentication:__AUTH__\nbr/\n\nEncryption:__ENC__\nbr/\n\n================== \nbr/\n\n        \n/Repeat\n\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "cb_wifiscan"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_wifiscan/#cb_wifiscan_callback", 
            "text": "Demo  Try on your phone   Scans for available WIFI SSIDs and returns them as a list for use in a  Repeat  Tag.  List all available wifi and its token  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n         Repeat token= /__SSID__/__QUAL__/__AUTH__/__ENC__/  values= $(wifiscan) \nSSID:__SSID__ br/ \nQuality:__QUAL__ br/ \nAuthentication:__AUTH__ br/ \nEncryption:__ENC__ br/ \n==================  br/ \n         /Repeat \n     /Text  /SnomIPPhoneText", 
            "title": "cb_wifiscan callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_wlang/", 
            "text": "wlang callback\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReturns the localized web string for a given language key.\n\n\nSome valid key and the result from two different WUI language. The result may change if you use customized language or there is an update to language file. To change WUI language go to \nhttp://phone_ip/prefs.htm\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \n!-- Deutsch --\n!-- English --\n\n    \n!-- DE --\nMenuItem name=\n$(wlang:wlang_iso_code)\n/MenuItem\n!-- EN --\n\n    \n!-- Deutsch --\nMenuItem name=\n$(wlang:wlang_web_language_name)\n/MenuItem\n!-- English --\n\n    \n!-- Keine --\nMenuItem name=\n$(wlang:wlang_adr_ctnone)\n/MenuItem\n!-- None --\n\n\n/SnomIPPhoneMenu", 
            "title": "cb_wlang"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_wlang/#wlang_callback", 
            "text": "Demo  Try on your phone   Returns the localized web string for a given language key.  Some valid key and the result from two different WUI language. The result may change if you use customized language or there is an update to language file. To change WUI language go to  http://phone_ip/prefs.htm  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     !-- Deutsch -- !-- English -- \n     !-- DE -- MenuItem name= $(wlang:wlang_iso_code) /MenuItem !-- EN -- \n     !-- Deutsch -- MenuItem name= $(wlang:wlang_web_language_name) /MenuItem !-- English -- \n     !-- Keine -- MenuItem name= $(wlang:wlang_adr_ctnone) /MenuItem !-- None --  /SnomIPPhoneMenu", 
            "title": "wlang callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_x_o/", 
            "text": "x_o callback\n #\n\n\nReturns checked or unchecked character for boolean value\n\n\n\n\nInfo\n\n\nSee also \nCallbacks with boolean type argument", 
            "title": "x_o"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_x_o/#x_o_callback", 
            "text": "Returns checked or unchecked character for boolean value   Info  See also  Callbacks with boolean type argument", 
            "title": "x_o callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_yes_no/", 
            "text": "yes_no callback\n #\n\n\nReturns the localized string of an yes/no for boolean value. Equivalent to \n$(lang:lang_yes)\n for \nTrue\n and \n$(lang:lang_no)\n for \nFalse\n.\n\n\n\n\nInfo\n\n\nSee also \nCallbacks with boolean type argument", 
            "title": "yes_no"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_yes_no/#yes_no_callback", 
            "text": "Returns the localized string of an yes/no for boolean value. Equivalent to  $(lang:lang_yes)  for  True  and  $(lang:lang_no)  for  False .   Info  See also  Callbacks with boolean type argument", 
            "title": "yes_no callback"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_boolean_callbacks/", 
            "text": "callbacks with boolean type argument\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nThese include following callbacks:\n\n\n\n\nbool_eval\n\n\non_off\n\n\nx_o\n\n\nyes_no\n\n\n\n\n\n\nInfo\n\n\n\n\nIf you want to use your own language as argument in XML file, check also if the phone, which is parsing the file, is in correct PUI language.\n\n\nPlease write \n0\n or \nfalse\n if you want to ensure to get \nfalse\n result from the callback instead of writing empty argument or not writing it at all.\n\n\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nText\n\n        == condition ==\n        \nbr /\n\n        true:$(condition:a==a)\n        \nbr /\n\n        false:$(condition:a!=a)\n        \nbr /\n\n        \nRepeat values=\n|bool_eval|on_off|yes_no|x_o|\n token=\n|__cb_name__|\n\n            == __cb_name__ ==\n            \nbr /\n\n            true:$(__cb_name__:$(condition:a==a))\n            \nbr /\n\n            false:$(__cb_name__:$(condition:a!=a))\n            \nbr /\n\n        \n/Repeat\n\n        \nbr /\n\n        \nRepeat values=\n|bool_eval|on_off|yes_no|x_o|\n token=\n|__cb_name__|\n\n            == __cb_name__:no_keys ==\n            \nbr /\n\n            true:$(__cb_name__)\n            \nbr /\n\n            false:$(__cb_name__)\n            \nbr /\n\n        \n/Repeat\n\n        \nRepeat values=\n|bool_eval|on_off|yes_no|x_o|\n token=\n|__cb_name__|\n\n            == __cb_name__:empty_keys ==\n            \nbr /\n\n            true:$(__cb_name__:)\n            \nbr /\n\n            false:$(__cb_name__:)\n            \nbr /\n\n        \n/Repeat\n\n        \nRepeat values=\n|bool_eval|on_off|yes_no|x_o|\n token=\n|__cb_name__|\n\n            == __cb_name__:true_false ==\n            \nbr /\n\n            true:$(__cb_name__:true)\n            \nbr /\n\n            false:$(__cb_name__:false)\n            \nbr /\n\n        \n/Repeat\n\n        \nRepeat values=\n|bool_eval|on_off|yes_no|x_o|\n token=\n|__cb_name__|\n\n            == __cb_name__:1_0 ==\n            \nbr /\n\n            true:$(__cb_name__:1)\n            \nbr /\n\n            false:$(__cb_name__:0)\n            \nbr /\n\n        \n/Repeat\n\n        \nRepeat values=\n|bool_eval|on_off|yes_no|x_o|\n token=\n|__cb_name__|\n\n            == __cb_name__:Ja_Nein ==\n            \nbr /\n\n            true:$(__cb_name__:Ja)\n            \nbr /\n\n            false:$(__cb_name__:Nein)\n            \nbr /\n\n        \n/Repeat\n\n    \n/Text\n\n\n/SnomIPPhoneText", 
            "title": "boolean callbacks"
        }, 
        {
            "location": "/xml_minibrowser/examples/cb_boolean_callbacks/#callbacks_with_boolean_type_argument", 
            "text": "Demo  Try on your phone   These include following callbacks:   bool_eval  on_off  x_o  yes_no    Info   If you want to use your own language as argument in XML file, check also if the phone, which is parsing the file, is in correct PUI language.  Please write  0  or  false  if you want to ensure to get  false  result from the callback instead of writing empty argument or not writing it at all.    ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Text \n        == condition ==\n         br / \n        true:$(condition:a==a)\n         br / \n        false:$(condition:a!=a)\n         br / \n         Repeat values= |bool_eval|on_off|yes_no|x_o|  token= |__cb_name__| \n            == __cb_name__ ==\n             br / \n            true:$(__cb_name__:$(condition:a==a))\n             br / \n            false:$(__cb_name__:$(condition:a!=a))\n             br / \n         /Repeat \n         br / \n         Repeat values= |bool_eval|on_off|yes_no|x_o|  token= |__cb_name__| \n            == __cb_name__:no_keys ==\n             br / \n            true:$(__cb_name__)\n             br / \n            false:$(__cb_name__)\n             br / \n         /Repeat \n         Repeat values= |bool_eval|on_off|yes_no|x_o|  token= |__cb_name__| \n            == __cb_name__:empty_keys ==\n             br / \n            true:$(__cb_name__:)\n             br / \n            false:$(__cb_name__:)\n             br / \n         /Repeat \n         Repeat values= |bool_eval|on_off|yes_no|x_o|  token= |__cb_name__| \n            == __cb_name__:true_false ==\n             br / \n            true:$(__cb_name__:true)\n             br / \n            false:$(__cb_name__:false)\n             br / \n         /Repeat \n         Repeat values= |bool_eval|on_off|yes_no|x_o|  token= |__cb_name__| \n            == __cb_name__:1_0 ==\n             br / \n            true:$(__cb_name__:1)\n             br / \n            false:$(__cb_name__:0)\n             br / \n         /Repeat \n         Repeat values= |bool_eval|on_off|yes_no|x_o|  token= |__cb_name__| \n            == __cb_name__:Ja_Nein ==\n             br / \n            true:$(__cb_name__:Ja)\n             br / \n            false:$(__cb_name__:Nein)\n             br / \n         /Repeat \n     /Text  /SnomIPPhoneText", 
            "title": "callbacks with boolean type argument"
        }, 
        {
            "location": "/xml_minibrowser/fragments/", 
            "text": "Snom Minibrowser Fragments\n #\n\n\nThe minibrowser can be controlled with URI fragment commands that are appended to any URL.\n\n\n\n\nWarning\n\n\nThe following fragments can only be used by trusted host    \n\n\n\n\nsetcache\n\n\nclearcache\n\n\nflush\n\n\nnext_edit_mode\n\n\nreloadset\n\n\nset\n\n\ntoggleset\n\n\naction_ifc\n\n\nvar_ifc\n\n\n\n\nTrusted hosts are managed by the setting \nmb_trusted_host\n. \nIt is required to set this option for some fragments. This setting is only require IP Address or hostname without schema and port\n.\n\n\n\n\nList of available fragments\n #\n\n\n\n\n\n\n\n\nFragment Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetcache\n\n\nCache a setting value\n\n\n\n\n\n\nclearcache\n\n\nClear setting value cache\n\n\n\n\n\n\nclearvar\n\n\nClear all variables\n\n\n\n\n\n\nmenu\n\n\nGet the menu link\n\n\n\n\n\n\nnext_edit_mode\n\n\nSwitch to the next edit mode of the system\n\n\n\n\n\n\nsel\n\n\nPreselect an entry of a list\n\n\n\n\n\n\nreloadset\n\n\nReload the settings\n\n\n\n\n\n\nset\n\n\nSet a setting\n\n\n\n\n\n\nsub\n\n\nA fragment to jump between main element within \nSnomIPPhoneBatch\n\n\n\n\n\n\ntoggleset\n\n\nToggle a boolean setting\n\n\n\n\n\n\nvar\n\n\nSets a variable\n\n\n\n\n\n\naction_ifc\n\n\nPerform an action via a module\n\n\n\n\n\n\napplyline\n\n\nReregister a identity\n\n\n\n\n\n\nkey\n\n\nFires the given key\n\n\n\n\n\n\nnumberdial\n\n\nDials a number\n\n\n\n\n\n\nreboot\n\n\nReboot or reset the phone\n\n\n\n\n\n\nreregister\n\n\nReregister an identity\n\n\n\n\n\n\nunregister\n\n\nUnregister a phone identity\n\n\n\n\n\n\nvar_ifc\n\n\nSet a module variable\n\n\n\n\n\n\nmjpg\n\n\nStart a Motion Jpeg video", 
            "title": "Introduction"
        }, 
        {
            "location": "/xml_minibrowser/fragments/#snom_minibrowser_fragments", 
            "text": "The minibrowser can be controlled with URI fragment commands that are appended to any URL.   Warning  The following fragments can only be used by trusted host       setcache  clearcache  flush  next_edit_mode  reloadset  set  toggleset  action_ifc  var_ifc   Trusted hosts are managed by the setting  mb_trusted_host .  It is required to set this option for some fragments. This setting is only require IP Address or hostname without schema and port .", 
            "title": "Snom Minibrowser Fragments"
        }, 
        {
            "location": "/xml_minibrowser/fragments/#list_of_available_fragments", 
            "text": "Fragment Name  Description      setcache  Cache a setting value    clearcache  Clear setting value cache    clearvar  Clear all variables    menu  Get the menu link    next_edit_mode  Switch to the next edit mode of the system    sel  Preselect an entry of a list    reloadset  Reload the settings    set  Set a setting    sub  A fragment to jump between main element within  SnomIPPhoneBatch    toggleset  Toggle a boolean setting    var  Sets a variable    action_ifc  Perform an action via a module    applyline  Reregister a identity    key  Fires the given key    numberdial  Dials a number    reboot  Reboot or reset the phone    reregister  Reregister an identity    unregister  Unregister a phone identity    var_ifc  Set a module variable    mjpg  Start a Motion Jpeg video", 
            "title": "List of available fragments"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_setcache/", 
            "text": "setcache fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nInfo\n\n\nThis example is for \nsetcache\n and \nflush\n fragment.\n\n\n\n\nUsing \nsetcache\n fragment to hold new settings input until \nflush\n fragment is called. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example. While it is recommended to using the square bracket on setting with array format, please avoid using that here.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneText id=\npage0\n\n        \nTitle\npage 0\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_setcache.xml#sub=*[@id=\npage1\n]\namp;setcache:fkey_label0=weather\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue to setcache\n/Text\n\n    \n/SnomIPPhoneText\n\n    \n!-- set: old value --\n\n    \nSnomIPPhoneText id=\npage1\n\n        \nTitle\npage 1\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_setcache.xml#sub=*[@id=\npage2\n]\namp;flush\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue flush\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage2\n\n        \nTitle\npage 2\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_setcache.xml#sub=*[@id=\npage3\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage3\n\n        \nTitle\npage 3\n/Title\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch", 
            "title": "setcache"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_setcache/#setcache_fragment", 
            "text": "Demo  Try on your phone    Info  This example is for  setcache  and  flush  fragment.   Using  setcache  fragment to hold new settings input until  flush  fragment is called. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example. While it is recommended to using the square bracket on setting with array format, please avoid using that here.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneText id= page0 \n         Title page 0 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_setcache.xml#sub=*[@id= page1 ] amp;setcache:fkey_label0=weather /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue to setcache /Text \n     /SnomIPPhoneText \n     !-- set: old value -- \n     SnomIPPhoneText id= page1 \n         Title page 1 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_setcache.xml#sub=*[@id= page2 ] amp;flush /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue flush /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page2 \n         Title page 2 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_setcache.xml#sub=*[@id= page3 ] /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page3 \n         Title page 3 /Title \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch", 
            "title": "setcache fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_clearcache/", 
            "text": "clearcache fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nClear cache before flushing the cache. This is modified \nsetcache\n fragment example.\nAt the end of this example the \nfkey_label0\n setting is not changed unlike the result at \nsetcache\n fragment example. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneText id=\npage0\n\n    \n!-- setcache callback not working, but setcache fragment and flush are working --\n\n        \nTitle\npage 0\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearcache.xml#sub=*[@id=\npage1\n]\namp;setcache:fkey_label[0]=weather\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue to setcache\n/Text\n\n    \n/SnomIPPhoneText\n\n    \n!-- set: old value --\n\n    \nSnomIPPhoneText id=\npage1\n\n        \nTitle\npage 1\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearcache.xml#sub=*[@id=\npage2\n]\namp;clearcache\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue clear cache\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage2\n\n        \nTitle\npage 2\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearcache.xml#sub=*[@id=\npage3\n]\namp;flush\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\nbr/\n\n            prees * to continue flush\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage3\n\n        \nTitle\npage 3\n/Title\n\n        \nText\nset:fkey_label0:$(set:fkey_label0)\nbr /\n\n            setcache:fkey_label0:$(setcache:fkey_label0)\n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch", 
            "title": "clearcache"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_clearcache/#clearcache_fragment", 
            "text": "Demo  Try on your phone   Clear cache before flushing the cache. This is modified  setcache  fragment example.\nAt the end of this example the  fkey_label0  setting is not changed unlike the result at  setcache  fragment example. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneText id= page0 \n     !-- setcache callback not working, but setcache fragment and flush are working -- \n         Title page 0 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearcache.xml#sub=*[@id= page1 ] amp;setcache:fkey_label[0]=weather /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue to setcache /Text \n     /SnomIPPhoneText \n     !-- set: old value -- \n     SnomIPPhoneText id= page1 \n         Title page 1 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearcache.xml#sub=*[@id= page2 ] amp;clearcache /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue clear cache /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page2 \n         Title page 2 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearcache.xml#sub=*[@id= page3 ] amp;flush /Url \n         /SoftKeyItem \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) br/ \n            prees * to continue flush /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page3 \n         Title page 3 /Title \n         Text set:fkey_label0:$(set:fkey_label0) br / \n            setcache:fkey_label0:$(setcache:fkey_label0) /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch", 
            "title": "clearcache fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_clearvar/", 
            "text": "clearvar fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nClear variable on transition from page3 to page0 \nSnomIPPhoneText\n.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneText id=\npage0\n\n        \nTitle\npage 0\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id=\npage1\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n            \nbr /\n\n            prees * to continue\n        \n/Text\n!-- here variable always empty  --\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage1\n\n        \nTitle\npage 1\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id=\npage2\n]\namp;var:first_page=$(urlencode:hello world)\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n            \nbr /\n\n            prees * to continue set var_first_page = hello_world\n        \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage2\n\n        \nTitle\npage 2\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id=\npage3\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n            \nbr /\n\n            prees * to continue \n        \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage3\n\n        \nTitle\npage 3\n/Title\n\n        \nSoftKeyItem\n\n            \nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id=\npage0\n]\namp;clearvar\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\n\n            var:first_page: $(var:first_page)\n            \nbr /\n\n            prees * to continue clearvar\n        \n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch", 
            "title": "clearvar"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_clearvar/#clearvar_fragment", 
            "text": "Demo  Try on your phone   Clear variable on transition from page3 to page0  SnomIPPhoneText .  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneText id= page0 \n         Title page 0 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id= page1 ] /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n             br / \n            prees * to continue\n         /Text !-- here variable always empty  -- \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page1 \n         Title page 1 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id= page2 ] amp;var:first_page=$(urlencode:hello world) /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n             br / \n            prees * to continue set var_first_page = hello_world\n         /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page2 \n         Title page 2 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id= page3 ] /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n             br / \n            prees * to continue \n         /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page3 \n         Title page 3 /Title \n         SoftKeyItem \n             Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_clearvar.xml#sub=*[@id= page0 ] amp;clearvar /Url \n         /SoftKeyItem \n         Text \n            var:first_page: $(var:first_page)\n             br / \n            prees * to continue clearvar\n         /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch", 
            "title": "clearvar fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_menu/", 
            "text": "menu fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nThis example using \nmenu\n fragment to jump directly to \nMenu\n in third layer and show 3 \nMenuItem\n. Just select the \nMenuItem\n in first layer and this will bring the minibrowser to the said menu.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nm1\n id=\nm1\n\n        \nMenu name=\nl2m1\n id=\nl2m1\n\n            \nMenu name=\nl3m1\n id=\nl3m1\n\n                \nMenuItem name=\nl3m1mi1\n id=\nl3m1mi1\n/MenuItem\n\n                \nMenuItem name=\nl3m1mi2\n id=\nl3m1mi2\n/MenuItem\n\n                \nMenuItem name=\nl3m1mi3\n id=\nl3m1mi3\n/MenuItem\n\n            \n/Menu\n\n        \n/Menu\n\n    \n/Menu\n\n    \nMenuItem name=\ngo to l3mi3\n\n        \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_menu.xml#menu=/SnomIPPhoneMenu/*[@id=\nm1\n]/*[@id=\nl2m1\n]/*[@id=\nl3m1\n]\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "menu"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_menu/#menu_fragment", 
            "text": "Demo  Try on your phone   This example using  menu  fragment to jump directly to  Menu  in third layer and show 3  MenuItem . Just select the  MenuItem  in first layer and this will bring the minibrowser to the said menu.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= m1  id= m1 \n         Menu name= l2m1  id= l2m1 \n             Menu name= l3m1  id= l3m1 \n                 MenuItem name= l3m1mi1  id= l3m1mi1 /MenuItem \n                 MenuItem name= l3m1mi2  id= l3m1mi2 /MenuItem \n                 MenuItem name= l3m1mi3  id= l3m1mi3 /MenuItem \n             /Menu \n         /Menu \n     /Menu \n     MenuItem name= go to l3mi3 \n         Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_menu.xml#menu=/SnomIPPhoneMenu/*[@id= m1 ]/*[@id= l2m1 ]/*[@id= l3m1 ] /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "menu fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_next_edit_mode/", 
            "text": "next_edit_mode fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nChange the edit mode on \nInputField\n.\nJust select the first menu and see the value from \nedit_mode\n and \nnext_edit_mode\n callback and also the input mode (lower-case, upper-case and number) change when pressing \nF1\n.\nDon't forget to add the IP address or hostname as minibrowser trusted host, when running this example\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nem:$(edit_mode);nem:$(next_edit_mode)\n speedselect=\noff\n\n        \nInputField\n\n            \nHandler event=\nkeypress\nfile:///xml/text.xml#var:text=$[current_input]\n/Handler\n\n            \nHandler event=\ntimeout\nfile:///xml/text.xml#var:text=TIMEOUT:$[current_input]\n/Handler\n\n            \nKey\nENTER\n/Key\n\n            \nTimeout\n3000\n/Timeout\n\n            \nMinimum\n3\n/Minimum\n\n            \nPrompt\nInput:\n/Prompt\n\n        \n/InputField\n\n        \nSoftKeyItem\n\n            \nName\nF1\n/Name\n\n            \nLabel\nNext mode\n/Label\n\n            \nUrl\nsnom://mb_nop#next_edit_mode\n/Url\n\n        \n/SoftKeyItem\n\n    \n/Menu\n\n\n/SnomIPPhoneMenu", 
            "title": "fr_next_edit_mode"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_next_edit_mode/#next_edit_mode_fragment", 
            "text": "Demo  Try on your phone   Change the edit mode on  InputField .\nJust select the first menu and see the value from  edit_mode  and  next_edit_mode  callback and also the input mode (lower-case, upper-case and number) change when pressing  F1 .\nDon't forget to add the IP address or hostname as minibrowser trusted host, when running this example  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= em:$(edit_mode);nem:$(next_edit_mode)  speedselect= off \n         InputField \n             Handler event= keypress file:///xml/text.xml#var:text=$[current_input] /Handler \n             Handler event= timeout file:///xml/text.xml#var:text=TIMEOUT:$[current_input] /Handler \n             Key ENTER /Key \n             Timeout 3000 /Timeout \n             Minimum 3 /Minimum \n             Prompt Input: /Prompt \n         /InputField \n         SoftKeyItem \n             Name F1 /Name \n             Label Next mode /Label \n             Url snom://mb_nop#next_edit_mode /Url \n         /SoftKeyItem \n     /Menu  /SnomIPPhoneMenu", 
            "title": "next_edit_mode fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_sel/", 
            "text": "sel fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nSelect the third option in \nMenu\n. If used alone, this fragment will work for \nMenuItem\n under \nMenu\n, which located directly under main element.\nBut if combined with \nmenu\n fragment, this can be used to reach deeper level of \nMenuItem\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nTitle\npress softkey\n/Title\n\n    \nMenu name=\nm1\n\n        \nSoftKeyItem\n\n            \nName\nF1\n/Name\n\n            \nLabel\n[@id=\nm1mi3\n]\n/Label\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_sel.xml#sel=[@id=\nm1mi3\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nSoftKeyItem\n\n            \nName\nF2\n/Name\n\n            \nLabel\n[@name=\nm1mi4\n]\n/Label\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_sel.xml#sel=[@name=\nm1mi4\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nMenuItem name=\nm1mi1\n id=\nm1mi1\n/MenuItem\n\n        \nMenuItem name=\nm1mi2\n id=\nm1mi2\n/MenuItem\n\n        \nMenuItem name=\nm1mi3\n id=\nm1mi3\n/MenuItem\n\n        \nMenuItem name=\nm1mi4\n id=\nm1mi4\n/MenuItem\n\n        \nMenuItem name=\ngo to m2m1mi3\n id=\nm1mi5\n\n            \nUrl\nsnom://mb_nop#menu=/SnomIPPhoneMenu/*[@id=\nm2\n]/*[@id=\nm2m1\n]\namp;sel=[@id=\nm2m1mi3\n]\n/Url\n\n        \n/MenuItem\n\n    \n/Menu\n\n    \nMenu name=\nm2\n id=\nm2\n\n        \nMenu name=\nm2m1\n id=\nm2m1\n\n            \nMenuItem name=\nm2m1mi1\n id=\nm2m1mi1\n/MenuItem\n\n            \nMenuItem name=\nm2m1mi2\n id=\nm2m1mi2\n/MenuItem\n\n            \nMenuItem name=\nm2m1mi3\n id=\nm2m1mi3\n/MenuItem\n\n        \n/Menu\n\n    \n/Menu\n\n\n/SnomIPPhoneMenu", 
            "title": "sel"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_sel/#sel_fragment", 
            "text": "Demo  Try on your phone   Select the third option in  Menu . If used alone, this fragment will work for  MenuItem  under  Menu , which located directly under main element.\nBut if combined with  menu  fragment, this can be used to reach deeper level of  MenuItem  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Title press softkey /Title \n     Menu name= m1 \n         SoftKeyItem \n             Name F1 /Name \n             Label [@id= m1mi3 ] /Label \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_sel.xml#sel=[@id= m1mi3 ] /Url \n         /SoftKeyItem \n         SoftKeyItem \n             Name F2 /Name \n             Label [@name= m1mi4 ] /Label \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_sel.xml#sel=[@name= m1mi4 ] /Url \n         /SoftKeyItem \n         MenuItem name= m1mi1  id= m1mi1 /MenuItem \n         MenuItem name= m1mi2  id= m1mi2 /MenuItem \n         MenuItem name= m1mi3  id= m1mi3 /MenuItem \n         MenuItem name= m1mi4  id= m1mi4 /MenuItem \n         MenuItem name= go to m2m1mi3  id= m1mi5 \n             Url snom://mb_nop#menu=/SnomIPPhoneMenu/*[@id= m2 ]/*[@id= m2m1 ] amp;sel=[@id= m2m1mi3 ] /Url \n         /MenuItem \n     /Menu \n     Menu name= m2  id= m2 \n         Menu name= m2m1  id= m2m1 \n             MenuItem name= m2m1mi1  id= m2m1mi1 /MenuItem \n             MenuItem name= m2m1mi2  id= m2m1mi2 /MenuItem \n             MenuItem name= m2m1mi3  id= m2m1mi3 /MenuItem \n         /Menu \n     /Menu  /SnomIPPhoneMenu", 
            "title": "sel fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_reloadset/", 
            "text": "reloadset fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nMenuItem\n to reload setting from provisioning server. Set the setting server to a XML file contain new setting for telephone and choose this \nMenuItem\n. If the setting is correct the new setting will be loaded without rebooting the phone.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nreloadset\n\n        \nUrl\nsnom://mb_nop#reloadset\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "fr_reloadset"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_reloadset/#reloadset_fragment", 
            "text": "Demo  Try on your phone   MenuItem  to reload setting from provisioning server. Set the setting server to a XML file contain new setting for telephone and choose this  MenuItem . If the setting is correct the new setting will be loaded without rebooting the phone.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= reloadset \n         Url snom://mb_nop#reloadset /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "reloadset fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_set/", 
            "text": "set fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nChange setting fkey_label0. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n dtmf=\nno\n track=\nno\n\n    \nTitle\nfkey_label0:$(set:fkey_label0)\n/Title\n\n    \nMenuItem name=\nset fkey label0 to weather\n\n        \nUrl\nsnom://mb_nop#set:fkey_label0=weather\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nset fkey label0 to empty\n\n        \nUrl\nsnom://mb_nop#set:fkey_label0=\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "set"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_set/#set_fragment", 
            "text": "Demo  Try on your phone   Change setting fkey_label0. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  dtmf= no  track= no \n     Title fkey_label0:$(set:fkey_label0) /Title \n     MenuItem name= set fkey label0 to weather \n         Url snom://mb_nop#set:fkey_label0=weather /Url \n     /MenuItem \n     MenuItem name= set fkey label0 to empty \n         Url snom://mb_nop#set:fkey_label0= /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "set fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_sub/", 
            "text": "sub fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nFragment used to jump between main element within \nSnomIPPhoneBatch\n. The value must be an XPath expression\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneText id=\npage0\n\n        \nTitle\npage 0\n/Title\n\n        \nSoftKeyItem\nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_sub.xml#sub=*[@id=\npage1\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nThis is page 0\nbr/\n\n            prees * to continue\n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\npage1\n\n        \nTitle\npage 1\n/Title\n\n        \nSoftKeyItem\nName\n*\n/Name\n\n            \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/xml/fr_sub.xml#sub=*[@id=\npage0\n]\n/Url\n\n        \n/SoftKeyItem\n\n        \nText\nThis is page 1\nbr/\n\n            prees * to continue\n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch", 
            "title": "sub"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_sub/#sub_fragment", 
            "text": "Demo  Try on your phone   Fragment used to jump between main element within  SnomIPPhoneBatch . The value must be an XPath expression  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneText id= page0 \n         Title page 0 /Title \n         SoftKeyItem Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_sub.xml#sub=*[@id= page1 ] /Url \n         /SoftKeyItem \n         Text This is page 0 br/ \n            prees * to continue /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= page1 \n         Title page 1 /Title \n         SoftKeyItem Name * /Name \n             Url http://docs.snom.io/xml_minibrowser/examples/xml/fr_sub.xml#sub=*[@id= page0 ] /Url \n         /SoftKeyItem \n         Text This is page 1 br/ \n            prees * to continue /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch", 
            "title": "sub fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_toggleset/", 
            "text": "toggleset fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nToggle date and time format. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n \n\n    \nTitle\nToggleset setting\n/Title\n\n    \nMenuItem name=\n[$(on_off:$(set:date_us_format))]$(date)\n id=\ndate_us_format\n\n        \nUrl track=\nno\nsnom://mb_nop#toggleset:date_us_format\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\n[$(on_off:$(set:time_24_format))]$(time)\n id=\ntime_24_format\n\n        \nUrl track=\nno\nsnom://mb_nop#toggleset:time_24_format\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "toggleset"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_toggleset/#toggleset_fragment", 
            "text": "Demo  Try on your phone   Toggle date and time format. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd   \n     Title Toggleset setting /Title \n     MenuItem name= [$(on_off:$(set:date_us_format))]$(date)  id= date_us_format \n         Url track= no snom://mb_nop#toggleset:date_us_format /Url \n     /MenuItem \n     MenuItem name= [$(on_off:$(set:time_24_format))]$(time)  id= time_24_format \n         Url track= no snom://mb_nop#toggleset:time_24_format /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "toggleset fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_var/", 
            "text": "var fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nTaken from local xml \ntemplate\n.\n\n\n\n\nInfo\n\n\nThis example must be called with the following URL:\n\n\nfile:///xml/text.xml#var:title=This%20is%20title\nvar:text=No%20text\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\n!-- if called with following url :\n file:///xml/text.xml#var:title=This%20is%20title\nvar:text=No%20text\n--\n\n\nSnomIPPhoneText\n\n    \nTitle\n$(var:title)\n/Title\n!-- This is title --\n\n    \nText\n$(var:text)\n/Text\n!-- No text --\n\n\n/SnomIPPhoneText", 
            "title": "var"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_var/#var_fragment", 
            "text": "Demo  Try on your phone   Taken from local xml  template .   Info  This example must be called with the following URL:  file:///xml/text.xml#var:title=This%20is%20title var:text=No%20text   ?xml version= 1.0  encoding= UTF-8 ?  !-- if called with following url :\n file:///xml/text.xml#var:title=This%20is%20title var:text=No%20text\n--  SnomIPPhoneText \n     Title $(var:title) /Title !-- This is title -- \n     Text $(var:text) /Text !-- No text --  /SnomIPPhoneText", 
            "title": "var fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_action_ifc/", 
            "text": "action_ifc fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nExample format:\n\n\naction_ifc:moduleid=make_some_request,param1=true,param2=false-\nvarname\nurl.com#action_ifc:module.matcher=request,param1=true,param2=false-\nresult_name\n\n\n\n\nChange time from \ndate_time\n module. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneInput xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nUrl\nsnom://mb_nop#action_ifc:date_time=set,time=__Y__\n/Url\n\n    \nInputItem\n\n        \nDisplayName\nTime:$(time)\n/DisplayName\n\n        \nInputToken\n__Y__\n/InputToken\n\n        \nInputMask\n99:99\n/InputMask\n\n        \nInputFlags\na\n/InputFlags\n\n        \nDefaultValue\n00:00\n/DefaultValue\n\n    \n/InputItem\n\n\n/SnomIPPhoneInput", 
            "title": "action_ifc"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_action_ifc/#action_ifc_fragment", 
            "text": "Demo  Try on your phone   Example format:  action_ifc:moduleid=make_some_request,param1=true,param2=false- varname\nurl.com#action_ifc:module.matcher=request,param1=true,param2=false- result_name  Change time from  date_time  module. Don't forget to add the IP address or hostname as minibrowser trusted host, when running this example.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneInput xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Url snom://mb_nop#action_ifc:date_time=set,time=__Y__ /Url \n     InputItem \n         DisplayName Time:$(time) /DisplayName \n         InputToken __Y__ /InputToken \n         InputMask 99:99 /InputMask \n         InputFlags a /InputFlags \n         DefaultValue 00:00 /DefaultValue \n     /InputItem  /SnomIPPhoneInput", 
            "title": "action_ifc fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_applyline/", 
            "text": "applyline fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nTwo different user id setting with and without \napplyline\n fragment.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nset id4 without applyline\n\n        \nUrl\nsnom://mb_nop#set:user_name4=random_one\namp;set:user_host4=10.110.22.37\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nunregister id4\n\n        \nUrl\nsnom://mb_nop#unregister=3\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nset id5 with applyline\n\n        \nUrl\nsnom://mb_nop#set:user_name4=random_one\namp;set:user_host4=10.110.22.37\namp;applyline\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nunregister id5\n\n        \nUrl\nsnom://mb_nop#unregister=4\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu\n\n\n\n\nIf option with 'applyline' fragment is chosen, phone got following log:\n\n\nMar 18 07:28:32  [INFO  ] PHN: Xpath applies: *[@name=\nset id5 with applyline\n]\nMar 18 07:28:32  [INFO  ] PHN: Xpath applies: @name=\nset id5 with applyline\n]\nMar 18 07:28:32  [INFO  ] SIP: Registered at registrar as random_one@10.110.22.37 (Expires: 3600 secs)", 
            "title": "applyline"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_applyline/#applyline_fragment", 
            "text": "Demo  Try on your phone   Two different user id setting with and without  applyline  fragment.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= set id4 without applyline \n         Url snom://mb_nop#set:user_name4=random_one amp;set:user_host4=10.110.22.37 /Url \n     /MenuItem \n     MenuItem name= unregister id4 \n         Url snom://mb_nop#unregister=3 /Url \n     /MenuItem \n     MenuItem name= set id5 with applyline \n         Url snom://mb_nop#set:user_name4=random_one amp;set:user_host4=10.110.22.37 amp;applyline /Url \n     /MenuItem \n     MenuItem name= unregister id5 \n         Url snom://mb_nop#unregister=4 /Url \n     /MenuItem  /SnomIPPhoneMenu  If option with 'applyline' fragment is chosen, phone got following log:  Mar 18 07:28:32  [INFO  ] PHN: Xpath applies: *[@name= set id5 with applyline ]\nMar 18 07:28:32  [INFO  ] PHN: Xpath applies: @name= set id5 with applyline ]\nMar 18 07:28:32  [INFO  ] SIP: Registered at registrar as random_one@10.110.22.37 (Expires: 3600 secs)", 
            "title": "applyline fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_key/", 
            "text": "key fragment\n #\n\n\nFires a key pressure of the given key", 
            "title": "key"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_key/#key_fragment", 
            "text": "Fires a key pressure of the given key", 
            "title": "key fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_numberdial/", 
            "text": "numberdial fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nUsing fragment to dial a number and a combination with \ncreate_url\n callback. This can be used to replace deprecated \nSnomIPPhoneDirectory\n.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nnd 500715124\n\n        \nUrl\nsnom://mb_nop#numberdial=500715124\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nnd \n500715124@registrar\n\n        \nUrl\nsnom://mb_nop#numberdial=$(create_url:500715124)\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "numberdial"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_numberdial/#numberdial_fragment", 
            "text": "Demo  Try on your phone   Using fragment to dial a number and a combination with  create_url  callback. This can be used to replace deprecated  SnomIPPhoneDirectory .  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= nd 500715124 \n         Url snom://mb_nop#numberdial=500715124 /Url \n     /MenuItem \n     MenuItem name= nd  500715124@registrar \n         Url snom://mb_nop#numberdial=$(create_url:500715124) /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "numberdial fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_reboot/", 
            "text": "reboot fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nCreating menu to reboot the phone.\nChoosing any of the menu will reboot your phone.\nChoosing menu with fragment \nreboot\n, which have argument \nyes\n or \nreset\n, will reboot and reset your phone to default factory.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nreboot\n\n        \nUrl\nsnom://mb_nop#reboot\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nreboot=yes\n\n        \nUrl\nsnom://mb_nop#reboot=yes\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nreboot=reset\n\n        \nUrl\nsnom://mb_nop#reboot=reset\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "reboot"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_reboot/#reboot_fragment", 
            "text": "Demo  Try on your phone   Creating menu to reboot the phone.\nChoosing any of the menu will reboot your phone.\nChoosing menu with fragment  reboot , which have argument  yes  or  reset , will reboot and reset your phone to default factory.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= reboot \n         Url snom://mb_nop#reboot /Url \n     /MenuItem \n     MenuItem name= reboot=yes \n         Url snom://mb_nop#reboot=yes /Url \n     /MenuItem \n     MenuItem name= reboot=reset \n         Url snom://mb_nop#reboot=reset /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "reboot fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_reregister/", 
            "text": "reregister fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nReregister phone identiy\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nRepeat values=\n$(enum:$(max_registrations))\n token=\n|__REG__|\n\n        \nMenuItem name=\n$(user_displayname:__REG__)\n\n            \nUrl track=\nno\nsnom://mb_nop#reregister=$(math_eval:__REG__-1)\namp;go_back\n/Url\n\n        \n/MenuItem\n\n    \n/Repeat\n\n\n/SnomIPPhoneMenu", 
            "title": "reregister"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_reregister/#reregister_fragment", 
            "text": "Demo  Try on your phone   Reregister phone identiy  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Repeat values= $(enum:$(max_registrations))  token= |__REG__| \n         MenuItem name= $(user_displayname:__REG__) \n             Url track= no snom://mb_nop#reregister=$(math_eval:__REG__-1) amp;go_back /Url \n         /MenuItem \n     /Repeat  /SnomIPPhoneMenu", 
            "title": "reregister fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_unregister/", 
            "text": "unregister fragment\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nUregister the identity(user) in phone. Valid argument : number from \n0\n to last number before phone max registration, or \n-1\n to unregister all identity.\n\n\nCreate a menu for unregistering phone identity.\nThe index used here is different with the one used in WUI, as in WUI it start from 1 (to up to 12 depending pn thephone model) and index for \nunregister\n fragment start from 0.\nAs example to unregister identity 4 (from WUI), phone can use this url http://mb_nop#unregister=3.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nunregister-1\n \n!-- unregister all identity --\n\n        \nUrl\nsnom://mb_exit#unregister=1\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nunregister\n \n!-- unregister first identity(WUI) --\n\n        \nUrl\nsnom://mb_exit#unregister\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nunregister0\n \n!-- unregister identity1 (WUI) --\n\n        \nUrl\nsnom://mb_exit#unregister=0\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nunregister1\n!-- unregister identity2 (WUI) --\n\n        \nUrl\nsnom://mb_exit#unregister=1\n/Url\n\n    \n/MenuItem\n\n    \nMenuItem name=\nunregister2\n!-- unregister identity3 (WUI) --\n\n        \nUrl\nsnom://mb_exit#unregister=2\n/Url\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu", 
            "title": "unregister"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_unregister/#unregister_fragment", 
            "text": "Demo  Try on your phone   Uregister the identity(user) in phone. Valid argument : number from  0  to last number before phone max registration, or  -1  to unregister all identity.  Create a menu for unregistering phone identity.\nThe index used here is different with the one used in WUI, as in WUI it start from 1 (to up to 12 depending pn thephone model) and index for  unregister  fragment start from 0.\nAs example to unregister identity 4 (from WUI), phone can use this url http://mb_nop#unregister=3.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= unregister-1   !-- unregister all identity -- \n         Url snom://mb_exit#unregister=1 /Url \n     /MenuItem \n     MenuItem name= unregister   !-- unregister first identity(WUI) -- \n         Url snom://mb_exit#unregister /Url \n     /MenuItem \n     MenuItem name= unregister0   !-- unregister identity1 (WUI) -- \n         Url snom://mb_exit#unregister=0 /Url \n     /MenuItem \n     MenuItem name= unregister1 !-- unregister identity2 (WUI) -- \n         Url snom://mb_exit#unregister=1 /Url \n     /MenuItem \n     MenuItem name= unregister2 !-- unregister identity3 (WUI) -- \n         Url snom://mb_exit#unregister=2 /Url \n     /MenuItem  /SnomIPPhoneMenu", 
            "title": "unregister fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_var_ifc/", 
            "text": "var_ifc fragment\n #\n\n\nSet a module variable, format is \nvar_ifc:moduleid=\"param1=value1\"\n Eg: \nabc.com#var_ifc:moduleID=\"active=1\"", 
            "title": "var_ifc"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_var_ifc/#var_ifc_fragment", 
            "text": "Set a module variable, format is  var_ifc:moduleid=\"param1=value1\"  Eg:  abc.com#var_ifc:moduleID=\"active=1\"", 
            "title": "var_ifc fragment"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_mjpg/", 
            "text": "mjpg fragment\n #\n\n\n\n\nInfo\n\n\nThis section documents the mjpg and the mjpg_stop fragments\n\n\n\n\nThe phone will get the URL as a Motion jpeg video, see more info in \nthis\n howto", 
            "title": "mjpg"
        }, 
        {
            "location": "/xml_minibrowser/examples/fr_mjpg/#mjpg_fragment", 
            "text": "Info  This section documents the mjpg and the mjpg_stop fragments   The phone will get the URL as a Motion jpeg video, see more info in  this  howto", 
            "title": "mjpg fragment"
        }, 
        {
            "location": "/xml_minibrowser/templates/", 
            "text": "Info\n\n\nSnom phones also offer some builtin templates which can be accessed through an internal URL.\n\n\n\n\ntemplate.xml\n #\n\n\nAddress:\n file:///xml/gui/templates.xml\n\n\nContent\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../schemas/minibrowser.xsd\n\n  \nSnomIPPhoneInput track=\nno\n dtmf=\noff\n id=\ninput_template\n\n    \nUrl\n$(var:input_url)\n/Url\n\n    \nInputItem\n\n      \nDisplayName\n$(var:input_displayname)\n/DisplayName\n\n      \nInputToken\n$(var:input_token)\n/InputToken\n\n      \nInputFlags\n$(var:input_flags)\n/InputFlags\n\n      \nInputMask\n$(var:input_mask)\n/InputMask\n\n      \nDefaultValue\n$(var:input_default)\n/DefaultValue\n\n    \n/InputItem\n\n  \n/SnomIPPhoneInput\n\n\n!-- ... --\n\n\n/SnomIPPhoneBatch\n\n\n\n\nExample\n #\n\n\nConsider following action URL (the newline added for better readibility):\n\n\nfile:///xml/gui/templates.xml\n#sub=*[@id=\ninput_template\n]\n\nvar:input_displayname=ChangePreNr\n\nvar:input_token=__Y__\n\nvar:input_flags=n\n\nvar:input_url=snom://mb_exit#set:preselection_nr=__Y__\n\n\n\n\n\n\nFirst line mean that the templates.xml file inside the telephone will be called.\n\n\nsub function will be executed and by the given xpath, the \nSnomIPPhoneInput\n with id \ninput_template\n inside the XML file will be loaded.\n\n\nassign value to variable \ninput_displayname\n\n\nassign value to variable \ninput_token\n\n\nassign value to variable \ninput_flags\n\n\nassign value to variable \ninput_url\n. This contain target URL to tell the minibrowser where to go after user confirm the input.\n\n\n\n\ntext.xml\n #\n\n\nAddress:\n file:///xml/text.xml\n\n\nContent\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n  \nTitle\n$(var:title)\n/Title\n\n  \nText\n$(var:text)\n/Text\n\n\n/SnomIPPhoneText\n\n\n\n\nExample\n #\n\n\nConsider following action URL (the newline added for better readibility):\n\n\nfile:///xml/text.xml\n#var:title=Text\n\nvar:text=Hello%20world\n\n\n\n\n\n\nload text.xml from snom telephone\n\n\nassign value to variable \ntitle\n\n\nassign value to variable \ntext\n\n\n\n\ndecision.xml\n #\n\n\nAddress:\n file:///xml/gui/decision.xml\n\n\nContent\n #\n\n\nSnomIPPhoneBatch\n\n\n!-- ... --\n\n  \nSnomIPPhoneText track=\nno\n id=\ndsc_url\n xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../schemas/minibrowser.xsd\n\n    \nTitle\n$(var:dsc_title)\n/Title\n\n    \nText\n$(var:dsc_text)\n/Text\n\n    \nIf condition=\n$(var:dsc_yes)\n\n      \nSoftKeyItem\n\n        \nName\nENTER\n/Name\n\n        \nUrl track=\nno\n$(var:dsc_yes_url)\n/Url\n\n      \n/SoftKeyItem\n\n      \nSoftKeyItem\n\n        \nName\nF1\n/Name\n\n        \nLabel\nF_OK\n/Label\n\n        \nUrl track=\nno\n$(var:dsc_yes_url)\n/Url\n\n      \n/SoftKeyItem\n\n    \n/If\n\n    \nIf condition=\n$(var:dsc_no)\n\n      \nSoftKeyItem\n\n        \nName\nCANCEL\n/Name\n\n        \nUrl track=\nno\n$(var:dsc_no_url)\n/Url\n\n      \n/SoftKeyItem\n\n      \nSoftKeyItem\n\n        \nName\nF2\n/Name\n\n        \nLabel\nF_CANCEL\n/Label\n\n        \nUrl track=\nno\n$(var:dsc_no_url)\n/Url\n\n      \n/SoftKeyItem\n\n    \n/If\n\n    \nIf condition=\n$(var:dsc_abort)\n\n      \nSoftKeyItem\n\n        \nName\nF_ABORT\n/Name\n\n        \nUrl\n$(var:dsc_abort_url)\n/Url\n\n      \n/SoftKeyItem\n\n      \nSoftKeyItem\n\n        \nName\nF3\n/Name\n\n        \nLabel\nF_ABORT\n/Label\n\n        \nUrl\n$(var:dsc_abort_url)\n/Url\n\n      \n/SoftKeyItem\n\n    \n/If\n\n  \n/SnomIPPhoneText\n\n\n!-- ... --\n\n\n/SnomIPPhoneBatch\n\n\n\n\nExample\n #\n\n\nConsider following action URL (the newline added for better readibility):\n\n\nfile:///xml/gui/decision.xml\n#sub=*[@id=\ndsc_url\n]\n\nvar:dsc_title=decision.xml%20example\n\nvar:dsc_text=dial%20snom715%253F\n\nvar:dsc_yes=yes\n\nvar:dsc_yes_url=snom%3A%2F%2Fmb_nop%23numberdial%3D500715124\n\nvar:dsc_no=yes\n\nvar:dsc_no_url=snom%3A%2F%2Fmb_exit\n\n\n\n\n\n\nFirst line mean that the decision.xml file inside the telephone will be called.\n\n\nsub function will be executed and by the given xpath, the \nSnomIPPhoneText\n with id \ndsc_url\n inside the XML file will be loaded.\n\n\nassign value to variable \ndsc_title\n\n\nassign value to variable \ndsc_text\n\n\nassign value to variable \ndsc_yes\n to enable \nyes\n option.\n\n\nassign value to variable \ndsc_yes_url\n. This contain target URL to tell the minibrowser where to go after user confirm the decision.\n\n\nassign value to variable \ndsc_no\n to enable \nno\n option.\n\n\nassign value to variable \ndsc_no_url\n. This contain target URL to tell the minibrowser where to go after user cancel the decision.", 
            "title": "Builtin Templates"
        }, 
        {
            "location": "/xml_minibrowser/templates/#templatexml", 
            "text": "Address:  file:///xml/gui/templates.xml", 
            "title": "template.xml"
        }, 
        {
            "location": "/xml_minibrowser/templates/#content", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../schemas/minibrowser.xsd \n   SnomIPPhoneInput track= no  dtmf= off  id= input_template \n     Url $(var:input_url) /Url \n     InputItem \n       DisplayName $(var:input_displayname) /DisplayName \n       InputToken $(var:input_token) /InputToken \n       InputFlags $(var:input_flags) /InputFlags \n       InputMask $(var:input_mask) /InputMask \n       DefaultValue $(var:input_default) /DefaultValue \n     /InputItem \n   /SnomIPPhoneInput  !-- ... --  /SnomIPPhoneBatch", 
            "title": "Content"
        }, 
        {
            "location": "/xml_minibrowser/templates/#example", 
            "text": "Consider following action URL (the newline added for better readibility):  file:///xml/gui/templates.xml\n#sub=*[@id= input_template ] var:input_displayname=ChangePreNr var:input_token=__Y__ var:input_flags=n var:input_url=snom://mb_exit#set:preselection_nr=__Y__   First line mean that the templates.xml file inside the telephone will be called.  sub function will be executed and by the given xpath, the  SnomIPPhoneInput  with id  input_template  inside the XML file will be loaded.  assign value to variable  input_displayname  assign value to variable  input_token  assign value to variable  input_flags  assign value to variable  input_url . This contain target URL to tell the minibrowser where to go after user confirm the input.", 
            "title": "Example"
        }, 
        {
            "location": "/xml_minibrowser/templates/#textxml", 
            "text": "Address:  file:///xml/text.xml", 
            "title": "text.xml"
        }, 
        {
            "location": "/xml_minibrowser/templates/#content_1", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n   Title $(var:title) /Title \n   Text $(var:text) /Text  /SnomIPPhoneText", 
            "title": "Content"
        }, 
        {
            "location": "/xml_minibrowser/templates/#example_1", 
            "text": "Consider following action URL (the newline added for better readibility):  file:///xml/text.xml\n#var:title=Text var:text=Hello%20world   load text.xml from snom telephone  assign value to variable  title  assign value to variable  text", 
            "title": "Example"
        }, 
        {
            "location": "/xml_minibrowser/templates/#decisionxml", 
            "text": "Address:  file:///xml/gui/decision.xml", 
            "title": "decision.xml"
        }, 
        {
            "location": "/xml_minibrowser/templates/#content_2", 
            "text": "SnomIPPhoneBatch  !-- ... -- \n   SnomIPPhoneText track= no  id= dsc_url  xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../schemas/minibrowser.xsd \n     Title $(var:dsc_title) /Title \n     Text $(var:dsc_text) /Text \n     If condition= $(var:dsc_yes) \n       SoftKeyItem \n         Name ENTER /Name \n         Url track= no $(var:dsc_yes_url) /Url \n       /SoftKeyItem \n       SoftKeyItem \n         Name F1 /Name \n         Label F_OK /Label \n         Url track= no $(var:dsc_yes_url) /Url \n       /SoftKeyItem \n     /If \n     If condition= $(var:dsc_no) \n       SoftKeyItem \n         Name CANCEL /Name \n         Url track= no $(var:dsc_no_url) /Url \n       /SoftKeyItem \n       SoftKeyItem \n         Name F2 /Name \n         Label F_CANCEL /Label \n         Url track= no $(var:dsc_no_url) /Url \n       /SoftKeyItem \n     /If \n     If condition= $(var:dsc_abort) \n       SoftKeyItem \n         Name F_ABORT /Name \n         Url $(var:dsc_abort_url) /Url \n       /SoftKeyItem \n       SoftKeyItem \n         Name F3 /Name \n         Label F_ABORT /Label \n         Url $(var:dsc_abort_url) /Url \n       /SoftKeyItem \n     /If \n   /SnomIPPhoneText  !-- ... --  /SnomIPPhoneBatch", 
            "title": "Content"
        }, 
        {
            "location": "/xml_minibrowser/templates/#example_2", 
            "text": "Consider following action URL (the newline added for better readibility):  file:///xml/gui/decision.xml\n#sub=*[@id= dsc_url ] var:dsc_title=decision.xml%20example var:dsc_text=dial%20snom715%253F var:dsc_yes=yes var:dsc_yes_url=snom%3A%2F%2Fmb_nop%23numberdial%3D500715124 var:dsc_no=yes var:dsc_no_url=snom%3A%2F%2Fmb_exit   First line mean that the decision.xml file inside the telephone will be called.  sub function will be executed and by the given xpath, the  SnomIPPhoneText  with id  dsc_url  inside the XML file will be loaded.  assign value to variable  dsc_title  assign value to variable  dsc_text  assign value to variable  dsc_yes  to enable  yes  option.  assign value to variable  dsc_yes_url . This contain target URL to tell the minibrowser where to go after user confirm the decision.  assign value to variable  dsc_no  to enable  no  option.  assign value to variable  dsc_no_url . This contain target URL to tell the minibrowser where to go after user cancel the decision.", 
            "title": "Example"
        }, 
        {
            "location": "/xml_minibrowser/examples/", 
            "text": "Using the examples\n #\n\n\nThis documentation section provides a complete set of examples.\n\n\nYou can test all the examples by your own: every example is accessible via public URL.\n\n\nWen you see the following demo box:\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nYou just need to copy the URL into the phone configuration and test the application\n\n\nNow you are ready to proceed with the first example: just clik on the \nNext\n link\n\n\nFull applications examples\n #\n\n\nWe created some example applications showing some XML minibrowser features and syntax.\n\n\n\n\n\n\n\n\nApplication\n\n\nDescription\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nNumverify\n\n\nNumber validation and lookup trough \nNumverify\n APIs\n\n\nhttps://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/numverify\n\n\n\n\n\n\nSlideshow\n\n\nSimple picture slideshow on a Snom Phone\n\n\nhttps://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/slideshow\n\n\n\n\n\n\nSoftkey\n\n\nSoftkey usage example trough a PHP script\n\n\nhttps://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/softkeys\n\n\n\n\n\n\nOpenWeatherMap\n\n\nWeather contitions and forecast on you Snom phone trough \nOpenWeatherMap.org\n APIs\n\n\nhttps://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/OpenWeatherMap\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nThe listed applications are provided as example, you are free to use, reuse and modify.", 
            "title": "Introduction"
        }, 
        {
            "location": "/xml_minibrowser/examples/#using_the_examples", 
            "text": "This documentation section provides a complete set of examples.  You can test all the examples by your own: every example is accessible via public URL.  Wen you see the following demo box:   Demo  Try on your phone   You just need to copy the URL into the phone configuration and test the application  Now you are ready to proceed with the first example: just clik on the  Next  link", 
            "title": "Using the examples"
        }, 
        {
            "location": "/xml_minibrowser/examples/#full_applications_examples", 
            "text": "We created some example applications showing some XML minibrowser features and syntax.     Application  Description  URL      Numverify  Number validation and lookup trough  Numverify  APIs  https://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/numverify    Slideshow  Simple picture slideshow on a Snom Phone  https://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/slideshow    Softkey  Softkey usage example trough a PHP script  https://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/softkeys    OpenWeatherMap  Weather contitions and forecast on you Snom phone trough  OpenWeatherMap.org  APIs  https://github.com/Snomio/Snom-XML-Minibrowser-examples/tree/master/OpenWeatherMap      Info  The listed applications are provided as example, you are free to use, reuse and modify.", 
            "title": "Full applications examples"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneText/", 
            "text": "SnomIPPhoneText\n #\n\n\n\n\nThe text will be cut on the telephone with color display if it is too long.\n\n\nbr\n tag will ignored if put right after opening tag.\n\n\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\nDemo\n/Title\n\n    \nText\n\n        Welcome to the Snom Technology AG\n        \nbr/\n\n        Hello World!\n    \n/Text\n\n\n/SnomIPPhoneText\n\n\n\n\nResult\n\n\n\n\nImage\n #\n\n\n\n\nWarning\n\n\nThis section refers to the \nImage\n tag used as a \nSnomIPPhoneText\n subtag\n\n\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nLocationX\n145\n/LocationX\n\n    \nLocationY\n23\n/LocationY\n\n    \n!-- use this value of LocationY to avoid conflict with upper bar --\n\n    \nText\nHello world:\nbr/\nsecond line\nbr/\nthird line\n\nbr/\nnothing to write\nbr/\nno line\n/Text\n\n    \nImage default=\nfile:///bmp/colored/snom_photo_unknown.png\n\n        \nLocationX\n2\n/LocationX\n\n        \nLocationY\n23\n/LocationY\n\n        \nUrl\nhttp://docs.snom.io/xml_minibrowser/examples/img/cloud.png\n/Url\n\n    \n/Image\n\n\n/SnomIPPhoneText\n\n\n\n\nResult", 
            "title": "SnomIPPhoneText"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneText/#snomipphonetext", 
            "text": "The text will be cut on the telephone with color display if it is too long.  br  tag will ignored if put right after opening tag.    Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title Demo /Title \n     Text \n        Welcome to the Snom Technology AG\n         br/ \n        Hello World!\n     /Text  /SnomIPPhoneText  Result", 
            "title": "SnomIPPhoneText"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneText/#image", 
            "text": "Warning  This section refers to the  Image  tag used as a  SnomIPPhoneText  subtag    Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     LocationX 145 /LocationX \n     LocationY 23 /LocationY \n     !-- use this value of LocationY to avoid conflict with upper bar -- \n     Text Hello world: br/ second line br/ third line br/ nothing to write br/ no line /Text \n     Image default= file:///bmp/colored/snom_photo_unknown.png \n         LocationX 2 /LocationX \n         LocationY 23 /LocationY \n         Url http://docs.snom.io/xml_minibrowser/examples/img/cloud.png /Url \n     /Image  /SnomIPPhoneText  Result", 
            "title": "Image"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneMenu/", 
            "text": "SnomIPPhoneMenu\n #\n\n\n\n\nName Attribute in \nMenu\n and \nMenuItem\n is required.\n\n\nThe speedselect method can be used to select/choose all available menu item\n\n\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nname attr menu\n\n        \nTitle\n2nd layer title tag\n/Title\n\n        \nMenuItem name=\n2nd,1st menuitem\n/\n\n        \nMenuItem name=\n2nd,2nd menuitem\n/\n\n    \n/Menu\n\n    \nMenuItem name=\nname attr menuitem\n/\n\n    \nMenuItem name=\nname tag menuitem\n/\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult\n\n\n\n\nImage\n #\n\n\n\n\nWarning\n\n\nThis section refers to the \nImage\n tag used as a \nMenuItem\n subtag\n\n\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nIf no image is given as default, the icon on the left side of the text will be left blank (transparent).\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenuItem name=\nlocal:snom photo unknown \n\n        \nImage default=\nfile:///bmp/colored/snom_photo_unknown.png\nfile:///bmp/colored/snom_photo_unknown.png\n/Image\n\n    \n/MenuItem\n\n    \nMenuItem name=\nlocal:snom820_icon_buddy_dnd.png\n\n        \nImage default=\nfile:///bmp/colored/snom_photo_unknown.png\nfile:///bmp/colored/snom820_icon_buddy_dnd.png\n/Image\n\n    \n/MenuItem\n\n    \nMenuItem name=\nurl image1\n\n        \nImage default=\nfile:///bmp/colored/snom_photo_unknown.png\nhttp://docs.snom.io/xml_minibrowser/examples/img/Icon_radiation.png\n/Image\n\n    \n/MenuItem\n\n    \nMenuItem name=\ninvalid url/image without default\n\n        \nImage\nhttp://randomurl.com/random_image.png\n/Image\n\n    \n/MenuItem\n\n    \nMenuItem name=\ninvalid url/image\n\n        \nImage default=\nfile:///bmp/colored/snom_photo_unknown.png\nhttp://randomurl.com/random_image.png\n/Image\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult\n\n\n\n\nIcon\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nAll the snom phones with branding features can use internal icon on \nfile://snom/bmp/colored\n. More available icon name can be found inside tar archive with file name prefix 'snom820_icon_' on branding instruction page.\n\n\nTo use an external image use \nImage\n instead.\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu\n\n\nTitle\nIcon tag branding icon only\n/Title\n\n\nMenuItem name=\nsnom820_icon_buddy_dnd.png\n\n    \nIcon\nfile:///bmp/colored/snom820_icon_buddy_dnd.png\n/Icon\n\n    \n/MenuItem\n\n\nMenuItem name=\nsnom820_icon_buddy_offline.png\n\n    \nIcon\nfile:///bmp/colored/snom820_icon_buddy_offline.png\n/Icon\n\n    \n/MenuItem\n\n\nMenuItem name=\nsnom820_icon_buddy_online.png\n\n    \nIcon\nfile:///bmp/colored/snom820_icon_buddy_online.png\n/Icon\n\n    \n/MenuItem\n\n\nMenuItem name=\nsnom820_icon_contact_state_available.png\n\n    \nIcon\nfile:///bmp/colored/snom820_icon_contact_state_available.png\n/Icon\n\n    \n/MenuItem\n\n\nMenuItem name=\nsnom820_icon_contact_state_away.png\n\n    \nIcon\nfile:///bmp/colored/snom820_icon_contact_state_away.png\n/Icon\n\n    \n/MenuItem\n\n\nMenuItem name=\nsnom820_icon_contact_state_busy.png\nbr/\n\n    \nIcon\nfile:///bmp/colored/snom820_icon_contact_state_busy.png\n/Icon\n\n    \n/MenuItem\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResults", 
            "title": "SnomIPPhoneMenu"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneMenu/#snomipphonemenu", 
            "text": "Name Attribute in  Menu  and  MenuItem  is required.  The speedselect method can be used to select/choose all available menu item    Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= name attr menu \n         Title 2nd layer title tag /Title \n         MenuItem name= 2nd,1st menuitem / \n         MenuItem name= 2nd,2nd menuitem / \n     /Menu \n     MenuItem name= name attr menuitem / \n     MenuItem name= name tag menuitem /  /SnomIPPhoneMenu  Result", 
            "title": "SnomIPPhoneMenu"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneMenu/#image", 
            "text": "Warning  This section refers to the  Image  tag used as a  MenuItem  subtag    Demo  Try on your phone    If no image is given as default, the icon on the left side of the text will be left blank (transparent).   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     MenuItem name= local:snom photo unknown  \n         Image default= file:///bmp/colored/snom_photo_unknown.png file:///bmp/colored/snom_photo_unknown.png /Image \n     /MenuItem \n     MenuItem name= local:snom820_icon_buddy_dnd.png \n         Image default= file:///bmp/colored/snom_photo_unknown.png file:///bmp/colored/snom820_icon_buddy_dnd.png /Image \n     /MenuItem \n     MenuItem name= url image1 \n         Image default= file:///bmp/colored/snom_photo_unknown.png http://docs.snom.io/xml_minibrowser/examples/img/Icon_radiation.png /Image \n     /MenuItem \n     MenuItem name= invalid url/image without default \n         Image http://randomurl.com/random_image.png /Image \n     /MenuItem \n     MenuItem name= invalid url/image \n         Image default= file:///bmp/colored/snom_photo_unknown.png http://randomurl.com/random_image.png /Image \n     /MenuItem  /SnomIPPhoneMenu  Result", 
            "title": "Image"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneMenu/#icon", 
            "text": "Demo  Try on your phone    All the snom phones with branding features can use internal icon on  file://snom/bmp/colored . More available icon name can be found inside tar archive with file name prefix 'snom820_icon_' on branding instruction page.  To use an external image use  Image  instead.   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu  Title Icon tag branding icon only /Title  MenuItem name= snom820_icon_buddy_dnd.png \n     Icon file:///bmp/colored/snom820_icon_buddy_dnd.png /Icon \n     /MenuItem  MenuItem name= snom820_icon_buddy_offline.png \n     Icon file:///bmp/colored/snom820_icon_buddy_offline.png /Icon \n     /MenuItem  MenuItem name= snom820_icon_buddy_online.png \n     Icon file:///bmp/colored/snom820_icon_buddy_online.png /Icon \n     /MenuItem  MenuItem name= snom820_icon_contact_state_available.png \n     Icon file:///bmp/colored/snom820_icon_contact_state_available.png /Icon \n     /MenuItem  MenuItem name= snom820_icon_contact_state_away.png \n     Icon file:///bmp/colored/snom820_icon_contact_state_away.png /Icon \n     /MenuItem  MenuItem name= snom820_icon_contact_state_busy.png br/ \n     Icon file:///bmp/colored/snom820_icon_contact_state_busy.png /Icon \n     /MenuItem  /SnomIPPhoneMenu  Results", 
            "title": "Icon"
        }, 
        {
            "location": "/xml_minibrowser/examples/InputField/", 
            "text": "InputField\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nIt is recommended to set speedselect attribute to off in parent \nMenu\n to avoid the selection bar to jumping around when the user input the text.\n\n\nThe input mode can be changed with long press \n*\n key.\n\n\nInputField\n can have one \nHandler\n with one of the event (keypress or timeout) or two \nHandler\n with both event (just like in example).\n\n\nIf \nHandler\n with keypress event present inside \nInputField\n, the \nKey\n must also present to determine which key will be used as confirmation key.\n\n\nIf \nHandler\n with timeout event present inside \nInputField\n, the \nTimeout\n must also present to determine how long the timeout, and \nMinimum\n must also there to determine minimum input to activate the timeout.\n\n\nInputField\n can be placed anywhere inside the \nMenu\n but it can occur only once.\n\n\nIf the selection bar is placed in one of the \nMenuitem\n, it will jump to \nInputField\n if user give input.\n\n\nThe input will passed with the callback \n$[current_input]\n.\n\n\nThe input mode will not be shown.\n\n\nNo function key will be used as backspace (unlike \nSnomIPPhoneInput\n). But you can use \nSoftkeyitem\n as workaround.\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nnormal menu\n speedselect=\noff\n\n        \nTitle\nnormal menu title\n/Title\n\n        \nInputField\n\n            \nHandler event=\nkeypress\nfile:///xml/text.xml#var:text=$[current_input]\n/Handler\n\n            \nHandler event=\ntimeout\nfile:///xml/text.xml#var:text=TIMEOUT:$[current_input]\n/Handler\n\n            \nTimeout\n3000\n/Timeout\n\n            \nMinimum\n3\n/Minimum\n\n            \nPrompt\nInput:\n/Prompt\n\n            \nKey\nENTER\n/Key\n\n        \n/InputField\n\n        \nMenuitem name=\nJudith Bernhardt\n /\n\n        \nMenuitem name=\nLeigh Vargas\n /\n\n        \nMenuitem name=\nWilliam Kosinski\n /\n\n    \n/Menu\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult", 
            "title": "InputField"
        }, 
        {
            "location": "/xml_minibrowser/examples/InputField/#inputfield", 
            "text": "Demo  Try on your phone    It is recommended to set speedselect attribute to off in parent  Menu  to avoid the selection bar to jumping around when the user input the text.  The input mode can be changed with long press  *  key.  InputField  can have one  Handler  with one of the event (keypress or timeout) or two  Handler  with both event (just like in example).  If  Handler  with keypress event present inside  InputField , the  Key  must also present to determine which key will be used as confirmation key.  If  Handler  with timeout event present inside  InputField , the  Timeout  must also present to determine how long the timeout, and  Minimum  must also there to determine minimum input to activate the timeout.  InputField  can be placed anywhere inside the  Menu  but it can occur only once.  If the selection bar is placed in one of the  Menuitem , it will jump to  InputField  if user give input.  The input will passed with the callback  $[current_input] .  The input mode will not be shown.  No function key will be used as backspace (unlike  SnomIPPhoneInput ). But you can use  Softkeyitem  as workaround.   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= normal menu  speedselect= off \n         Title normal menu title /Title \n         InputField \n             Handler event= keypress file:///xml/text.xml#var:text=$[current_input] /Handler \n             Handler event= timeout file:///xml/text.xml#var:text=TIMEOUT:$[current_input] /Handler \n             Timeout 3000 /Timeout \n             Minimum 3 /Minimum \n             Prompt Input: /Prompt \n             Key ENTER /Key \n         /InputField \n         Menuitem name= Judith Bernhardt  / \n         Menuitem name= Leigh Vargas  / \n         Menuitem name= William Kosinski  / \n     /Menu  /SnomIPPhoneMenu  Result", 
            "title": "InputField"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneDirectory/", 
            "text": "SnomIPPhoneDirectory\n #\n\n\n\n\nDanger\n\n\nThis tag will be deprectaed in future versions\n\n\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nThe \nTelephone\n tag content will be translated using the following rules:\n\n\n\n\nWhitespace character at the start and between characters will be translated to its URL-encoded form \n%20\n.\n\n\nIf not written, \nsip:\n will be added at the start URI\n\n\nIf user field contain number only and no domain defined, Registrar will be added as domain.\n\n\nIf user field contain number only and ended with whitespace, \n%20\n will be added between the user field and \n@\n sign.\n\n\nIf user field contain text or sign and no domain defined, no domain will be added.\n\n\nFor more info about sip format, can be seen here [http://tools.ietf.org/html/rfc3261#section-19.1.1 RFC3261]\n\n\n\n\nTelephone\nsip:123\n/Telephone\n -\n sip:123@abc.com\n\nTelephone\n123\n/Telephone\n -\n sip:123@abc.com\n\nTelephone\n 123\n/Telephone\n -\n sip:%20123@abc.com\n\nTelephone\n123 \n/Telephone\n -\n sip:123%20@abc.com\n\nTelephone\ndef\n/Telephone\n -\n sip:def\n\nTelephone\ndef@home.com\n/Telephone\n -\n sip:def@home.com\n\nTelephone\ndef@home.com \n/Telephone\n -\n sip:def@home.com\n\nTelephone\n def@home.com\n/Telephone\n -\n sip:%20def@home.com\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneDirectory\n\n    \nTitle\nMenu\n/Title\n\n    \nDirectoryEntry\n\n        \nName\nSupport\n/Name\n\n        \nTelephone\n444\n/Telephone\n\n    \n/DirectoryEntry\n\n    \nDirectoryEntry\n\n        \nName\nSales\n/Name\n\n        \nTelephone\n445\n/Telephone\n\n    \n/DirectoryEntry\n\n\n/SnomIPPhoneDirectory\n\n\n\n\nResult", 
            "title": "SnomIPPhoneDirectory"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneDirectory/#snomipphonedirectory", 
            "text": "Danger  This tag will be deprectaed in future versions    Demo  Try on your phone   The  Telephone  tag content will be translated using the following rules:   Whitespace character at the start and between characters will be translated to its URL-encoded form  %20 .  If not written,  sip:  will be added at the start URI  If user field contain number only and no domain defined, Registrar will be added as domain.  If user field contain number only and ended with whitespace,  %20  will be added between the user field and  @  sign.  If user field contain text or sign and no domain defined, no domain will be added.  For more info about sip format, can be seen here [http://tools.ietf.org/html/rfc3261#section-19.1.1 RFC3261]   Telephone sip:123 /Telephone  -  sip:123@abc.com Telephone 123 /Telephone  -  sip:123@abc.com Telephone  123 /Telephone  -  sip:%20123@abc.com Telephone 123  /Telephone  -  sip:123%20@abc.com Telephone def /Telephone  -  sip:def Telephone def@home.com /Telephone  -  sip:def@home.com Telephone def@home.com  /Telephone  -  sip:def@home.com Telephone  def@home.com /Telephone  -  sip:%20def@home.com  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneDirectory \n     Title Menu /Title \n     DirectoryEntry \n         Name Support /Name \n         Telephone 444 /Telephone \n     /DirectoryEntry \n     DirectoryEntry \n         Name Sales /Name \n         Telephone 445 /Telephone \n     /DirectoryEntry  /SnomIPPhoneDirectory  Result", 
            "title": "SnomIPPhoneDirectory"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneInput/", 
            "text": "SnomIPPhoneInput\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nPhone differentiate between two characters input by the time between the the release of the first key and press of the second key.\n\n\nThe default value can bypass the input flag. This mean telephone can still send character even if the character can't be entered through phone keys. As example text as default value can still be send when number input flag is chosen.\n\n\nThe default value will be directly replaced with \n*\n character on password and numeric password input flag. \n\n\nIf no input flag defined the normal text input flag will be chosen.\n\n\nYou can define the character given from a key by changing these two setting, \nchars in lower case\n and \nchars in upper case setting\n.\n\n\nPlease note that, that the defined character(s) must be supported by the phone PUI language.\n\n\n\n\nExample for URL tag:\n\n\nUrl\nhttp://example.com/example.php?myvar=__X__\n/Url\n[...] \nInputToken\n__X__\n/InputToken\n\n\nUrl\nhttp://example.com/example.php#var:foo=$$$BAR$$$\n/Url\n[...]\nInputToken\n$$$BAR$$$\n/InputToken\n\n\n\n\nInput flag:\n\n\n\n\n\n\n\n\nInput flag\n\n\nInput flag description\n\n\nOption to change input mode\n\n\nDefault input mode\n\n\n\n\n\n\n\n\n\n\na\n\n\nnormal text\n\n\nAll modes are selectable and working\n\n\nlowercase\n\n\n\n\n\n\nt\n\n\ntelephone number\n\n\nAll modes are selectable but not working\n\n\nnumber\n\n\n\n\n\n\nn\n\n\nnumber\n\n\nno mode available\n\n\nnumber\n\n\n\n\n\n\ne\n\n\nnumber with text\n\n\nAll modes are selectable and working\n\n\nnumber\n\n\n\n\n\n\nu\n\n\nuppercase text\n\n\nnumber mode is show but can't be chosen\n\n\nuppercase\n\n\n\n\n\n\nl\n\n\nlowercase text\n\n\nuppercase mode is show but can't be chosen\n\n\nlowercase\n\n\n\n\n\n\np\n\n\npassword\n\n\nAll modes are selectable and working\n\n\nlowercase\n\n\n\n\n\n\npn\n\n\nnummeric password\n\n\nAll modes are selectable and working\n\n\nnumber\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\nAvoid to input following sequence:\n\n\n\n\nwarm start: **##\n\n\ncold start: **#*\n\n\nreset values: * volume+ * volume- # (snom 3xx series only)\n\n\n\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nSnomIPPhoneInput\n\n\nUrl\nhttp://example.com/example.php?myvar=__X__\n/Url\n\n\nInputItem\n\n    \nDisplayName\nTitle\n/DisplayName\n\n    \nInputToken\n__X__\n/InputToken\n\n    \nDefaultValue\nInput\n/DefaultValue\n\n    \nInputFlags\na\n/InputFlags\n\n\n/InputItem\n\n\n/SnomIPPhoneInput\n\n\n\n\nResult\n\n\n\n\nInputMask\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nWhen using this tag you limit the position and input mode on this object. But at the same time this also limit characters \n9\n, \na\n and \nA\n, which used to be mask.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneInput xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n\nUrl\nsnom://mb_nop#action_ifc:date_time=set,time=__Y__\n/Url\n\n\nInputItem\n\n    \nDisplayName\nTime:$(time)\n/DisplayName\n\n    \nInputToken\n__Y__\n/InputToken\n\n    \nInputMask\n99:99\n/InputMask\n\n    \nInputFlags\na\n/InputFlags\n\n    \nDefaultValue\n00:00\n/DefaultValue\n\n\n/InputItem\n\n\n/SnomIPPhoneInput\n\n\n\n\nResult", 
            "title": "SnomIPPhoneInput"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneInput/#snomipphoneinput", 
            "text": "Demo  Try on your phone    Phone differentiate between two characters input by the time between the the release of the first key and press of the second key.  The default value can bypass the input flag. This mean telephone can still send character even if the character can't be entered through phone keys. As example text as default value can still be send when number input flag is chosen.  The default value will be directly replaced with  *  character on password and numeric password input flag.   If no input flag defined the normal text input flag will be chosen.  You can define the character given from a key by changing these two setting,  chars in lower case  and  chars in upper case setting .  Please note that, that the defined character(s) must be supported by the phone PUI language.   Example for URL tag:  Url http://example.com/example.php?myvar=__X__ /Url [...]  InputToken __X__ /InputToken  Url http://example.com/example.php#var:foo=$$$BAR$$$ /Url [...] InputToken $$$BAR$$$ /InputToken  Input flag:     Input flag  Input flag description  Option to change input mode  Default input mode      a  normal text  All modes are selectable and working  lowercase    t  telephone number  All modes are selectable but not working  number    n  number  no mode available  number    e  number with text  All modes are selectable and working  number    u  uppercase text  number mode is show but can't be chosen  uppercase    l  lowercase text  uppercase mode is show but can't be chosen  lowercase    p  password  All modes are selectable and working  lowercase    pn  nummeric password  All modes are selectable and working  number      Info  Avoid to input following sequence:   warm start: **##  cold start: **#*  reset values: * volume+ * volume- # (snom 3xx series only)    ?xml version= 1.0  encoding= utf-8 ?  SnomIPPhoneInput  Url http://example.com/example.php?myvar=__X__ /Url  InputItem \n     DisplayName Title /DisplayName \n     InputToken __X__ /InputToken \n     DefaultValue Input /DefaultValue \n     InputFlags a /InputFlags  /InputItem  /SnomIPPhoneInput  Result", 
            "title": "SnomIPPhoneInput"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneInput/#inputmask", 
            "text": "Demo  Try on your phone   When using this tag you limit the position and input mode on this object. But at the same time this also limit characters  9 ,  a  and  A , which used to be mask.  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneInput xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  Url snom://mb_nop#action_ifc:date_time=set,time=__Y__ /Url  InputItem \n     DisplayName Time:$(time) /DisplayName \n     InputToken __Y__ /InputToken \n     InputMask 99:99 /InputMask \n     InputFlags a /InputFlags \n     DefaultValue 00:00 /DefaultValue  /InputItem  /SnomIPPhoneInput  Result", 
            "title": "InputMask"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneImage/", 
            "text": "SnomIPPhoneImage\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\nIn order to convert image into base64 format use online convertors, i.e. : \nImage Converter\n.\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneImage\n\n    \nLocationX\n0\n/LocationX\n\n    \nLocationY\n0\n/LocationY\n\n    \nData encoding=\nbase64\n\nQk0+BAAAAAAAAD4AAAAoAAAAgAAAAEAAAAABAAEAAAAAAAAEAABhDwAAYQ8AAAIAAAAAAAAAAAAA\nAP///wAAAqEUUB//1SAAAAAAAAAAAAFAAh/wnnVSgAAAAAAAAAAAoAKv/7w21AAAAAAAAAAAACgB\nBf/9duqgAAAAAAAAAABFgBEf//+1CAAAAAAAAAAAAWAEh46f31AAAAAAAAAAAAVACC4+v36VAAAA\nAAAAAAABUgB++/vX5AAAEAAAAAAAAAAJF/vj/qkAAAQAAAAAAAAAASAPb//LAAAIAAAAAAAAAAJq\no/r6sQAAFQAAAAAAAAABxKzy+7oAAAoAAAAAAAAAAN1jjf/6QAAqAAAAAAAAAAA+nHn/vQAACoAA\n[...]\nAAAAAAAAAAAH/3/+AAAAAAAAAAAAAAAAB////wAAAAAAAAAAAAAAAAfX/v8AAAAAAAAAAAAAAAAH\nw/w/AAAAAAAAAAAAAAAAA8P4HgAAAAAAAAAAAAAAAAP//D4AAAAAAAAAAAAAAAAB///8AAAAAAAA\nAAAAAAAAAP//+AAAAAAAAAAAAAAAAAA///AAAAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAAAAAAAP/\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAA\n\n\n/Data\n\n\n/SnomIPPhoneImage\n\n\n\n\nResult", 
            "title": "SnomIPPhoneImage"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneImage/#snomipphoneimage", 
            "text": "Demo  Try on your phone   In order to convert image into base64 format use online convertors, i.e. :  Image Converter .  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneImage \n     LocationX 0 /LocationX \n     LocationY 0 /LocationY \n     Data encoding= base64 \nQk0+BAAAAAAAAD4AAAAoAAAAgAAAAEAAAAABAAEAAAAAAAAEAABhDwAAYQ8AAAIAAAAAAAAAAAAA\nAP///wAAAqEUUB//1SAAAAAAAAAAAAFAAh/wnnVSgAAAAAAAAAAAoAKv/7w21AAAAAAAAAAAACgB\nBf/9duqgAAAAAAAAAABFgBEf//+1CAAAAAAAAAAAAWAEh46f31AAAAAAAAAAAAVACC4+v36VAAAA\nAAAAAAABUgB++/vX5AAAEAAAAAAAAAAJF/vj/qkAAAQAAAAAAAAAASAPb//LAAAIAAAAAAAAAAJq\no/r6sQAAFQAAAAAAAAABxKzy+7oAAAoAAAAAAAAAAN1jjf/6QAAqAAAAAAAAAAA+nHn/vQAACoAA\n[...]\nAAAAAAAAAAAH/3/+AAAAAAAAAAAAAAAAB////wAAAAAAAAAAAAAAAAfX/v8AAAAAAAAAAAAAAAAH\nw/w/AAAAAAAAAAAAAAAAA8P4HgAAAAAAAAAAAAAAAAP//D4AAAAAAAAAAAAAAAAB///8AAAAAAAA\nAAAAAAAAAP//+AAAAAAAAAAAAAAAAAA///AAAAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAAAAAAAP/\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAA /Data  /SnomIPPhoneImage  Result", 
            "title": "SnomIPPhoneImage"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneImageFile/", 
            "text": "SnomIPPhoneImageFile\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nThe given image can only twice as big as the telephone resolution. as an example, for snom820 with resolution 320x240 can only show picture when its width lower than 640 and its height lower than 480\n\n\nIf image width or height bigger than telephone resolution, then image is scaled until both width and height lower/equal to display resolution.\n\n\nSupported image extension are png,jpg,bmp\n\n\nMinibrowser also support transparency in png file\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneImageFile\n\n\nLocationX\n30\n/LocationX\n\n\nLocationY\n-2\n/LocationY\n\n\nURL\nhttp://docs.snom.io/xml_minibrowser/examples/img/webcam.jpg\n/URL\n\n\n/SnomIPPhoneImageFile\n\n\n\n\nResult", 
            "title": "SnomIPPhoneImageFile"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneImageFile/#snomipphoneimagefile", 
            "text": "Demo  Try on your phone    The given image can only twice as big as the telephone resolution. as an example, for snom820 with resolution 320x240 can only show picture when its width lower than 640 and its height lower than 480  If image width or height bigger than telephone resolution, then image is scaled until both width and height lower/equal to display resolution.  Supported image extension are png,jpg,bmp  Minibrowser also support transparency in png file   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneImageFile  LocationX 30 /LocationX  LocationY -2 /LocationY  URL http://docs.snom.io/xml_minibrowser/examples/img/webcam.jpg /URL  /SnomIPPhoneImageFile  Result", 
            "title": "SnomIPPhoneImageFile"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneBatch/", 
            "text": "SnomIPPhoneBatch\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch\n\n    \nSnomIPPhoneMenu id=\nmenu\n\n        \nTitle\nMenu\n/Title\n\n        \nMenuItem name=\nshow image\n\n            \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/SnomIPPhoneBatch.xml#sub=*[@id=\nimageFile\n]\n/URL\n\n        \n/MenuItem\n\n        \nMenuItem name=\ngo somewhere else\n\n            \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/SnomIPPhoneText.xml\n/URL\n\n        \n/MenuItem\n\n    \n/SnomIPPhoneMenu\n\n    \nSnomIPPhoneImageFile id=\nimageFile\n\n        \nLocationX\n0\n/LocationX\n\n        \nLocationY\n0\n/LocationY\n\n        \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/img/webcam.jpg\n/URL\n\n    \n/SnomIPPhoneImageFile\n\n\n/SnomIPPhoneBatch\n\n\n\n\nResult", 
            "title": "SnomIPPhoneBatch"
        }, 
        {
            "location": "/xml_minibrowser/examples/SnomIPPhoneBatch/#snomipphonebatch", 
            "text": "Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch \n     SnomIPPhoneMenu id= menu \n         Title Menu /Title \n         MenuItem name= show image \n             URL http://docs.snom.io/xml_minibrowser/examples/xml/SnomIPPhoneBatch.xml#sub=*[@id= imageFile ] /URL \n         /MenuItem \n         MenuItem name= go somewhere else \n             URL http://docs.snom.io/xml_minibrowser/examples/xml/SnomIPPhoneText.xml /URL \n         /MenuItem \n     /SnomIPPhoneMenu \n     SnomIPPhoneImageFile id= imageFile \n         LocationX 0 /LocationX \n         LocationY 0 /LocationY \n         URL http://docs.snom.io/xml_minibrowser/examples/img/webcam.jpg /URL \n     /SnomIPPhoneImageFile  /SnomIPPhoneBatch  Result", 
            "title": "SnomIPPhoneBatch"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/", 
            "text": "Main Subelements examples\n #\n\n\nConditional blocks\n #\n\n\nThe Snom Minibrowser supports also conditional code block that can be executed after a condition evaluation.\nConditional blocks are implemented trough the tags \nIf\n, \nElif\n and \nElse\n\n\n\n\nDemo\n\n\n\n\nExample1:\n \nTry on your phone\n\n\nExample2:\n \nTry on your phone\n\n\nExample3:\n \nTry on your phone\n\n\n\n\n\n\n\n\nThese tags actually can be written almost anywhere (except as child tag of \n).\n\n\nThe test in condition attribute are case sensitive.\n\n\nThe white space will also be accounted comparison if exist on operand(s).\n\n\nCharacter or word(s) comparison can use only these operators \n==\n or \n!=\n. \n\n\nNumber comparison can use those operators and also these additional operators \n, \n, \n=\n, \n=\n.\n\n\nUsing number comparison additional operators on alphabet or word(s) comparison will unexpected result.\n\n\nWrite these operators \n=\n, \n=\n,\n!=\n in correct order.\n\n\n\n\nConditionals example 1\n #\n\n\nSimple use of tags:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nIf condition=\n$(set:phone_type)==snomD375\n\n        \nTitle\nSnom D375\n/Title\n\n    \n/If\n\n    \nElif condition=\n$(set:phone_type)==snomD765\n\n        \nTitle\nSnom D765\n/Title\n\n    \n/Elif\n\n    \nElse\n\n        \nTitle\nUnknown Snom phone\n/Title\n\n    \n/Else\n\n    \nText\nSnom phone sample text\n/Text\n\n\n/SnomIPPhoneText\n\n\n\n\nResult\n\n\n\n\nConditionals example 2\n #\n\n\nShow different text on different Snom phone model:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nIf condition=\n$(set:phone_type)==snomD375\n\n        \nTitle\nSnom D375\n/Title\n\n        \nText\nYour phone is a Snom D375\n/Text\n\n    \n/If\n\n    \nElif condition=\n$(set:phone_type)==snomD765\n\n        \nTitle\nSnom D765\n/Title\n\n        \nText\nYour phone is a Snom D765\n/Text\n\n    \n/Elif\n\n    \nElse\n\n        \nTitle\nUnknown Snom phone\n/Title\n\n        \nText\nSnom phone not recognised\n/Text\n\n    \n/Else\n\n\n/SnomIPPhoneText\n\n\n\n\nResult\n\n\n\n\nConditionals example 3\n #\n\n\nTest on some operators:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nMenu name=\nMenu1\n\n\n!-- TRUE --\n   \nIf condition=\na==a\nMenuItem name=\nTRUE\na==a\n /\n/If\n\n        \nElse\nMenuItem name=\nFALSE\na==a\n /\n/Else\n\n\n!-- FALSE --\n  \nIf condition=\na==A\nMenuItem name=\nTRUE\na==A\n /\n/If\n\n        \nElse\nMenuItem name=\nFALSE\na==A\n /\n/Else\n\n\n!-- FALSE --\n  \nIf condition=\n!a==a\nMenuItem name=\nTRUE\n!a==a\n /\n/If\n\n        \nElse\nMenuItem name=\nFALSE\n!a==a\n /\n/Else\n\n\n!-- FALSE --\n  \nIf condition=\n a==a\nMenuItem name=\nTRUE\n a==a\n /\n/If\n\n        \nElse\nMenuItem name=\nFALSE\n a==a\n /\n/Else\n\n\n!-- TRUE --\n   \nIf condition=\n 10\n=10\n \nMenuItem name=\nTRUE\n 10\n=10\n /\n/If\n\n        \nElse\nMenuItem name=\nFALSE\n 10\n=10\n /\n/Else\n\n\n!-- TRUE --\n   \nIf condition=\n10\n= 10\nMenuItem name=\nTRUE\n10\n= 10\n /\n/If\n\n        \nElse\nMenuItem name=\nFALSE\n10\n= 10\n /\n/Else\n\n    \n/Menu\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult\n\n\n\n\nRepeat\n #\n\n\nIt is recommended to use unique token. If one token contain another token this will create unexpected result.\n\n\n\n\nWarning\n\n\n\n\nGood tocken:\n token=\"/__NAME__/__URL__/\"\n\n\nBad tocken:\n token=\"/_name_/_file_name_/\"\n\n\n\n\n\n\n\n\nDemo\n\n\n\n\nExample1:\n \nTry on your phone\n\n\nExample2:\n \nTry on your phone\n\n\n\n\n\n\nRepeat example 1\n #\n\n\nExample code using values attribute\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nRepeat token=\n/__NAME__/__URL__/\n values=\n|foo|http://foo.com|bar|http://bar.com|\n\n        \nMenuItem name=\n__NAME__\n\n            \nUrl\n__URL__\n/Url\n\n        \n/MenuItem\n\n    \n/Repeat\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult\n\n\n\n\nRepeat example 2\n #\n\n\nExample Code using \nvar_ifc\n attribute\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nTitle\nvar_ifc test\n/Title\n\n    \nRepeat token=\n|__state__|__name__|__file_name__|\n var_ifc=\nlang.pui.*\n\n        \nif condition=\n__state__==active\n\n            \nMenuItem name=\n$(x_o:$(condition:__state__==active)) __name__(__file_name__)\n sel=\ntrue\n/\n\n        \n/if\n\n        \nelse\n\n            \nMenuItem name=\n$(x_o:$(condition:__state__==active)) __name__(__file_name__)\n sel=\nfalse\n/\n\n        \n/else\n\n    \n/Repeat\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult\n\n\n\n\nFetch\n #\n\n\n\n\nDemo\n\n\n\n\nTry on your phone\n\n\n\n\n\n\n\n\nUse 1 as value for the of mil attribute to make phone fetch the url as fast as possible\n\n\nThe real Minimum value for 'mil' attribute depend on phone type and file load time.\n\n\n\n\n\n\nAccuracy of fetch tag is also vary from phone type and file load time. Because of that, it is not recommended to use fetch tag to measure the time.\n\n\nFetch\n with empty value will not load anything.\n\n\n\n\nFetch example, first page\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\n1st page\n/Title\n\n    \nText\nThis text shown only for 4 second\n/Text\n\n    \nfetch mil=\n4000\nhttp://docs.snom.io/xml_minibrowser/examples/xml/Fetch2.xml\n/fetch\n\n\n/SnomIPPhoneText\n\n\n\n\nFetch example, second page\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\n2nd page\n/Title\n\n    \nText\nBye bye!\n/Text\n\n    \nFetch mil=\n4000\nsnom://mb_exit\n/Fetch\n\n\n/SnomIPPhoneText\n\n\n\n\nResult\n\n\n\n\nLed\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n\n\nThe changed led is not listed on phone \nstate_of_gui.htm\n web page\n\n\nIf led have only one colour, this will be triggered by any valid value from Led tag.\n\n\nChassis led and line led have different behaviour based on value of led tag and value of color attribute \n\n\nLed tag value of \nredgreen\n and \ngreenorange\n can be activated if:\n\n\nLed is multi color\n\n\nvalue of type blink (\nblink\n, \nblinkfast\n, and \nblinkslow\n included)\n\n\n\n\n\n\n\n\nLed example: led on\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\nLED Control Feature\n/Title\n\n    \nText\nThis sample page demonstrates the Minibrowser LED control feature.\n/Text\n\n    \nLed number=\n1\nOn\n/Led\n\n    \nLed number=\n2\nblink\n/Led\n\n    \nLed number=\n3\nblinkfast\n/Led\n\n    \nLed number=\n4\nblinkslow\n/Led\n\n    \nLed number=\n5\n color=\ngreen\non\n/Led\n\n    \nSoftKeyItem\n\n        \nName\nF1\n/Name\n\n        \nLabel\nOff\n/Label\n\n        \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/Led-off.xml\n/URL\n\n    \n/SoftKeyItem\n\n    \nSoftKeyItem\n\n        \nName\nF2\n/Name\n\n        \nLabel\nExit\n/Label\n\n        \nURL\nsnom://mb_exit\n/URL\n\n    \n/SoftKeyItem\n \n\n/SnomIPPhoneText\n\n\n\n\nLed example: led off\n #\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneText\n\n    \nTitle\nLED Control Feature\n/Title\n\n    \nText\nThis sample page demonstrates the Minibrowser LED control feature.\n/Text\n\n    \nLed number=\n1\nOff\n/Led\n\n    \nLed number=\n2\nOff\n/Led\n\n    \nLed number=\n3\nOff\n/Led\n\n    \nLed number=\n4\nOff\n/Led\n\n    \nLed number=\n5\n color=\ngreen\nOff\n/Led\n\n    \nSoftKeyItem\n\n        \nName\nF1\n/Name\n\n        \nLabel\nOn\n/Label\n\n        \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/Led.xml\n/URL\n\n    \n/SoftKeyItem\n    \n    \nSoftKeyItem\n\n        \nName\nF2\n/Name\n\n        \nLabel\nExit\n/Label\n\n        \nURL\nsnom://mb_exit\n/URL\n\n    \n/SoftKeyItem\n    \n\n/SnomIPPhoneText", 
            "title": "Main sub elements"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#main_subelements_examples", 
            "text": "", 
            "title": "Main Subelements examples"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#conditional_blocks", 
            "text": "The Snom Minibrowser supports also conditional code block that can be executed after a condition evaluation.\nConditional blocks are implemented trough the tags  If ,  Elif  and  Else   Demo   Example1:   Try on your phone  Example2:   Try on your phone  Example3:   Try on your phone     These tags actually can be written almost anywhere (except as child tag of  ).  The test in condition attribute are case sensitive.  The white space will also be accounted comparison if exist on operand(s).  Character or word(s) comparison can use only these operators  ==  or  != .   Number comparison can use those operators and also these additional operators  ,  ,  = ,  = .  Using number comparison additional operators on alphabet or word(s) comparison will unexpected result.  Write these operators  = ,  = , !=  in correct order.", 
            "title": "Conditional blocks"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#conditionals_example_1", 
            "text": "Simple use of tags:  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     If condition= $(set:phone_type)==snomD375 \n         Title Snom D375 /Title \n     /If \n     Elif condition= $(set:phone_type)==snomD765 \n         Title Snom D765 /Title \n     /Elif \n     Else \n         Title Unknown Snom phone /Title \n     /Else \n     Text Snom phone sample text /Text  /SnomIPPhoneText  Result", 
            "title": "Conditionals example 1"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#conditionals_example_2", 
            "text": "Show different text on different Snom phone model:  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     If condition= $(set:phone_type)==snomD375 \n         Title Snom D375 /Title \n         Text Your phone is a Snom D375 /Text \n     /If \n     Elif condition= $(set:phone_type)==snomD765 \n         Title Snom D765 /Title \n         Text Your phone is a Snom D765 /Text \n     /Elif \n     Else \n         Title Unknown Snom phone /Title \n         Text Snom phone not recognised /Text \n     /Else  /SnomIPPhoneText  Result", 
            "title": "Conditionals example 2"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#conditionals_example_3", 
            "text": "Test on some operators:  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Menu name= Menu1  !-- TRUE --     If condition= a==a MenuItem name= TRUE a==a  / /If \n         Else MenuItem name= FALSE a==a  / /Else  !-- FALSE --    If condition= a==A MenuItem name= TRUE a==A  / /If \n         Else MenuItem name= FALSE a==A  / /Else  !-- FALSE --    If condition= !a==a MenuItem name= TRUE !a==a  / /If \n         Else MenuItem name= FALSE !a==a  / /Else  !-- FALSE --    If condition=  a==a MenuItem name= TRUE  a==a  / /If \n         Else MenuItem name= FALSE  a==a  / /Else  !-- TRUE --     If condition=  10 =10   MenuItem name= TRUE  10 =10  / /If \n         Else MenuItem name= FALSE  10 =10  / /Else  !-- TRUE --     If condition= 10 = 10 MenuItem name= TRUE 10 = 10  / /If \n         Else MenuItem name= FALSE 10 = 10  / /Else \n     /Menu  /SnomIPPhoneMenu  Result", 
            "title": "Conditionals example 3"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#repeat", 
            "text": "It is recommended to use unique token. If one token contain another token this will create unexpected result.   Warning   Good tocken:  token=\"/__NAME__/__URL__/\"  Bad tocken:  token=\"/_name_/_file_name_/\"     Demo   Example1:   Try on your phone  Example2:   Try on your phone", 
            "title": "Repeat"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#repeat_example_1", 
            "text": "Example code using values attribute  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Repeat token= /__NAME__/__URL__/  values= |foo|http://foo.com|bar|http://bar.com| \n         MenuItem name= __NAME__ \n             Url __URL__ /Url \n         /MenuItem \n     /Repeat  /SnomIPPhoneMenu  Result", 
            "title": "Repeat example 1"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#repeat_example_2", 
            "text": "Example Code using  var_ifc  attribute  ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     Title var_ifc test /Title \n     Repeat token= |__state__|__name__|__file_name__|  var_ifc= lang.pui.* \n         if condition= __state__==active \n             MenuItem name= $(x_o:$(condition:__state__==active)) __name__(__file_name__)  sel= true / \n         /if \n         else \n             MenuItem name= $(x_o:$(condition:__state__==active)) __name__(__file_name__)  sel= false / \n         /else \n     /Repeat  /SnomIPPhoneMenu  Result", 
            "title": "Repeat example 2"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#fetch", 
            "text": "Demo   Try on your phone     Use 1 as value for the of mil attribute to make phone fetch the url as fast as possible  The real Minimum value for 'mil' attribute depend on phone type and file load time.    Accuracy of fetch tag is also vary from phone type and file load time. Because of that, it is not recommended to use fetch tag to measure the time.  Fetch  with empty value will not load anything.", 
            "title": "Fetch"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#fetch_example_first_page", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title 1st page /Title \n     Text This text shown only for 4 second /Text \n     fetch mil= 4000 http://docs.snom.io/xml_minibrowser/examples/xml/Fetch2.xml /fetch  /SnomIPPhoneText", 
            "title": "Fetch example, first page"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#fetch_example_second_page", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title 2nd page /Title \n     Text Bye bye! /Text \n     Fetch mil= 4000 snom://mb_exit /Fetch  /SnomIPPhoneText  Result", 
            "title": "Fetch example, second page"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#led", 
            "text": "Demo  Try on your phone    The changed led is not listed on phone  state_of_gui.htm  web page  If led have only one colour, this will be triggered by any valid value from Led tag.  Chassis led and line led have different behaviour based on value of led tag and value of color attribute   Led tag value of  redgreen  and  greenorange  can be activated if:  Led is multi color  value of type blink ( blink ,  blinkfast , and  blinkslow  included)", 
            "title": "Led"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#led_example_led_on", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title LED Control Feature /Title \n     Text This sample page demonstrates the Minibrowser LED control feature. /Text \n     Led number= 1 On /Led \n     Led number= 2 blink /Led \n     Led number= 3 blinkfast /Led \n     Led number= 4 blinkslow /Led \n     Led number= 5  color= green on /Led \n     SoftKeyItem \n         Name F1 /Name \n         Label Off /Label \n         URL http://docs.snom.io/xml_minibrowser/examples/xml/Led-off.xml /URL \n     /SoftKeyItem \n     SoftKeyItem \n         Name F2 /Name \n         Label Exit /Label \n         URL snom://mb_exit /URL \n     /SoftKeyItem   /SnomIPPhoneText", 
            "title": "Led example: led on"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_subelements/#led_example_led_off", 
            "text": "?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneText \n     Title LED Control Feature /Title \n     Text This sample page demonstrates the Minibrowser LED control feature. /Text \n     Led number= 1 Off /Led \n     Led number= 2 Off /Led \n     Led number= 3 Off /Led \n     Led number= 4 Off /Led \n     Led number= 5  color= green Off /Led \n     SoftKeyItem \n         Name F1 /Name \n         Label On /Label \n         URL http://docs.snom.io/xml_minibrowser/examples/xml/Led.xml /URL \n     /SoftKeyItem     \n     SoftKeyItem \n         Name F2 /Name \n         Label Exit /Label \n         URL snom://mb_exit /URL \n     /SoftKeyItem      /SnomIPPhoneText", 
            "title": "Led example: led off"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_elements_attributes/", 
            "text": "Main Elements attributes\n #\n\n\nselectable\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n selectable=\noff\n\n    \nMenu name=\nm1\n\n        \nMenuItem name=\nmi1\n/MenuItem\n\n        \nMenuItem name=\nmi2\n/MenuItem\n\n        \nMenuItem name=\nmi3\n/MenuItem\n\n    \n/Menu\n\n    \nMenu name=\nm2\n\n        \nMenuItem name=\nmi1\n/MenuItem\n\n        \nMenuItem name=\nmi2\n/MenuItem\n\n        \nMenuItem name=\nmi3\n/MenuItem\n\n    \n/Menu\n\n    \nMenu name=\nm3\n\n        \nMenuItem name=\nmi1\n/MenuItem\n\n        \nMenuItem name=\nmi2\n/MenuItem\n\n        \nMenuItem name=\nmi3\n/MenuItem\n\n    \n/Menu\n\n    \nMenu name=\nm4\n/Menu\n\n    \nMenu name=\nm5\n/Menu\n\n    \nMenu name=\nm6\n/Menu\n\n    \nMenu name=\nm7\n/Menu\n\n\n/SnomIPPhoneMenu\n\n\n\n\nsort\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneMenu xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n sort=\nyes\n\n    \nMenuItem name=\nz line 1\n/MenuItem\n\n    \nMenuItem name=\nb line 2\n/MenuItem\n\n    \nMenuItem name=\no line 3\n/MenuItem\n\n    \nMenuItem name=\nk line 4\n/MenuItem\n\n\n/SnomIPPhoneMenu\n\n\n\n\nResult\n\n\n\n\nstate\n #\n\n\n\n\nDemo\n\n\nTry on your phone\n\n\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nSnomIPPhoneBatch xmlns:xsi=\nhttp://www.w3.org/2001/XMLSchema-instance\n\n    xsi:noNamespaceSchemaLocation=\n../minibrowser_test.xsd\n\n    \nSnomIPPhoneMenu id=\nmenu1\n\n        \nMenuItem name=\nstate relevant\n\n            \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/state.xml.tpl#sub=*[@id=\nrelevant\n])\n/URL\n\n        \n/MenuItem\n\n        \nMenuItem name=\nstate only_mb\n\n            \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/state.xml.tpl#sub=*[@id=\nonly_mb\n])\n/URL\n\n        \n/MenuItem\n\n        \nMenuItem name=\nstate others_except_mb\n\n            \nURL\nhttp://docs.snom.io/xml_minibrowser/examples/xml/state.xml.tpl#sub=*[@id=\nothers_except_mb\n])\n/URL\n\n        \n/MenuItem\n\n    \n/SnomIPPhoneMenu\n\n    \nSnomIPPhoneText id=\nrelevant\n state=\nrelevant\n\n        \nText\nstate = relevant \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\nonly_mb\n state=\nonly_mb\n\n        \nText\nstate = only_mb \n/Text\n\n    \n/SnomIPPhoneText\n\n    \nSnomIPPhoneText id=\nothers_except_mb\n state=\nothers_except_mb\n\n        \nText\nstate = others_except_mb \n/Text\n\n    \n/SnomIPPhoneText\n\n\n/SnomIPPhoneBatch\n\n\n\n\n\n\nInfo\n\n\nTo test this scenario you can setup 2 cases:\n\n\nCase 1\n\n\n\n\nConfigure a function key as a speed dial to dial another extension\n\n\nActivate this XML application\n\n\nPress the speed dial after selecting a state\n\n\n\n\nCase 2\n\n\n\n\nCall the phone from another phone\n\n\nOn the called phone activate this XML application\n\n\nPress the \nCANCEL\n key after selecting a state", 
            "title": "Main elements attributes"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_elements_attributes/#main_elements_attributes", 
            "text": "", 
            "title": "Main Elements attributes"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_elements_attributes/#selectable", 
            "text": "Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  selectable= off \n     Menu name= m1 \n         MenuItem name= mi1 /MenuItem \n         MenuItem name= mi2 /MenuItem \n         MenuItem name= mi3 /MenuItem \n     /Menu \n     Menu name= m2 \n         MenuItem name= mi1 /MenuItem \n         MenuItem name= mi2 /MenuItem \n         MenuItem name= mi3 /MenuItem \n     /Menu \n     Menu name= m3 \n         MenuItem name= mi1 /MenuItem \n         MenuItem name= mi2 /MenuItem \n         MenuItem name= mi3 /MenuItem \n     /Menu \n     Menu name= m4 /Menu \n     Menu name= m5 /Menu \n     Menu name= m6 /Menu \n     Menu name= m7 /Menu  /SnomIPPhoneMenu", 
            "title": "selectable"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_elements_attributes/#sort", 
            "text": "Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneMenu xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance  xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd  sort= yes \n     MenuItem name= z line 1 /MenuItem \n     MenuItem name= b line 2 /MenuItem \n     MenuItem name= o line 3 /MenuItem \n     MenuItem name= k line 4 /MenuItem  /SnomIPPhoneMenu  Result", 
            "title": "sort"
        }, 
        {
            "location": "/xml_minibrowser/examples/main_elements_attributes/#state", 
            "text": "Demo  Try on your phone   ?xml version= 1.0  encoding= UTF-8 ?  SnomIPPhoneBatch xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:noNamespaceSchemaLocation= ../minibrowser_test.xsd \n     SnomIPPhoneMenu id= menu1 \n         MenuItem name= state relevant \n             URL http://docs.snom.io/xml_minibrowser/examples/xml/state.xml.tpl#sub=*[@id= relevant ]) /URL \n         /MenuItem \n         MenuItem name= state only_mb \n             URL http://docs.snom.io/xml_minibrowser/examples/xml/state.xml.tpl#sub=*[@id= only_mb ]) /URL \n         /MenuItem \n         MenuItem name= state others_except_mb \n             URL http://docs.snom.io/xml_minibrowser/examples/xml/state.xml.tpl#sub=*[@id= others_except_mb ]) /URL \n         /MenuItem \n     /SnomIPPhoneMenu \n     SnomIPPhoneText id= relevant  state= relevant \n         Text state = relevant  /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= only_mb  state= only_mb \n         Text state = only_mb  /Text \n     /SnomIPPhoneText \n     SnomIPPhoneText id= others_except_mb  state= others_except_mb \n         Text state = others_except_mb  /Text \n     /SnomIPPhoneText  /SnomIPPhoneBatch   Info  To test this scenario you can setup 2 cases:  Case 1   Configure a function key as a speed dial to dial another extension  Activate this XML application  Press the speed dial after selecting a state   Case 2   Call the phone from another phone  On the called phone activate this XML application  Press the  CANCEL  key after selecting a state", 
            "title": "state"
        }, 
        {
            "location": "/xml_definitions/", 
            "text": "XML Definitions\n #\n\n\nSome phone settings can be defined using an XML definition, an XML definition is a ruleset (defined trough an XML syntax) specifying a particular setting behaviour.\n\n\nFor example you can customise the action taken during a key pressure (and the key release too), also you can instruct the phone to subscribe a SIP resource and then parse the XML body received into the in-dialog NOTIFY. The XML definition can setup various states and the phone can reacts to state changes and/or take action in different states.\n\n\nExample\n #\n\n\nThe following example XML code can be applied to a function key setting in order to create a SUBSCRIBE dialog and their NOTIFY parsing rules.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\n\ninitialization\n\n  \nstate value=\ninitial\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:424711@com.snom\n/\n\n\n/initialization\n\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\n\nNotifyParsingRules type=\napplies\n     \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n   \n\n/NotifyParsingRules\n   \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n     \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n   \n\n/NotifyParsingRules\n   \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n     \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n   \n\n/NotifyParsingRules\n   \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n     \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n   \n\n/NotifyParsingRules\n   \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n     \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n   \n\n/NotifyParsingRules\n  \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n     \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n   \n\n/NotifyParsingRules\n\n\n\naction\n   \n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ndial target=\n$(subscr_uri)\n when=\non press\n/\n \n\n/action\n\n\n\n\nstate(s)\n #\n\n\nstate\n and \nstates\n attributes are case sensitive and need to be written correctly (mostly lowercase). \nstates\n conditions can contain multiple states which are a comma-separated list, \naction\n and \nNotifyParsingRules\n elements will only be executed if the current state value matches one of these in the list.\n\n\nrequire\n #\n\n\nrequire\n attribute consists of a comparison sign and two operands on either side. Each operand consists of alphanumeric constant characters and placeholders for dynamic variable insertion. The placeholders start with a $-sign followed by a pair of brackets enclosing the variable name. Curly brackets are used for inserting the variables of all the contexts currently referred to (i.e. all the contexts named via the context-attribute) while parentheses are used for the local xml entity context. The variables may actually be variables but may also insert array-members or the state or type of an xml-entity. See these examples for more clarity:\n\n\n\n\n${type}==ResourceListBuddy\n: only use context-entities whose type is set to \"ResourceListBuddy\"\n\n\n${BuddyUri}==$(uri)\n: only use context-entities that have a variable named BuddyUri which is set to the same value as the one stored in the variable \"uri\" of this xml-entity\n\n\n${BuddyUri}==$(uris[$(index)])\n: similar to previous example, but right-side operand is an array. The variable $(index) is available in destination-requirements whenever the source is an array.\n\n\n\n\nSetting Toggle example\n #\n\n\nOur first example is about how to create a \"Settings Toggle\", which on the end would auto assign the current value; display the text for the particular button and translate the Text if an another language is being used.\n\n\nSimple Setting Toggle Button\n #\n\n\nAs the first step we need to define our XML Definition Code. To do so we need to write a \ngeneral\n element as the first line of our code:\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\n\n\nIn the \ngeneral\n element we write the information's which are required by the phone to create a function and assign it to an identity if required.The \ntype\n attribute is the name of our function and can be shown in the Phone User Interface as an Option or in some cases we use it to reference to this XML Definition code from another XML Definition code.\n\n\nThe next step would be to add the initialization and assign a state to our button:\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n\n/initialization\n\n\n\n\nThe \ninitialization\n element allows us to define an initial state for a button, a variable and/or an array. In this particular case we will just use the \nstate\n and give it the value \noff\n. Which means on boot up of the phone this button would be in state \noff\n.\n\n\nNow we are going to add the Actions which should happen when our Button is pressed. For this example we would like to execute a HTTP Request for the snom phone to change a setting. In this particular case to hide our outgoing number to \nanonymous\n and revert it back with a second press.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n\n/action\n\n\n\n\nAll our functionalities need to be put in the \naction\n element container. We wrote two lines of Code inside our action element, both of them are \nurl\n elements, which means they will execute HTTP Requests.The \ntarget\n attribute tells the phone which URL should be opened/executed, the \nwhen\n attribute says on which event the URL should be opened/executed and the last \nstates\n attribute is the condition in which state of the button should these action be execute.At the moment if you press this XML Definition Button, the phone will open the following URL: \nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n\n\n\n\nWarning\n\n\nThe URL \nhttp://localhost/settings.htm?settings=save\n is used to change the setting \nprivacy_out\n if your phone web server is secured with credentials you have to include such credentials into the URL: \nhttp://username:password@localhost/settings.htm?settings=save\n.\n\n\nIn case your phone has the \nadmin_mode\n disabled such URL will not work. In this case a workaround is to configure the \nservice mode credentials\n trough the settings \nservice_mode_login\n and \nservice_mode_password\n.\n\n\n\n\nBut at the moment the button will not change the state to \"ON\" on the press and each time it will execute the same above URL. That is why we need to add some intelligence to the button, so that on a press the state of the button changes and different actions get executed.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nAt this step we add the \nassign\n elements to our code, these elements are used to change the state of the Button and/or assign values to variables or arrays. Assign element has two sub-elements \nsource\n (where we define where the value is coming from) and \ndestination\n (where we define where to write/put our value to). \nassign\n has like all other action elements the two attributes to define on which event and in which state of the button should these assign action happen.\n\n\nassign when=\non press\n states=\noff\n\n  \nsource context=\nthis entity\n value=\non\n/\n\n  \ndestination context=\nthis entity\n id=\nstate\n/\n\n\n/assign\n\n\n\n\nIf the state of the Button is off and on press of that button, assign/set the value on to the variable state.\n\n\nNOTE:\n Depending of the value \nstate\n the LED of that Button will be ON or OFF. More about the LED control will be described in a future part.\n\n\nAuto assignment\n #\n\n\nBy using the above example you probably found out that, when the phone has been rebooted the button will get in the \nstate\n we defined in the \ninitialization\n tag. Even if the setting was already changed to a non-initial value. To get this solved we are going to add a \nassign\n element which would be executed \nafter-initialization\n.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nAs you see we added a new \nassign\n element to our XML Definition Code, which would be executed as soon as the initialization has been done (phone boot up). Also at this step we are facing another \ncontext\n in our \nsource\n element, which tell the phone look for variables in the phone \nsetting\n-s. Of course we needed also to define for which setting exactly are we looking, that's why we replaced the \nvalue\n attribute with the \nid\n attribute which is the name of our setting.\n\n\nassign when=\nafter initialization\n\n  \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n  \ndestination context=\nthis entity\n id=\nstate\n/\n\n\n/assign\n\n\n\n\nAfter phone boot up, get from the phone settings the current value for privacy_out and assign it to our \nstate\n variable.\n\n\nSo now when you reboot the phone, the button will check the current (last set) value in the settings and update the state of our button. But what will happen when someone changes the setting over the phones Web User Interface or it gets provisioned with a different value!? To get the \nstate\n update on setting changed we need to add one more attribute to our \nassign\n element.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nThe new attribute \ntype\n tells the phone that if a change on the phone happens, execute that particular \nassign\n element block again. In our case, get the new value from the setting \nprivacy_out\n and assign it to our \nstate\n variable.\n\n\nLabels\n #\n\n\nOur next step would be to show a text for our Button (snom 760 and 8xx phones). These texts are named \nlabels\n. As first we are going to take our previous code and add the required arrays for the labeling.\n\n\nNOTE:\n Virtual keys support two line labeling (only available on snom 8xx phones), Line Info Layer only supports one line labeling (only available on snom 760 and 82X phones). The example below is for virtual key labeling.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \narray name='label' separator=',' value='Hide own outgoing ID,off'/\n\n  \narray name='label_x' separator=',' value='5,5'/\n\n  \narray name='label_y' separator=',' value='2,15'/\n\n  \narray name='label_width' separator=',' value='74,95'/\n\n  \narray name='label_height' separator=',' value='13,24'/\n\n  \narray name='label_align' separator=',' value='left,center'/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nThe added arrays contain the Text we would like to display; the positions, lengths and alignments of the Texts. If we put the above XML Definition Code on our phone and press the button it will always display \n\"Hide own outgoing ID\"\n in upper-left corner and \n\"off\"\n in the middle, because there is no intelligence which changes the \n\"off\"\n value to \n\"on\"\n. That would be our next step. But to explain the arrays a bit better, the \nseparator\n: can be whatever you want (including \" \" -space). Also here a table for the above values:\n\n\n\n\n\n\n\n\nVariable name\n\n\n1st Value\n\n\n2nd Value\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nHide own outgoing ID\n\n\noff\n\n\n\n\n\n\nlabel_x\n\n\n5\n\n\n5\n\n\n\n\n\n\nlabel_y\n\n\n2\n\n\n15\n\n\n\n\n\n\nlabel_width\n\n\n74\n\n\n95\n\n\n\n\n\n\nlabel_height\n\n\n13\n\n\n24\n\n\n\n\n\n\nlabel_align\n\n\nleft\n\n\ncenter\n\n\n\n\n\n\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \narray name='label' separator=',' value='Hide own outgoing ID,off'/\n\n  \narray name='label_x' separator=',' value='5,5'/\n\n  \narray name='label_y' separator=',' value='2,15'/\n\n  \narray name='label_width' separator=',' value='74,95'/\n\n  \narray name='label_height' separator=',' value='13,24'/\n\n  \narray name='label_align' separator=',' value='left,center'/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nthis entity\n id=\nstate\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nNow we added an \nassign\n element which would get the \nstate\n value and assign or in our case rewrite the value no our label array on the second position (label[1]). \n\n\nNOTE: Arrays start to count with 0, which means \nlabel[0]\n would be \"Hide own outgoing ID\" and \nlabel[1]\n would be \"off\".\n\n\n\n\nLanguage support\n #\n\n\nOur last part for this example is to add Language support to our Text from our previous part. To do so we would need also to change our existing \nassign\n element for the label and add one more.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \narray name='label' separator=',' value='Hide own outgoing ID,off'/\n\n  \narray name='label_x' separator=',' value='5,5'/\n\n  \narray name='label_y' separator=',' value='2,15'/\n\n  \narray name='label_width' separator=',' value='74,95'/\n\n  \narray name='label_height' separator=',' value='13,24'/\n\n  \narray name='label_align' separator=',' value='left,center'/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign states=\noff\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign states=\non\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nWe replaced the \ntype\n with the \nstates\n attribute on our \nassign\n element, which will always get us the translation when the phone boots up and the button is in the current state. Also we changed the \ncontext\n attribute to \nlanguage\n which tells the phone to look for the translation of our \nid\n attribute. But we also need to handle the translation when the button is pressed, to do so, we are going to add two more \nassign\n elements.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \narray name='label' separator=',' value='Hide own outgoing ID,off'/\n\n  \narray name='label_x' separator=',' value='5,5'/\n\n  \narray name='label_y' separator=',' value='2,15'/\n\n  \narray name='label_width' separator=',' value='74,95'/\n\n  \narray name='label_height' separator=',' value='13,24'/\n\n  \narray name='label_align' separator=',' value='left,center'/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign states=\noff\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign states=\non\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context='language' id='on'/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context='language' id='off'/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nThe two new \nassign\n elements look similar to our XML Definition code from the part 1, where we are changing the value of the button \nstate\n. But with the difference that we are now putting the translated value into our \nlabel\n array on the second position. The above XML Definition code is just for the \nstate\n of our button. Now we are going to translate the \nlabel\n text from the first position and don't worry, since that part of our label is always static we just need to add one more \nassign\n for it.\n\n\ngeneral type=\nPrivacyToggle\n /\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \narray name='label' separator=',' value='Hide own outgoing ID,Off'/\n\n  \narray name='label_x' separator=',' value='5,5'/\n\n  \narray name='label_y' separator=',' value='2,15'/\n\n  \narray name='label_width' separator=',' value='74,95'/\n\n  \narray name='label_height' separator=',' value='13,24'/\n\n  \narray name='label_align' separator=',' value='left,center'/\n\n\n/initialization\n\n\naction\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=on\n when=\non press\n states=\noff\n/\n\n  \nurl target=\nhttp://localhost/settings.htm?settings=save\nprivacy_out=off\n when=\non press\n states=\non\n/\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nsetting\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign states=\noff\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign states=\non\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context='language' id='on'/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context='language' id='off'/\n\n    \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n  \n/assign\n\n  \nassign type=\nupdate on change\n when=\nafter initialization\n\n    \nsource context=\nlanguage\n id=\nprivacy_out\n/\n\n    \ndestination context=\nthis entity\n id=\nlabel[0]\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\non\n\n    \nsource context=\nthis entity\n value=\noff\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n  \nassign when=\non press\n states=\noff\n\n    \nsource context=\nthis entity\n value=\non\n/\n\n    \ndestination context=\nthis entity\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nThis assign looks similar to our XML Definition Code we done in part 2, with the difference that we are now looking for the translation of our Text and by assigning it on the label's first position.As you already saw as you were writing the above code, we now have the \nsource: context\n set to \nlanguage\n and we are searching for the value of our Option \nprivacy_out\n.\n\n\nNOTE:\n To find the keyword you need to be translated please search for your text in the below XML file and use the \nn\n attribute value to but as the \nid\n in the translation \nsource\n elements. \n\nSee the translation XML file at: http://provisioning.snom.com/config/snomlang-8.7.4/gui_lang_EN.xml\n\n\nExtension Monitoring example\n #\n\n\nThis example is about creating a XML Definition key which would monitor a remote extension and depending on its state light with different Color and performs different Actions on a Button press.\n\n\nPart 1: Busy Lamp Field\n #\n\n\nAs the first step we need to define our XML Definition Code. To do so we need to write a \ngeneral\n element as the first line of our code:\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\n\n\nIn the \ngeneral\n element we write the information's which are required by the phone to create a function and assign it to an identity.The \ntype\n attribute is the name of our function and can be shown in the Phone User Interface as an Option or in some cases we use it to reference to this XML Definition code from another XML Definition code. \n\n\nThe next step would be to add the initialization and assign a state to our button and add a variable for the remote extensions SIP URI:\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\n\n\nThe \ninitialization\n element allows us to define an initial state for a button, a variable and/or an array. In this particular case we will add the \nstate\n and give it the initial value \noff\n and add a \nvariable\n named \nsubscr_uri\n which would have the SIP URI of our remote monitored extension as value. \n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n\nstate value=\noff\n/\n\n\nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\n\n\nWith the \nsubscription\n element we told the phone to send a SIP SUBSCRIBE message, like the one below. To use our previous defined variables we put the name into $(...). \n\n\nNOTE:\n That depending on the PBX on which you want to subscribe there are a few different \ntypes\n which can be used. Also the values like \"\n\" and \"\n\" need to be encoded like \"\n\" and \"\n\".\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\n\n\nAt this step we added Parsing Rules to our XML Definition Code, which would take the SIP NOTIFY messages we receive on the phone and extract the data to our new variables.\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\n\n\n\nThe \nNotifyParsingRules\n element container has a few functionalities, but they all are parsing the incoming SIP NOTIFY messages. This rule with the \ntype\n attribute set as \napplies\n, will tell the phone which SIP NOTIFY messages belong to that particular button. In the \nNotifyParsingRules\n element container we put new elements named \nlevel\n. This (\nlevel\n) elements are condition elements, if the condition inside the tags (\n/dialog-info[@entity=\"$(subscr_uri)\"]\n) is matched, the \napplies\n element get the value (OK) which is defined in the \ntranslates_to\n attribute.\n\n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\n\n\nHere we do the same as in the part of code before it, we are matching for the conditions and if it is successful we assign the value to the state. However we have here multiple \nlevel\n elements, which if the first condition is matched we try to match the second one too.\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\n\n\n\nAt this part of the code we are fetching particular parts of our SIP NOTIFY message and assign them to our new variables (\ncall_id\n), but like in \nassign\n elements we can say the phone in which state it should look for the call_id and then assign it. The same we did for \nlocal_tag\n, \nremote_tag\n, \nremote_name\n and \nremote_uri\n. This can be done for anything we receive in the SIP NOTIFY.\nThe last step would be to add some functionality to our button press.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n \n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n/\n \n\n/action\n\n\n\n\nWe added two \ninvite\n elements in our \naction\n element container. Both of them will execute a call but with different parameters depending on the monitored extensions \nstate\n. The first \ninvite\n element will sent an INVITE message (initiate a call) if the remote monitored extension is in the \nringing\n state and also adds to the INVITE message the required SIP headers like \nrequest_uri\n and \nreplaces\n to pick up the ringing call. The second \ninvite\n element will be execute just if the previous one isn't and will dial only the number from our remote monitored extension.\n\n\nPart 2: Limiting Actions on specific \nstates\n #\n\n\nMost users would like to limit the actions depending on the state the called party is in. That is what we are going to do now for our second \ninvite\n element.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n \n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n states=\nfree,offhook\n/\n \n\n/action\n\n\n\n\nWe added here the condition, that when our remote monitored extension is \nfree\n (in idle) or in \noffhook\n we are going to dial the number of the remote extensions. In all other cases (in_a_call, etc.) we are going to ignore the button press.\n\n\nPart 3: LED Control\n #\n\n\nSometimes we would like to change the default LED behavior and color depending on the \nstate\n of our remote monitored extension. To do so, we use the \ntranslate_to\n attributes values (e.g. ringing, calling, in_a_call, free, etc.) which we defined in the \nNotifyParsingRules\n element container for the \ntype=state\n and put them in the appropriate phone settings like \nled_on, led_blink_slow, led_blink_medium, led_red, led_green, etc.\n. Below a small example:\n\n\nled_on!: ON BUSY IN_A_CALL CALLING IN_A_MEETING URGENT_INTERRUPTIONS_ONLY DND UNAVAILABLE ACTIVE INACTIVE BE_RIGHT_BACK AWAY SEIZED CONNECTED ON_HOLD OFFHOOK RINGBACK PhoneHasCall PhoneHasMissedCalls AVAILABLE CurrentIdentityHasVoiceMessages FREE\nled_blink_slow!: PARKED HOLDING PhoneHasCallInStateHolding OFFHOOK\nled_blink_medium!: RECORDING MESSAGE\nled_blink_fast!: RINGING PICKUP PhoneHasCallInStateRinging\nled_blink_short_off!: PhoneHasMissedCalls\nled_red!: BUSY IN_A_CALL CALLING IN_A_MEETING URGENT_INTERRUPTIONS_ONLY HOLDING DND I-Am-Busy \nled_green!: AVAILABLEI-Am-Ready I-Am-Almost-Ready FREE\nled_orange!: AWAY INACTIVE BE_RIGHT_BACK \nled_blue!: \nled_red_green!: OFFHOOK\nled_red_orange!: \nled_green_orange!:\n\n\n\n\nSince by default snom phones doesn't have the state \nfree\n defined, we just added it to light green. Also above we changed the \noffhook\n from lighting red to be slow blinking red and green. So now we know what exactly is happening on the remote monitored extension.\n\n\nNOTE:\n If you are using a predefined \nstate\n like \nOFFHOOK\n and would like to assign it to another behavior or color, please take care that you remove it from the previous (old) setting.\nThe same can be done with Virtual keys on the snom 8xx phones, the only difference is that we use different settings:\n\n\nvkey_red!: RINGING DND RECORDING PICKUP\nvkey_green!: CONNECTED AVAILABLE \nvkey_orange!: HOLDING ON_HOLD PARKED ON CALLING RINGBACK SEIZED OFFHOOK MESSAGE\nvkey_blue!:\n\n\n\n\nPart 4: Transferring call with SIP REFER depending on own state\n #\n\n\nIn this part we are going to build in a transfer action if we are already in a call to the remote monitored extension. As first we are going to take our previous XML Definition Code from Part 1 and add our new transfer functionality. \n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n value=\n/\n\n    \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\ncall\n id=\nid\n require=\n${state}==connected\n/\n\n    \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n  \n/assign\n\n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n states=\nfree,offhook\n/\n \n\n/action\n\n\n\n\nAs first we added two \nassign\n elements, first one will clear our new variable \ntransfer_id\n and the second one will populate with the internal ID of our connected call.\n\n\nassign when=\non press\n\n  \nsource context=\ncall\n id=\nid\n require=\n${state}==connected\n/\n\n  \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n\n/assign\n\n\n\n\nGet the internal call id for the call which state is connected and put the value into our local variable named trasfered_id\n\n\nNOTE:\n The states in \nrequire\n tags are case sensitive and need to be written lower case.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n value=\n/\n\n    \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\ncall\n id=\nid\n require=\n${state}==connected\n/\n\n    \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n id=\nstate\n/\n \n    \ndestination context=\nthis entry\n id=\nstate_save\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n value=\ntransferring\n/\n \n    \ndestination context=\nthis entry\n id=\nstate\n require=\n$(transfer_id)!= \n/\n\n  \n/assign\n\n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n states=\nfree,offhook\n/\n \n\n/action\n\n\n\n\nAnd we added two more \nassign\n elements to our XML Definition Code, the first one is going to backup (or save) our current state into our new variable \nstate_save\n and the second assign is going to check if the \ntransfer_id\n is set (and not EMPTY) to change our button state to \ntransferring\n. \nOur last steps in this part of the example are to add our \nrefer\n element which will set a SIP REFER message to our PBX to Transfer our connected call. Also it will revert our saved (backup) state back to the button.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n value=\n/\n\n    \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\ncall\n id=\nid\n require=\n${state}==connected\n/\n\n    \ndestination context=\nthis entry\n id=\ntransfer_id\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n id=\nstate\n/\n \n    \ndestination context=\nthis entry\n id=\nstate_save\n/\n\n  \n/assign\n\n  \nassign when=\non press\n\n    \nsource context=\nthis entry\n value=\ntransferring\n/\n \n    \ndestination context=\nthis entry\n id=\nstate\n require=\n$(transfer_id)!= \n/\n\n  \n/assign\n\n  \nrefer target=\n$(subscr_uri)\n source=\n$(transfer_id)\n when=\non release\n states=\ntransferring\n/\n\n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non release\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non release\n states=\nfree,offhook\n/\n\n  \nassign when=\non release\n\n    \nsource context=\nthis entry\n id=\nstate_save\n/\n \n    \ndestination context=\nthis entry\n id=\nstate\n/\n\n  \n/assign\n\n\n/action\n\n\n\n\nAlso we changed the \nwhen\n attributes on our \ninvite\n elements to eliminate unexpected calls being done.\n\n\nReferencing to other XML Definition Codes\n #\n\n\nSometimes it is very helpful to reference to a different XML Definition Code, no matter if it's another Function key or a \ngeneral_purpose_xml_descriptions\n.  In this part of the example we are going to show you how perform different action depending on a \ngeneral_purpose_xml_descriptions\n Code variable.\n\n\nIn Asterisk like environments you are able to to SUBSCRIBE to your oven Extension state to know if it is in a call or not. So that is what we are going to do now. So in this part we will create a XML Definition Code for monitoring our own state and put it into a \ngeneral_purpose_xml_descriptions\n setting.\n\n\nThen we will use our XML Definition code from the 1st part of the example and adopt it to reference to our own state which is in the \ngeneral_purpose_xml_descriptions\n setting.\n\n\ngeneral type='PhoneState'/\n\n\ninitialization\n\n  \nvariable name='current_state' value=''/\n\n  \nvariable name='own_subscr_uri' value='sip:102@pbx.local'/\n\n  \nstate value='initial'/\n\n\n/initialization\n\n\nsubscription type='dialog' to='\nlt;$(own_subscr_uri)\ngt;' for='$(own_subscr_uri)'/\n\n\nNotifyParsingRules type='applies'\n\n  \nlevel1 translates_to='OK'\n/dialog-info[@entity='$(own_subscr_uri)']\n/level1\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='state'\n\n  \nlevel1 translates_to='me_in_a_call'\n/dialog-info/dialog/state[.='early']\n/level1\n\n  \nlevel2 translates_to='me_in_a_call'\n/dialog-info/dialog/state[.='proceeding']\n/level2\n\n  \nlevel3 translates_to='me_in_a_call'\n/dialog-info/dialog/state[.='confirmed']\n/level3\n\n  \nlevel4 translates_to='me_offhook'\n/dialog-info/dialog/state[.='trying']\n/level4\n\n  \nlevel5 translates_to='me_free'/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='variable' id='remote_name'\n\n  \nlevel1 fetch_attribute='display'\n/dialog-info/dialog/remote/identity[@display]\n/level1\n\n  \nlevel2 fetch_attribute='uri'\n/dialog-info/dialog/remote/target[@uri]\n/level2\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='variable' id='local_name' states='offhook,free'\n\n  \nlevel1 fetch_attribute='display'\n/dialog-info/dialog/local/identity[@display]\n/level1\n\n  \nlevel2 fetch_attribute='uri'\n/dialog-info/dialog/local/target[@uri]\n/level2\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='variable' id='call_id' states='ringing'\n\n  \nlevel1 fetch_attribute='call-id'\n/dialog-info/dialog[@call-id]\n/level1\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='variable' id='remote_tag' states='ringing'\n\n  \nlevel1 fetch_attribute='remote-tag'\n/dialog-info/dialog[@remote-tag]\n/level1\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='variable' id='local_tag' states='ringing'\n\n  \nlevel1 fetch_attribute='local-tag'\n/dialog-info/dialog[@local-tag]\n/level1\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type='variable' id='remote_uri' states='ringing'\n\n  \nlevel1 fetch_attribute='uri'\n/dialog-info/dialog/remote/target[@uri]\n/level1\n\n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when='on notify'\n\n    \nsource context='local' id='state'/\n\n    \ndestination context='local' id='current_state'/\n\n  \n/assign\n\n\n/action\n \n\n\n\n\nThe XML Definition Code for our own extension state looks similar to the code from the 1st part. We changed the name of our XML Definition code in the \ngeneral\n element, because we are going to use this name later on for referencing to this code and we added a new \nvariable\n element which will contain our own state.\n\n\nAlso we changed the \ntranslate_to\n attributes values to contain \nme_\n in front.\n\n\nThat will help us later on to decide which action we are going to perform. And at the end of the code we added an \nassign\n element which will be executed \non notify\n, when a SIP NOTIFY message arrives and puts the state of our monitored extension (our own SIP URI) into our new variable \ncurrent_state\n.\n\n\nNow our next step is to use the XML Definition Code from our 1st part and adopt it to reference to the above (own extension's state) XML Definition Code.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name='subscr_state' value='initial'/\n\n  \nvariable name='subscr_num' value='' /\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\n\naction\n \n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n/\n \n\n/action\n\n\n\n\nAs first we added two new \nvariable\n elements, which we are going to use to save the subscribers number and state.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name='subscr_state' value='initial'/\n\n  \nvariable name='subscr_num' value='' /\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when='on press'\n\n    \nsource context='local' id='subscr_uri' value_match='(sip:)?(.*)@.*' value_replace='$2'/\n\n    \ndestination context='local' id='subscr_num'/\n\n  \n/assign\n\n  \nassign when='on press'\n\n    \nsource context='this entry' id='state'/\n\n    \ndestination context='this entry' id='subscr_state'/\n\n  \n/assign\n\n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n/\n \n\n/action\n\n\n\n\nWith the two new \nassign\n elements we are going to fill our new variables. The first one will take the \nsubscr_uri\n value and extract the number from it, thanks to the RegEX we wrote in the \nvalue_match\n attribute and the \nvalue_replace\n attribute where we defined which part of the RegEx would be saved into the \nsubscr_num\n variable. Also we copied the button \nstate\n value into our new \nsubscr_state\n variable. \n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name='subscr_state' value='initial'/\n\n  \nvariable name='subscr_num' value='' /\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when='on press'\n\n    \nsource context='local' id='subscr_uri' value_match='(sip:)?(.*)@.*' value_replace='$2'/\n\n    \ndestination context='local' id='subscr_num'/\n\n  \n/assign\n\n  \nassign when='on press'\n\n    \nsource context='this entry' id='state'/\n\n    \ndestination context='this entry' id='subscr_state'/\n\n  \n/assign\n\n  \nassign when='on press'\n\n    \nsource context='all xml entities' id='current_state' require1='${type}==PhoneState' require2='${current_state}==me_in_a_call'/\n\n    \ndestination context='this entry' id='state'/\n\n  \n/assign\n\n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n/\n \n  \nassign when='on release'\n\n    \nsource context='this entry' id='subscr_state'/\n\n    \ndestination context='this entry' id='state'/\n\n  \n/assign\n\n\n/action\n\n\n\n\nIn the above code we added \nassign\n elements to get our own phones state and to revert the remote monitored extension state back, when we are done with our actions. The second assign will be executed on the release of the button.\n\n\nassign when='on press'\n\n  \nsource context='all xml entities' id='current_state' require1='${type}==PhoneState' require2='${current_state}==me_in_a_call'/\n\n  \ndestination context='this entry' id='state'/\n\n\n/assign\n\n\n\n\nWhen the button gets pressed, get all XML Definition Codes where the type is PhoneState and if in that Code the current_state has the value of me_in_a_call, assign current_state value to our state variable.\n\n\nOur last step would be to add an Action if we are in a call.\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n  \nstate value=\noff\n/\n\n  \nvariable name='subscr_state' value='initial'/\n\n  \nvariable name='subscr_num' value='' /\n\n  \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n  \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n  \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n  \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n  \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n  \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n  \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n  \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n  \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n  \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n  \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n\n  \nassign when='on press'\n\n    \nsource context='local' id='subscr_uri' value_match='(sip:)?(.*)@.*' value_replace='$2'/\n\n    \ndestination context='local' id='subscr_num'/\n\n  \n/assign\n\n  \nassign when='on press'\n\n    \nsource context='this entry' id='state'/\n\n    \ndestination context='this entry' id='subscr_state'/\n\n  \n/assign\n\n  \nassign when='on press'\n\n    \nsource context='all xml entities' id='current_state' require1='${type}==PhoneState' require2='${current_state}==me_in_a_call'/\n\n    \ndestination context='this entry' id='state'/\n\n  \n/assign\n\n  \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n  \ndtmf target='*$(subscr_num)' when='on release' states='me_in_a_call'/\n\n  \ninvite target=\n$(subscr_uri)\n when=\non press\n/\n \n  \nassign when='on release'\n\n    \nsource context='this entry' id='subscr_state'/\n\n    \ndestination context='this entry' id='state'/\n\n  \n/assign\n\n\n/action\n\n\n\n\nOur new \ndtmf\n element which we also put into our \naction\n element container, will sent a DTMF code with a * (asterisk) and the number our remote monitored extension, but just if we (our phone) are in a call.", 
            "title": "XML Definitions"
        }, 
        {
            "location": "/xml_definitions/#xml_definitions", 
            "text": "Some phone settings can be defined using an XML definition, an XML definition is a ruleset (defined trough an XML syntax) specifying a particular setting behaviour.  For example you can customise the action taken during a key pressure (and the key release too), also you can instruct the phone to subscribe a SIP resource and then parse the XML body received into the in-dialog NOTIFY. The XML definition can setup various states and the phone can reacts to state changes and/or take action in different states.", 
            "title": "XML Definitions"
        }, 
        {
            "location": "/xml_definitions/#example", 
            "text": "The following example XML code can be applied to a function key setting in order to create a SUBSCRIBE dialog and their NOTIFY parsing rules.  general type= BusyLampField  identity= 1 /  initialization \n   state value= initial / \n   variable name= subscr_uri  value= sip:424711@com.snom /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies      \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1     /NotifyParsingRules     NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing      \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1     /NotifyParsingRules     NotifyParsingRules type= variable  id= remote_tag  state= ringing      \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1     /NotifyParsingRules     NotifyParsingRules type= variable  id= local_tag  state= ringing      \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1     /NotifyParsingRules     NotifyParsingRules type= variable  id= remote_uri  state= ringing      \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1     /NotifyParsingRules    NotifyParsingRules type= variable  id= remote_name  state= ringing      \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1     /NotifyParsingRules  action    \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   dial target= $(subscr_uri)  when= on press /   /action", 
            "title": "Example"
        }, 
        {
            "location": "/xml_definitions/#states", 
            "text": "state  and  states  attributes are case sensitive and need to be written correctly (mostly lowercase).  states  conditions can contain multiple states which are a comma-separated list,  action  and  NotifyParsingRules  elements will only be executed if the current state value matches one of these in the list.", 
            "title": "state(s)"
        }, 
        {
            "location": "/xml_definitions/#require", 
            "text": "require  attribute consists of a comparison sign and two operands on either side. Each operand consists of alphanumeric constant characters and placeholders for dynamic variable insertion. The placeholders start with a $-sign followed by a pair of brackets enclosing the variable name. Curly brackets are used for inserting the variables of all the contexts currently referred to (i.e. all the contexts named via the context-attribute) while parentheses are used for the local xml entity context. The variables may actually be variables but may also insert array-members or the state or type of an xml-entity. See these examples for more clarity:   ${type}==ResourceListBuddy : only use context-entities whose type is set to \"ResourceListBuddy\"  ${BuddyUri}==$(uri) : only use context-entities that have a variable named BuddyUri which is set to the same value as the one stored in the variable \"uri\" of this xml-entity  ${BuddyUri}==$(uris[$(index)]) : similar to previous example, but right-side operand is an array. The variable $(index) is available in destination-requirements whenever the source is an array.", 
            "title": "require"
        }, 
        {
            "location": "/xml_definitions/#setting_toggle_example", 
            "text": "Our first example is about how to create a \"Settings Toggle\", which on the end would auto assign the current value; display the text for the particular button and translate the Text if an another language is being used.", 
            "title": "Setting Toggle example"
        }, 
        {
            "location": "/xml_definitions/#simple_setting_toggle_button", 
            "text": "As the first step we need to define our XML Definition Code. To do so we need to write a  general  element as the first line of our code:  general type= PrivacyToggle  /  In the  general  element we write the information's which are required by the phone to create a function and assign it to an identity if required.The  type  attribute is the name of our function and can be shown in the Phone User Interface as an Option or in some cases we use it to reference to this XML Definition code from another XML Definition code.  The next step would be to add the initialization and assign a state to our button:  general type= PrivacyToggle  /  initialization \n   state value= off /  /initialization  The  initialization  element allows us to define an initial state for a button, a variable and/or an array. In this particular case we will just use the  state  and give it the value  off . Which means on boot up of the phone this button would be in state  off .  Now we are going to add the Actions which should happen when our Button is pressed. For this example we would like to execute a HTTP Request for the snom phone to change a setting. In this particular case to hide our outgoing number to  anonymous  and revert it back with a second press.  general type= PrivacyToggle  /  initialization \n   state value= off /  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on /  /action  All our functionalities need to be put in the  action  element container. We wrote two lines of Code inside our action element, both of them are  url  elements, which means they will execute HTTP Requests.The  target  attribute tells the phone which URL should be opened/executed, the  when  attribute says on which event the URL should be opened/executed and the last  states  attribute is the condition in which state of the button should these action be execute.At the moment if you press this XML Definition Button, the phone will open the following URL:  http://localhost/settings.htm?settings=save privacy_out=on   Warning  The URL  http://localhost/settings.htm?settings=save  is used to change the setting  privacy_out  if your phone web server is secured with credentials you have to include such credentials into the URL:  http://username:password@localhost/settings.htm?settings=save .  In case your phone has the  admin_mode  disabled such URL will not work. In this case a workaround is to configure the  service mode credentials  trough the settings  service_mode_login  and  service_mode_password .   But at the moment the button will not change the state to \"ON\" on the press and each time it will execute the same above URL. That is why we need to add some intelligence to the button, so that on a press the state of the button changes and different actions get executed.  general type= PrivacyToggle  /  initialization \n   state value= off /  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  At this step we add the  assign  elements to our code, these elements are used to change the state of the Button and/or assign values to variables or arrays. Assign element has two sub-elements  source  (where we define where the value is coming from) and  destination  (where we define where to write/put our value to).  assign  has like all other action elements the two attributes to define on which event and in which state of the button should these assign action happen.  assign when= on press  states= off \n   source context= this entity  value= on / \n   destination context= this entity  id= state /  /assign  If the state of the Button is off and on press of that button, assign/set the value on to the variable state.  NOTE:  Depending of the value  state  the LED of that Button will be ON or OFF. More about the LED control will be described in a future part.", 
            "title": "Simple Setting Toggle Button"
        }, 
        {
            "location": "/xml_definitions/#auto_assignment", 
            "text": "By using the above example you probably found out that, when the phone has been rebooted the button will get in the  state  we defined in the  initialization  tag. Even if the setting was already changed to a non-initial value. To get this solved we are going to add a  assign  element which would be executed  after-initialization .  general type= PrivacyToggle  /  initialization \n   state value= off /  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  As you see we added a new  assign  element to our XML Definition Code, which would be executed as soon as the initialization has been done (phone boot up). Also at this step we are facing another  context  in our  source  element, which tell the phone look for variables in the phone  setting -s. Of course we needed also to define for which setting exactly are we looking, that's why we replaced the  value  attribute with the  id  attribute which is the name of our setting.  assign when= after initialization \n   source context= setting  id= privacy_out / \n   destination context= this entity  id= state /  /assign  After phone boot up, get from the phone settings the current value for privacy_out and assign it to our  state  variable.  So now when you reboot the phone, the button will check the current (last set) value in the settings and update the state of our button. But what will happen when someone changes the setting over the phones Web User Interface or it gets provisioned with a different value!? To get the  state  update on setting changed we need to add one more attribute to our  assign  element.  general type= PrivacyToggle  /  initialization \n   state value= off /  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign type= update on change  when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  The new attribute  type  tells the phone that if a change on the phone happens, execute that particular  assign  element block again. In our case, get the new value from the setting  privacy_out  and assign it to our  state  variable.", 
            "title": "Auto assignment"
        }, 
        {
            "location": "/xml_definitions/#labels", 
            "text": "Our next step would be to show a text for our Button (snom 760 and 8xx phones). These texts are named  labels . As first we are going to take our previous code and add the required arrays for the labeling.  NOTE:  Virtual keys support two line labeling (only available on snom 8xx phones), Line Info Layer only supports one line labeling (only available on snom 760 and 82X phones). The example below is for virtual key labeling.  general type= PrivacyToggle  /  initialization \n   state value= off / \n   array name='label' separator=',' value='Hide own outgoing ID,off'/ \n   array name='label_x' separator=',' value='5,5'/ \n   array name='label_y' separator=',' value='2,15'/ \n   array name='label_width' separator=',' value='74,95'/ \n   array name='label_height' separator=',' value='13,24'/ \n   array name='label_align' separator=',' value='left,center'/  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign type= update on change  when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  The added arrays contain the Text we would like to display; the positions, lengths and alignments of the Texts. If we put the above XML Definition Code on our phone and press the button it will always display  \"Hide own outgoing ID\"  in upper-left corner and  \"off\"  in the middle, because there is no intelligence which changes the  \"off\"  value to  \"on\" . That would be our next step. But to explain the arrays a bit better, the  separator : can be whatever you want (including \" \" -space). Also here a table for the above values:     Variable name  1st Value  2nd Value      label  Hide own outgoing ID  off    label_x  5  5    label_y  2  15    label_width  74  95    label_height  13  24    label_align  left  center     general type= PrivacyToggle  /  initialization \n   state value= off / \n   array name='label' separator=',' value='Hide own outgoing ID,off'/ \n   array name='label_x' separator=',' value='5,5'/ \n   array name='label_y' separator=',' value='2,15'/ \n   array name='label_width' separator=',' value='74,95'/ \n   array name='label_height' separator=',' value='13,24'/ \n   array name='label_align' separator=',' value='left,center'/  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign type= update on change  when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign type= update on change  when= after initialization \n     source context= this entity  id= state / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  Now we added an  assign  element which would get the  state  value and assign or in our case rewrite the value no our label array on the second position (label[1]).   NOTE: Arrays start to count with 0, which means  label[0]  would be \"Hide own outgoing ID\" and  label[1]  would be \"off\".", 
            "title": "Labels"
        }, 
        {
            "location": "/xml_definitions/#language_support", 
            "text": "Our last part for this example is to add Language support to our Text from our previous part. To do so we would need also to change our existing  assign  element for the label and add one more.  general type= PrivacyToggle  /  initialization \n   state value= off / \n   array name='label' separator=',' value='Hide own outgoing ID,off'/ \n   array name='label_x' separator=',' value='5,5'/ \n   array name='label_y' separator=',' value='2,15'/ \n   array name='label_width' separator=',' value='74,95'/ \n   array name='label_height' separator=',' value='13,24'/ \n   array name='label_align' separator=',' value='left,center'/  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign type= update on change  when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign states= off  when= after initialization \n     source context= language  id= off / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign states= on  when= after initialization \n     source context= language  id= on / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  We replaced the  type  with the  states  attribute on our  assign  element, which will always get us the translation when the phone boots up and the button is in the current state. Also we changed the  context  attribute to  language  which tells the phone to look for the translation of our  id  attribute. But we also need to handle the translation when the button is pressed, to do so, we are going to add two more  assign  elements.  general type= PrivacyToggle  /  initialization \n   state value= off / \n   array name='label' separator=',' value='Hide own outgoing ID,off'/ \n   array name='label_x' separator=',' value='5,5'/ \n   array name='label_y' separator=',' value='2,15'/ \n   array name='label_width' separator=',' value='74,95'/ \n   array name='label_height' separator=',' value='13,24'/ \n   array name='label_align' separator=',' value='left,center'/  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign type= update on change  when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign states= off  when= after initialization \n     source context= language  id= off / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign states= on  when= after initialization \n     source context= language  id= on / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= off \n     source context='language' id='on'/ \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= on \n     source context='language' id='off'/ \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  The two new  assign  elements look similar to our XML Definition code from the part 1, where we are changing the value of the button  state . But with the difference that we are now putting the translated value into our  label  array on the second position. The above XML Definition code is just for the  state  of our button. Now we are going to translate the  label  text from the first position and don't worry, since that part of our label is always static we just need to add one more  assign  for it.  general type= PrivacyToggle  /  initialization \n   state value= off / \n   array name='label' separator=',' value='Hide own outgoing ID,Off'/ \n   array name='label_x' separator=',' value='5,5'/ \n   array name='label_y' separator=',' value='2,15'/ \n   array name='label_width' separator=',' value='74,95'/ \n   array name='label_height' separator=',' value='13,24'/ \n   array name='label_align' separator=',' value='left,center'/  /initialization  action \n   url target= http://localhost/settings.htm?settings=save privacy_out=on  when= on press  states= off / \n   url target= http://localhost/settings.htm?settings=save privacy_out=off  when= on press  states= on / \n   assign type= update on change  when= after initialization \n     source context= setting  id= privacy_out / \n     destination context= this entity  id= state / \n   /assign \n   assign states= off  when= after initialization \n     source context= language  id= off / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign states= on  when= after initialization \n     source context= language  id= on / \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= off \n     source context='language' id='on'/ \n     destination context= this entity  id= label[1] / \n   /assign \n   assign when= on press  states= on \n     source context='language' id='off'/ \n     destination context= this entity  id= label[1] / \n   /assign \n   assign type= update on change  when= after initialization \n     source context= language  id= privacy_out / \n     destination context= this entity  id= label[0] / \n   /assign \n   assign when= on press  states= on \n     source context= this entity  value= off / \n     destination context= this entity  id= state / \n   /assign \n   assign when= on press  states= off \n     source context= this entity  value= on / \n     destination context= this entity  id= state / \n   /assign  /action  This assign looks similar to our XML Definition Code we done in part 2, with the difference that we are now looking for the translation of our Text and by assigning it on the label's first position.As you already saw as you were writing the above code, we now have the  source: context  set to  language  and we are searching for the value of our Option  privacy_out .  NOTE:  To find the keyword you need to be translated please search for your text in the below XML file and use the  n  attribute value to but as the  id  in the translation  source  elements.  See the translation XML file at: http://provisioning.snom.com/config/snomlang-8.7.4/gui_lang_EN.xml", 
            "title": "Language support"
        }, 
        {
            "location": "/xml_definitions/#extension_monitoring_example", 
            "text": "This example is about creating a XML Definition key which would monitor a remote extension and depending on its state light with different Color and performs different Actions on a Button press.", 
            "title": "Extension Monitoring example"
        }, 
        {
            "location": "/xml_definitions/#part_1_busy_lamp_field", 
            "text": "As the first step we need to define our XML Definition Code. To do so we need to write a  general  element as the first line of our code:  general type= BusyLampField  identity= 1 /  In the  general  element we write the information's which are required by the phone to create a function and assign it to an identity.The  type  attribute is the name of our function and can be shown in the Phone User Interface as an Option or in some cases we use it to reference to this XML Definition code from another XML Definition code.   The next step would be to add the initialization and assign a state to our button and add a variable for the remote extensions SIP URI:  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  The  initialization  element allows us to define an initial state for a button, a variable and/or an array. In this particular case we will add the  state  and give it the initial value  off  and add a  variable  named  subscr_uri  which would have the SIP URI of our remote monitored extension as value.   general type= BusyLampField  identity= 1 /  initialization  state value= off /  variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  With the  subscription  element we told the phone to send a SIP SUBSCRIBE message, like the one below. To use our previous defined variables we put the name into $(...).   NOTE:  That depending on the PBX on which you want to subscribe there are a few different  types  which can be used. Also the values like \" \" and \" \" need to be encoded like \" \" and \" \".  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  At this step we added Parsing Rules to our XML Definition Code, which would take the SIP NOTIFY messages we receive on the phone and extract the data to our new variables.  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules    The  NotifyParsingRules  element container has a few functionalities, but they all are parsing the incoming SIP NOTIFY messages. This rule with the  type  attribute set as  applies , will tell the phone which SIP NOTIFY messages belong to that particular button. In the  NotifyParsingRules  element container we put new elements named  level . This ( level ) elements are condition elements, if the condition inside the tags ( /dialog-info[@entity=\"$(subscr_uri)\"] ) is matched, the  applies  element get the value (OK) which is defined in the  translates_to  attribute.  NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  Here we do the same as in the part of code before it, we are matching for the conditions and if it is successful we assign the value to the state. However we have here multiple  level  elements, which if the first condition is matched we try to match the second one too.  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules    At this part of the code we are fetching particular parts of our SIP NOTIFY message and assign them to our new variables ( call_id ), but like in  assign  elements we can say the phone in which state it should look for the call_id and then assign it. The same we did for  local_tag ,  remote_tag ,  remote_name  and  remote_uri . This can be done for anything we receive in the SIP NOTIFY.\nThe last step would be to add some functionality to our button press.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action  \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press /   /action  We added two  invite  elements in our  action  element container. Both of them will execute a call but with different parameters depending on the monitored extensions  state . The first  invite  element will sent an INVITE message (initiate a call) if the remote monitored extension is in the  ringing  state and also adds to the INVITE message the required SIP headers like  request_uri  and  replaces  to pick up the ringing call. The second  invite  element will be execute just if the previous one isn't and will dial only the number from our remote monitored extension.", 
            "title": "Part 1: Busy Lamp Field"
        }, 
        {
            "location": "/xml_definitions/#part_2_limiting_actions_on_specific_states", 
            "text": "Most users would like to limit the actions depending on the state the called party is in. That is what we are going to do now for our second  invite  element.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action  \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press  states= free,offhook /   /action  We added here the condition, that when our remote monitored extension is  free  (in idle) or in  offhook  we are going to dial the number of the remote extensions. In all other cases (in_a_call, etc.) we are going to ignore the button press.", 
            "title": "Part 2: Limiting Actions on specific states"
        }, 
        {
            "location": "/xml_definitions/#part_3_led_control", 
            "text": "Sometimes we would like to change the default LED behavior and color depending on the  state  of our remote monitored extension. To do so, we use the  translate_to  attributes values (e.g. ringing, calling, in_a_call, free, etc.) which we defined in the  NotifyParsingRules  element container for the  type=state  and put them in the appropriate phone settings like  led_on, led_blink_slow, led_blink_medium, led_red, led_green, etc. . Below a small example:  led_on!: ON BUSY IN_A_CALL CALLING IN_A_MEETING URGENT_INTERRUPTIONS_ONLY DND UNAVAILABLE ACTIVE INACTIVE BE_RIGHT_BACK AWAY SEIZED CONNECTED ON_HOLD OFFHOOK RINGBACK PhoneHasCall PhoneHasMissedCalls AVAILABLE CurrentIdentityHasVoiceMessages FREE\nled_blink_slow!: PARKED HOLDING PhoneHasCallInStateHolding OFFHOOK\nled_blink_medium!: RECORDING MESSAGE\nled_blink_fast!: RINGING PICKUP PhoneHasCallInStateRinging\nled_blink_short_off!: PhoneHasMissedCalls\nled_red!: BUSY IN_A_CALL CALLING IN_A_MEETING URGENT_INTERRUPTIONS_ONLY HOLDING DND I-Am-Busy \nled_green!: AVAILABLEI-Am-Ready I-Am-Almost-Ready FREE\nled_orange!: AWAY INACTIVE BE_RIGHT_BACK \nled_blue!: \nled_red_green!: OFFHOOK\nled_red_orange!: \nled_green_orange!:  Since by default snom phones doesn't have the state  free  defined, we just added it to light green. Also above we changed the  offhook  from lighting red to be slow blinking red and green. So now we know what exactly is happening on the remote monitored extension.  NOTE:  If you are using a predefined  state  like  OFFHOOK  and would like to assign it to another behavior or color, please take care that you remove it from the previous (old) setting.\nThe same can be done with Virtual keys on the snom 8xx phones, the only difference is that we use different settings:  vkey_red!: RINGING DND RECORDING PICKUP\nvkey_green!: CONNECTED AVAILABLE \nvkey_orange!: HOLDING ON_HOLD PARKED ON CALLING RINGBACK SEIZED OFFHOOK MESSAGE\nvkey_blue!:", 
            "title": "Part 3: LED Control"
        }, 
        {
            "location": "/xml_definitions/#part_4_transferring_call_with_sip_refer_depending_on_own_state", 
            "text": "In this part we are going to build in a transfer action if we are already in a call to the remote monitored extension. As first we are going to take our previous XML Definition Code from Part 1 and add our new transfer functionality.   general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action \n   assign when= on press \n     source context= this entry  value= / \n     destination context= this entry  id= transfer_id / \n   /assign \n   assign when= on press \n     source context= call  id= id  require= ${state}==connected / \n     destination context= this entry  id= transfer_id / \n   /assign \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press  states= free,offhook /   /action  As first we added two  assign  elements, first one will clear our new variable  transfer_id  and the second one will populate with the internal ID of our connected call.  assign when= on press \n   source context= call  id= id  require= ${state}==connected / \n   destination context= this entry  id= transfer_id /  /assign  Get the internal call id for the call which state is connected and put the value into our local variable named trasfered_id  NOTE:  The states in  require  tags are case sensitive and need to be written lower case.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action \n   assign when= on press \n     source context= this entry  value= / \n     destination context= this entry  id= transfer_id / \n   /assign \n   assign when= on press \n     source context= call  id= id  require= ${state}==connected / \n     destination context= this entry  id= transfer_id / \n   /assign \n   assign when= on press \n     source context= this entry  id= state /  \n     destination context= this entry  id= state_save / \n   /assign \n   assign when= on press \n     source context= this entry  value= transferring /  \n     destination context= this entry  id= state  require= $(transfer_id)!=  / \n   /assign \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press  states= free,offhook /   /action  And we added two more  assign  elements to our XML Definition Code, the first one is going to backup (or save) our current state into our new variable  state_save  and the second assign is going to check if the  transfer_id  is set (and not EMPTY) to change our button state to  transferring . \nOur last steps in this part of the example are to add our  refer  element which will set a SIP REFER message to our PBX to Transfer our connected call. Also it will revert our saved (backup) state back to the button.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action \n   assign when= on press \n     source context= this entry  value= / \n     destination context= this entry  id= transfer_id / \n   /assign \n   assign when= on press \n     source context= call  id= id  require= ${state}==connected / \n     destination context= this entry  id= transfer_id / \n   /assign \n   assign when= on press \n     source context= this entry  id= state /  \n     destination context= this entry  id= state_save / \n   /assign \n   assign when= on press \n     source context= this entry  value= transferring /  \n     destination context= this entry  id= state  require= $(transfer_id)!=  / \n   /assign \n   refer target= $(subscr_uri)  source= $(transfer_id)  when= on release  states= transferring / \n   invite target= $(remote_name) $(remote_uri)  when= on release  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on release  states= free,offhook / \n   assign when= on release \n     source context= this entry  id= state_save /  \n     destination context= this entry  id= state / \n   /assign  /action  Also we changed the  when  attributes on our  invite  elements to eliminate unexpected calls being done.", 
            "title": "Part 4: Transferring call with SIP REFER depending on own state"
        }, 
        {
            "location": "/xml_definitions/#referencing_to_other_xml_definition_codes", 
            "text": "Sometimes it is very helpful to reference to a different XML Definition Code, no matter if it's another Function key or a  general_purpose_xml_descriptions .  In this part of the example we are going to show you how perform different action depending on a  general_purpose_xml_descriptions  Code variable.  In Asterisk like environments you are able to to SUBSCRIBE to your oven Extension state to know if it is in a call or not. So that is what we are going to do now. So in this part we will create a XML Definition Code for monitoring our own state and put it into a  general_purpose_xml_descriptions  setting.  Then we will use our XML Definition code from the 1st part of the example and adopt it to reference to our own state which is in the  general_purpose_xml_descriptions  setting.  general type='PhoneState'/  initialization \n   variable name='current_state' value=''/ \n   variable name='own_subscr_uri' value='sip:102@pbx.local'/ \n   state value='initial'/  /initialization  subscription type='dialog' to=' lt;$(own_subscr_uri) gt;' for='$(own_subscr_uri)'/  NotifyParsingRules type='applies' \n   level1 translates_to='OK' /dialog-info[@entity='$(own_subscr_uri)'] /level1  /NotifyParsingRules  NotifyParsingRules type='state' \n   level1 translates_to='me_in_a_call' /dialog-info/dialog/state[.='early'] /level1 \n   level2 translates_to='me_in_a_call' /dialog-info/dialog/state[.='proceeding'] /level2 \n   level3 translates_to='me_in_a_call' /dialog-info/dialog/state[.='confirmed'] /level3 \n   level4 translates_to='me_offhook' /dialog-info/dialog/state[.='trying'] /level4 \n   level5 translates_to='me_free'/  /NotifyParsingRules  NotifyParsingRules type='variable' id='remote_name' \n   level1 fetch_attribute='display' /dialog-info/dialog/remote/identity[@display] /level1 \n   level2 fetch_attribute='uri' /dialog-info/dialog/remote/target[@uri] /level2  /NotifyParsingRules  NotifyParsingRules type='variable' id='local_name' states='offhook,free' \n   level1 fetch_attribute='display' /dialog-info/dialog/local/identity[@display] /level1 \n   level2 fetch_attribute='uri' /dialog-info/dialog/local/target[@uri] /level2  /NotifyParsingRules  NotifyParsingRules type='variable' id='call_id' states='ringing' \n   level1 fetch_attribute='call-id' /dialog-info/dialog[@call-id] /level1  /NotifyParsingRules  NotifyParsingRules type='variable' id='remote_tag' states='ringing' \n   level1 fetch_attribute='remote-tag' /dialog-info/dialog[@remote-tag] /level1  /NotifyParsingRules  NotifyParsingRules type='variable' id='local_tag' states='ringing' \n   level1 fetch_attribute='local-tag' /dialog-info/dialog[@local-tag] /level1  /NotifyParsingRules  NotifyParsingRules type='variable' id='remote_uri' states='ringing' \n   level1 fetch_attribute='uri' /dialog-info/dialog/remote/target[@uri] /level1  /NotifyParsingRules  action \n   assign when='on notify' \n     source context='local' id='state'/ \n     destination context='local' id='current_state'/ \n   /assign  /action    The XML Definition Code for our own extension state looks similar to the code from the 1st part. We changed the name of our XML Definition code in the  general  element, because we are going to use this name later on for referencing to this code and we added a new  variable  element which will contain our own state.  Also we changed the  translate_to  attributes values to contain  me_  in front.  That will help us later on to decide which action we are going to perform. And at the end of the code we added an  assign  element which will be executed  on notify , when a SIP NOTIFY message arrives and puts the state of our monitored extension (our own SIP URI) into our new variable  current_state .  Now our next step is to use the XML Definition Code from our 1st part and adopt it to reference to the above (own extension's state) XML Definition Code.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name='subscr_state' value='initial'/ \n   variable name='subscr_num' value='' / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action  \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press /   /action  As first we added two new  variable  elements, which we are going to use to save the subscribers number and state.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name='subscr_state' value='initial'/ \n   variable name='subscr_num' value='' / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action \n   assign when='on press' \n     source context='local' id='subscr_uri' value_match='(sip:)?(.*)@.*' value_replace='$2'/ \n     destination context='local' id='subscr_num'/ \n   /assign \n   assign when='on press' \n     source context='this entry' id='state'/ \n     destination context='this entry' id='subscr_state'/ \n   /assign \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press /   /action  With the two new  assign  elements we are going to fill our new variables. The first one will take the  subscr_uri  value and extract the number from it, thanks to the RegEX we wrote in the  value_match  attribute and the  value_replace  attribute where we defined which part of the RegEx would be saved into the  subscr_num  variable. Also we copied the button  state  value into our new  subscr_state  variable.   general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name='subscr_state' value='initial'/ \n   variable name='subscr_num' value='' / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action \n   assign when='on press' \n     source context='local' id='subscr_uri' value_match='(sip:)?(.*)@.*' value_replace='$2'/ \n     destination context='local' id='subscr_num'/ \n   /assign \n   assign when='on press' \n     source context='this entry' id='state'/ \n     destination context='this entry' id='subscr_state'/ \n   /assign \n   assign when='on press' \n     source context='all xml entities' id='current_state' require1='${type}==PhoneState' require2='${current_state}==me_in_a_call'/ \n     destination context='this entry' id='state'/ \n   /assign \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   invite target= $(subscr_uri)  when= on press /  \n   assign when='on release' \n     source context='this entry' id='subscr_state'/ \n     destination context='this entry' id='state'/ \n   /assign  /action  In the above code we added  assign  elements to get our own phones state and to revert the remote monitored extension state back, when we are done with our actions. The second assign will be executed on the release of the button.  assign when='on press' \n   source context='all xml entities' id='current_state' require1='${type}==PhoneState' require2='${current_state}==me_in_a_call'/ \n   destination context='this entry' id='state'/  /assign  When the button gets pressed, get all XML Definition Codes where the type is PhoneState and if in that Code the current_state has the value of me_in_a_call, assign current_state value to our state variable.  Our last step would be to add an Action if we are in a call.  general type= BusyLampField  identity= 1 /  initialization \n   state value= off / \n   variable name='subscr_state' value='initial'/ \n   variable name='subscr_num' value='' / \n   variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n   level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n   level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n   level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n   level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n   level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n   level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n   level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n   level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n   level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n   level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n   level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n   level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n   level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action \n   assign when='on press' \n     source context='local' id='subscr_uri' value_match='(sip:)?(.*)@.*' value_replace='$2'/ \n     destination context='local' id='subscr_num'/ \n   /assign \n   assign when='on press' \n     source context='this entry' id='state'/ \n     destination context='this entry' id='subscr_state'/ \n   /assign \n   assign when='on press' \n     source context='all xml entities' id='current_state' require1='${type}==PhoneState' require2='${current_state}==me_in_a_call'/ \n     destination context='this entry' id='state'/ \n   /assign \n   invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n   dtmf target='*$(subscr_num)' when='on release' states='me_in_a_call'/ \n   invite target= $(subscr_uri)  when= on press /  \n   assign when='on release' \n     source context='this entry' id='subscr_state'/ \n     destination context='this entry' id='state'/ \n   /assign  /action  Our new  dtmf  element which we also put into our  action  element container, will sent a DTMF code with a * (asterisk) and the number our remote monitored extension, but just if we (our phone) are in a call.", 
            "title": "Referencing to other XML Definition Codes"
        }, 
        {
            "location": "/xml_definitions/functions/", 
            "text": "XML Definition Functions\n #\n\n\nAt the moment there are two types of Function in the XML Definition Code.\n\n\n\n\njoin\n is used to combine multiple sources before assigning them to a variable/array\n\n\nfind_index\n which allows us to determinate the index(s) of where a value(s) can be found in an array\n\n\n\n\nThe \nfunction\n element is a part of the \nassign\n element container and has a \nname\n attribute where we write our type into (\njoin\n or \nfind_index\n). Also depending on the function there could be additional attributes.\n\n\njoin\n #\n\n\nSometimes it is very useful to combine two values into one and to do so we are going to use the \njoin\n function. We are going to take our Basic BLF example and add Labels to it so that we can change them:\n\n\ngeneral type=\nBusyLampField\n identity=\n1\n/\n\n\ninitialization\n\n    \nstate value=\noff\n/\n\n    \narray name='label' separator=',' value='Remote Extensions Name, caller'/\n\n    \narray name='label_x' separator=',' value='5,5'/\n\n    \narray name='label_y' separator=',' value='2,15'/\n\n    \narray name='label_width' separator=',' value='74,95'/\n\n    \narray name='label_height' separator=',' value='13,24'/\n\n    \narray name='label_align' separator=',' value='left,center'/\n\n    \nvariable name=\nsubscr_uri\n value=\nsip:548@pbx.local\n/\n\n\n/initialization\n\n\nsubscription type=\ndialog\n to=\nlt;$(subscr_uri)\ngt;\n for=\n$(subscr_uri)\n/\n\n\nNotifyParsingRules type=\napplies\n \n    \nlevel1 translates_to='OK'\n/dialog-info[@entity=\n$(subscr_uri)\n]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nstate\n\n    \nlevel1 translates_to=\nringing\n/dialog-info/dialog/state[.=\nearly\n]\n/level1\n\n    \nlevel1-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level1-1\n\n    \nlevel2 translates_to=\nringing\n/dialog-info/dialog/state[.=\nproceeding\n]\n/level2\n\n    \nlevel2-1 translates_to=\ncalling\n/dialog-info/dialog[@direction=\ninitiator\n]\n/level2-1\n\n    \nlevel3 translates_to=\nin_a_call\n/dialog-info/dialog/state[.=\nconfirmed\n]\n/level3\n\n    \nlevel4 translates_to=\noffhook\n/dialog-info/dialog/state[.=\ntrying\n]\n/level4\n\n    \nlevel5 translates_to=\nfree\n/\n\n\n/NotifyParsingRules\n\n\nNotifyParsingRules type=\nvariable\n id=\ncall_id\n state=\nringing\n \n    \nlevel1 fetch_attribute=\ncall-id\n/dialog-info/dialog[@call-id]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_tag\n state=\nringing\n \n    \nlevel1 fetch_attribute=\nremote-tag\n/dialog-info/dialog[@remote-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nlocal_tag\n state=\nringing\n \n    \nlevel1 fetch_attribute=\nlocal-tag\n/dialog-info/dialog[@local-tag]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_uri\n state=\nringing\n \n    \nlevel1 fetch_attribute=\nuri\n/dialog-info/dialog/remote/target[@uri]\n/level1\n \n\n/NotifyParsingRules\n \n\nNotifyParsingRules type=\nvariable\n id=\nremote_name\n state=\nringing\n \n    \nlevel1 fetch_attribute=\ndisplay\n/dialog-info/dialog/remote/identity[@display]\n/level1\n \n\n/NotifyParsingRules\n\n\naction\n \n    \nassign type=\non notify\n\n        \nsource context=\nthis entity\n id=\nremote_name\n/\n\n        \nsource context=\nthis entity\n id=\nremote_uri\n/\n\n        \nfunction name=\njoin\n pattern=\n$(src0) Tel:$(src1)\n/\n\n        \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n    \n/assign\n\n    \nassign type=\non notify\n states=\nfree,offhook,calling\n\n        \nsource context=\nthis entity\n id=\nstate\n/\n\n        \ndestination context=\nthis entity\n id=\nlabel[1]\n/\n\n    \n/assign\n\n    \ninvite target=\n$(remote_name)\n$(remote_uri)\n when=\non press\n state=\nringing\n request_uri=\n$(remote_uri)\n replaces=\n$(call_id);to-tag=$(remote_tag);from-tag=$(local_tag)\n/\n\n    \ninvite target=\n$(subscr_uri)\n when=\non press\n/\n \n\n/action\n\n\n\n\nWe took our two variables we parsed before with our \nNotifyParsingRules\n and combined them to get a new value which we put in our second position in our label array. \n\n\nThe attribute \npattern\n allow us to define how to combine the values we want, e.g:\n\npattern=\"$(src0) Tel:$(src1)\"\n  would mean like this  \n$(remote_name) Tel: $(remote_uri)\n\n\nOf course you can have more sources which you would like to combine, the indexing of the (src) start always from the top one and it index is 0. Also if you have 4 sources the last one would be \"src3\".\n\n\nfind_index\n #\n\n\nSometimes you have a value(s) (variable or array) and you would like to check if it already exists in an array. \n\n\nFor such cases we have the \nfind_index\n function, it allows us to search for a value in an array and if it's exists there it also gives us its index in it. This might be helpful if we would like to change it later.\n\n\nIt also supports arrays and will allow you to search for each value from the first array in the second array and give you a new array with the indexes of all found values.\n\n\nassign when=\non notify\n\n\nsource context=\nthis entity\n id=\nuris[]\n/\n\n\nsource context=\nthis entity\n id=\nfull_uris[]\n/\n\n\nfunction name=\nfind_index\n/\n\n\ndestination context=\nthis entity\n id=\nfull_idx[]\n/\n\n\n/assign\n\n\n\n\nOn an incoming SIP NOTIFY message, check each value from my first source (uris) if it exist in my second source (full_uris) and if so write his position from the second source to my destination (full_idx)\n\n\nNOTE:\n The result (destination) array will always have the same number of positions like the first (top) source. And if one of the values from the first source is not found in the second source, the position in the result (destination) array will be filed with an empty value.", 
            "title": "Functions"
        }, 
        {
            "location": "/xml_definitions/functions/#xml_definition_functions", 
            "text": "At the moment there are two types of Function in the XML Definition Code.   join  is used to combine multiple sources before assigning them to a variable/array  find_index  which allows us to determinate the index(s) of where a value(s) can be found in an array   The  function  element is a part of the  assign  element container and has a  name  attribute where we write our type into ( join  or  find_index ). Also depending on the function there could be additional attributes.", 
            "title": "XML Definition Functions"
        }, 
        {
            "location": "/xml_definitions/functions/#join", 
            "text": "Sometimes it is very useful to combine two values into one and to do so we are going to use the  join  function. We are going to take our Basic BLF example and add Labels to it so that we can change them:  general type= BusyLampField  identity= 1 /  initialization \n     state value= off / \n     array name='label' separator=',' value='Remote Extensions Name, caller'/ \n     array name='label_x' separator=',' value='5,5'/ \n     array name='label_y' separator=',' value='2,15'/ \n     array name='label_width' separator=',' value='74,95'/ \n     array name='label_height' separator=',' value='13,24'/ \n     array name='label_align' separator=',' value='left,center'/ \n     variable name= subscr_uri  value= sip:548@pbx.local /  /initialization  subscription type= dialog  to= lt;$(subscr_uri) gt;  for= $(subscr_uri) /  NotifyParsingRules type= applies  \n     level1 translates_to='OK' /dialog-info[@entity= $(subscr_uri) ] /level1   /NotifyParsingRules   NotifyParsingRules type= state \n     level1 translates_to= ringing /dialog-info/dialog/state[.= early ] /level1 \n     level1-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level1-1 \n     level2 translates_to= ringing /dialog-info/dialog/state[.= proceeding ] /level2 \n     level2-1 translates_to= calling /dialog-info/dialog[@direction= initiator ] /level2-1 \n     level3 translates_to= in_a_call /dialog-info/dialog/state[.= confirmed ] /level3 \n     level4 translates_to= offhook /dialog-info/dialog/state[.= trying ] /level4 \n     level5 translates_to= free /  /NotifyParsingRules  NotifyParsingRules type= variable  id= call_id  state= ringing  \n     level1 fetch_attribute= call-id /dialog-info/dialog[@call-id] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_tag  state= ringing  \n     level1 fetch_attribute= remote-tag /dialog-info/dialog[@remote-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= local_tag  state= ringing  \n     level1 fetch_attribute= local-tag /dialog-info/dialog[@local-tag] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_uri  state= ringing  \n     level1 fetch_attribute= uri /dialog-info/dialog/remote/target[@uri] /level1   /NotifyParsingRules   NotifyParsingRules type= variable  id= remote_name  state= ringing  \n     level1 fetch_attribute= display /dialog-info/dialog/remote/identity[@display] /level1   /NotifyParsingRules  action  \n     assign type= on notify \n         source context= this entity  id= remote_name / \n         source context= this entity  id= remote_uri / \n         function name= join  pattern= $(src0) Tel:$(src1) / \n         destination context= this entity  id= label[1] / \n     /assign \n     assign type= on notify  states= free,offhook,calling \n         source context= this entity  id= state / \n         destination context= this entity  id= label[1] / \n     /assign \n     invite target= $(remote_name) $(remote_uri)  when= on press  state= ringing  request_uri= $(remote_uri)  replaces= $(call_id);to-tag=$(remote_tag);from-tag=$(local_tag) / \n     invite target= $(subscr_uri)  when= on press /   /action  We took our two variables we parsed before with our  NotifyParsingRules  and combined them to get a new value which we put in our second position in our label array.   The attribute  pattern  allow us to define how to combine the values we want, e.g: pattern=\"$(src0) Tel:$(src1)\"   would mean like this   $(remote_name) Tel: $(remote_uri)  Of course you can have more sources which you would like to combine, the indexing of the (src) start always from the top one and it index is 0. Also if you have 4 sources the last one would be \"src3\".", 
            "title": "join"
        }, 
        {
            "location": "/xml_definitions/functions/#find_index", 
            "text": "Sometimes you have a value(s) (variable or array) and you would like to check if it already exists in an array.   For such cases we have the  find_index  function, it allows us to search for a value in an array and if it's exists there it also gives us its index in it. This might be helpful if we would like to change it later.  It also supports arrays and will allow you to search for each value from the first array in the second array and give you a new array with the indexes of all found values.  assign when= on notify  source context= this entity  id= uris[] /  source context= this entity  id= full_uris[] /  function name= find_index /  destination context= this entity  id= full_idx[] /  /assign  On an incoming SIP NOTIFY message, check each value from my first source (uris) if it exist in my second source (full_uris) and if so write his position from the second source to my destination (full_idx)  NOTE:  The result (destination) array will always have the same number of positions like the first (top) source. And if one of the values from the first source is not found in the second source, the position in the result (destination) array will be filed with an empty value.", 
            "title": "find_index"
        }, 
        {
            "location": "/xml_definitions/replacement_plan/", 
            "text": "Replacement plan\n #\n\n\nSometimes the build-in Function key behaviors doesn't meet our requirements and we would not like to write a XML Definition Code each time again to put it on our phones. That is why snom phones have \nreplacement_plan\n elements. Which allow you to change the default functionality of a Function key to your own (designed with XML Definition Code).\n\n\nBelow we are going to show you an example which is used by our Broadsoft customers and is replacing the \nContact Buddy List\n option.\n\n\nNOTE:\n That this needs to be uploaded to the phone with Provisioning, either in the \n tag or as an individual XML file which is being listed in the \n tag.\n\n\nReplacementPlan\n\n  \nkey id=\nResourceListBuddy\n wui_translation_key=\nfkeys_ssi_buddy_from_server_list\n/\n\n  \n/key\n\n  \nsetting_replacement id=\nuser_event_list_uri\n/\n\n  \n/setting_replacement\n\n\n/ReplacementPlan\n\n\n\n\nThe replacement plans start with a \nReplacmentPlan\n root element container, which can have one or more \nkey\n and \nsetting_replacement\n element containers.\n\n\nkey\n element container defines a key type which will be displayed in the Web User Interface on the Function key page and contains two attributes. \nid\n is a identifier which is used for deleting or altering the keys later and \nwui_translation_key\n is used to find the correct translation for the key when it's listed in the Web User Interface. \n\n\nNOTE:\n If the \nwui_translation_key\n is not part of the translation-map, it will be used directly to describe the key in the Web User Interface.\n\n\nReplacementPlan\n\n    \nkey id=\nResourceListBuddy\n wui_translation_key=\nfkeys_ssi_buddy_from_server_list\n\n    \ngeneral type='ResourceListBuddy'/\n\n    \ninitialization\n\n        \nvariable name='ui_argument' value=''/\n\n        \nvariable name='ui_label' value=''/\n\n        \nstate value='initial'/\n\n    \n/initialization\n\n    \nNotifyParsingRules type='applies'\n\n        \nlevel1 translates_to='OK'\nHeader:Content-ID==\n$(ResourceCid)\n/level1\n\n    \n/NotifyParsingRules\n\n    \nNotifyParsingRules type='state'\n\n        \nlevel1 translates_to='ringing'\n/dialog-info/dialog/state[.='early']\n/level1\n\n        \nlevel1-1 translates_to='calling'\n/dialog-info/dialog[@direction='initiator']\n/level1-1\n\n        \nlevel2 translates_to='ringing'\n/dialog-info/dialog/state[.='proceeding']\n/level2\n\n        \nlevel2-1 translates_to='calling'\n/dialog-info/dialog[@direction='initiator']\n/level2-1\n\n        \nlevel3 translates_to='in_a_call'\n/dialog-info/dialog/state[.='confirmed']\n/level3\n\n        \nlevel4 translates_to='offhook'\n/dialog-info/dialog/state[.='trying']\n/level4\n\n        \ndefault translates_to='free'/\n\n    \n/NotifyParsingRules\n\n    \nNotifyParsingRules type='array' id='local_uris'\n\n        \nlevel1 fetch_attribute='uri'\n/dialog-info/dialog/local/target[@uri]\n/level1\n\n        \nlevel2 fetch_content='true'\n/dialog-info/dialog/local/identity\n/level2\n\n    \n/NotifyParsingRules\n\n    \nNotifyParsingRules type='variable' id='label'\n\n        \nlevel1 fetch_attribute='display'\n/dialog-info/dialog/local/identity[@display]\n/level1\n\n    \n/NotifyParsingRules\n\n    \naction\n\n        \nassign when='on notify'\n\n            \nsource value=''/\n\n            \ndestination id='call_me_uri'/\n\n        \n/assign\n\n        \nassign when='on notify'\n\n            \nsource id='local_uris'/\n\n            \ndestination id='call_me_uri' require1='$(local_uris[$(index)])\n=tel:' require2='$(local_uris[$(index)])\ntel;'/\n\n        \n/assign\n\n        \nassign when='on notify'\n\n            \nsource id='local_uris'/\n\n            \ndestination id='call_me_uri' require1='$(call_me_uri)=='/\n\n        \n/assign\n\n        \nassign when='on notify'\n\n            \nsource id='call_me_uri' value_match='.*ext=(.*)' value_replace='*97$1'/\n\n            \ndestination id='pick_up_tel'/\n\n        \n/assign\n\n        \ndial target='$(pick_up_tel)' when='on press' state='ringing'/\n\n        \ndial target='$(call_me_uri)' when='on press'/\n\n        \n/action\n\n    \n/key\n\n    \nsetting_replacement id=\nuser_event_list_uri\n\n    \n/setting_replacement\n\n\n/ReplacementPlan\n\n\n\n\nWe added a regular XML Definition Code into our \nkey\n element container, which is parsing our NOTIFY and assign values to our variables. Maybe you already saw that in the above Code there is no \nsubscription\n element and you ask yourselves how are we going to subscribe for notifies. So since we want it to be dynamic and allow users to enter their own value where to subscribe we are going to put it into the \nsettings_replacment\n element container.\n\n\nsetting_replacment\n element container contains the XML Definition Code which will be used if the setting is set. This element container has one attribute named \nid\n, which tells the phone which setting behavior should be replaced. \n\n\nAt the moment the only valid ID (setting) is \nuser_event_list_uri\n. Also this element container has two Public variables which contain our Setting Value and index of our identity. \n\n\nReplacementPlan\n\n    \nkey id=\nResourceListBuddy\n wui_translation_key=\nfkeys_ssi_buddy_from_server_list\n\n    \ngeneral type='ResourceListBuddy'/\n\n    \ninitialization\n\n        \nvariable name='ui_argument' value=''/\n\n        \nvariable name='ui_label' value=''/\n\n        \nstate value='initial'/\n\n    \n/initialization\n\n    \nNotifyParsingRules type='applies'\n\n        \nlevel1 translates_to='OK'\nHeader:Content-ID==\n$(ResourceCid)\n/level1\n\n    \n/NotifyParsingRules\n\n    \nNotifyParsingRules type='state'\n\n        \nlevel1 translates_to='ringing'\n/dialog-info/dialog/state[.='early']\n/level1\n\n        \nlevel1-1 translates_to='calling'\n/dialog-info/dialog[@direction='initiator']\n/level1-1\n\n        \nlevel2 translates_to='ringing'\n/dialog-info/dialog/state[.='proceeding']\n/level2\n\n        \nlevel2-1 translates_to='calling'\n/dialog-info/dialog[@direction='initiator']\n/level2-1\n\n        \nlevel3 translates_to='in_a_call'\n/dialog-info/dialog/state[.='confirmed']\n/level3\n\n        \nlevel4 translates_to='offhook'\n/dialog-info/dialog/state[.='trying']\n/level4\n\n        \ndefault translates_to='free'/\n\n    \n/NotifyParsingRules\n\n    \nNotifyParsingRules type='array' id='local_uris'\n\n        \nlevel1 fetch_attribute='uri'\n/dialog-info/dialog/local/target[@uri]\n/level1\n\n        \nlevel2 fetch_content='true'\n/dialog-info/dialog/local/identity\n/level2\n\n    \n/NotifyParsingRules\n\n    \nNotifyParsingRules type='variable' id='label'\n\n        \nlevel1 fetch_attribute='display'\n/dialog-info/dialog/local/identity[@display]\n/level1\n\n    \n/NotifyParsingRules\n\n    \naction\n\n        \nassign when='on notify'\n\n            \nsource value=''/\n\n            \ndestination id='call_me_uri'/\n\n        \n/assign\n\n        \nassign when='on notify'\n\n            \nsource id='local_uris'/\n\n            \ndestination id='call_me_uri' require1='$(local_uris[$(index)])\n=tel:' require2='$(local_uris[$(index)])\ntel;'/\n\n        \n/assign\n\n        \nassign when='on notify'\n\n            \nsource id='local_uris'/\n\n            \ndestination id='call_me_uri' require1='$(call_me_uri)=='/\n\n        \n/assign\n\n        \nassign when='on notify'\n\n            \nsource id='call_me_uri' value_match='.*ext=(.*)' value_replace='*97$1'/\n\n            \ndestination id='pick_up_tel'/\n\n        \n/assign\n\n        \ndial target='$(pick_up_tel)' when='on press' state='ringing'/\n\n        \ndial target='$(call_me_uri)' when='on press'/\n\n        \n/action\n\n    \n/key\n\n    \nsetting_replacement id=\nuser_event_list_uri\n\n        \ngeneral type='ResourceListSubscription'/\n\n        \ninitialization\n\n            \nvariable name='setting_value' value=''/\n\n            \nvariable name='setting_index' value=''/\n\n            \nidentity value='$(setting_index)'/\n\n            \nvariable name='subscr_uri' value='sip:$(setting_value);user=phone'/\n\n            \nstate value='initial'/\n\n        \n/initialization\n\n        \nsubscription type='dialog-list' to='\n$(subscr_uri)\n' for='$(subscr_uri)'/\n\n        \nNotifyParsingRules type='applies'\n\n            \nlevel1 translates_to='OK'\n/list[@uri='$(subscr_uri)']\n/level1\n\n        \n/NotifyParsingRules\n\n        \nNotifyParsingRules type='state'\n\n            \nlevel1 translates_to='full'\n/list[@fullState='true']\n/level1\n\n            \nlevel2 translates_to='partial'/\n\n        \n/NotifyParsingRules\n\n        \nNotifyParsingRules type='array' id='cids'\n\n            \nlevel1 fetch_attribute='cid'\n/list/resource/instance\n/level1\n\n        \n/NotifyParsingRules\n\n        \nNotifyParsingRules type='array' id='uris'\n\n            \nlevel1 fetch_attribute='uri'\n/list/resource\n/level1\n\n        \n/NotifyParsingRules\n\n        \naction\n\n            \nassign state='full'\n\n                \nsource value='no buddy'/\n\n                \ndestination context='all' id='state' require1='${type}==ResourceListBuddy'/\n\n            \n/assign\n\n            \nassign state='full'\n\n                \nsource value=''/\n\n                \ndestination context='all' id='BuddyUri' require1='${type}==ResourceListBuddy'/\n\n            \n/assign\n\n            \nassign state='full'\n\n                \nsource context='local' id='uris'/\n\n                \ndestination context='all' id='BuddyUri' require1='${type}==ResourceListBuddy' require2='${BuddyUri}=='/\n\n            \n/assign\n\n            \nassign when='on notify'\n\n                \nsource context='local' id='cids'/\n\n                \ndestination context='all' id='ResourceCid' require1='${type}==ResourceListBuddy' require2='${BuddyUri}==$(uris[$(index)])'/\n\n            \n/assign\n\n        \n/action\n\n    \n/setting_replacement\n\n\n/ReplacementPlan\n\n\n\n\nWe added the XML Definition Code which will make a SUBSCRIBE to your \ndialog-list\n events and parse the NOTIFYs to our new Variables which we automatically thanks to the Referencing send to our Function keys with our type we defined in the \nid\n attribute of our \nkey\n element container.\n\n\ninitialization\n\n    \nvariable name='setting_value' value=''/\n\n    \nvariable name='setting_index' value=''/\n\n    \nidentity value='$(setting_index)'/\n\n    \nvariable name='subscr_uri' value='sip:$(setting_value);user=phone'/\n\n    \nstate value='initial'/\n\n\n/initialization\n\n\n\n\nThese two new variables are not mandatory; if our XML Definition Code doesn't contain them in \ninitialization\n element container then they will be automatically added to the code. Or if there already set, the values will be updated with the values of our setting.", 
            "title": "Replacement plan"
        }, 
        {
            "location": "/xml_definitions/replacement_plan/#replacement_plan", 
            "text": "Sometimes the build-in Function key behaviors doesn't meet our requirements and we would not like to write a XML Definition Code each time again to put it on our phones. That is why snom phones have  replacement_plan  elements. Which allow you to change the default functionality of a Function key to your own (designed with XML Definition Code).  Below we are going to show you an example which is used by our Broadsoft customers and is replacing the  Contact Buddy List  option.  NOTE:  That this needs to be uploaded to the phone with Provisioning, either in the   tag or as an individual XML file which is being listed in the   tag.  ReplacementPlan \n   key id= ResourceListBuddy  wui_translation_key= fkeys_ssi_buddy_from_server_list / \n   /key \n   setting_replacement id= user_event_list_uri / \n   /setting_replacement  /ReplacementPlan  The replacement plans start with a  ReplacmentPlan  root element container, which can have one or more  key  and  setting_replacement  element containers.  key  element container defines a key type which will be displayed in the Web User Interface on the Function key page and contains two attributes.  id  is a identifier which is used for deleting or altering the keys later and  wui_translation_key  is used to find the correct translation for the key when it's listed in the Web User Interface.   NOTE:  If the  wui_translation_key  is not part of the translation-map, it will be used directly to describe the key in the Web User Interface.  ReplacementPlan \n     key id= ResourceListBuddy  wui_translation_key= fkeys_ssi_buddy_from_server_list \n     general type='ResourceListBuddy'/ \n     initialization \n         variable name='ui_argument' value=''/ \n         variable name='ui_label' value=''/ \n         state value='initial'/ \n     /initialization \n     NotifyParsingRules type='applies' \n         level1 translates_to='OK' Header:Content-ID== $(ResourceCid) /level1 \n     /NotifyParsingRules \n     NotifyParsingRules type='state' \n         level1 translates_to='ringing' /dialog-info/dialog/state[.='early'] /level1 \n         level1-1 translates_to='calling' /dialog-info/dialog[@direction='initiator'] /level1-1 \n         level2 translates_to='ringing' /dialog-info/dialog/state[.='proceeding'] /level2 \n         level2-1 translates_to='calling' /dialog-info/dialog[@direction='initiator'] /level2-1 \n         level3 translates_to='in_a_call' /dialog-info/dialog/state[.='confirmed'] /level3 \n         level4 translates_to='offhook' /dialog-info/dialog/state[.='trying'] /level4 \n         default translates_to='free'/ \n     /NotifyParsingRules \n     NotifyParsingRules type='array' id='local_uris' \n         level1 fetch_attribute='uri' /dialog-info/dialog/local/target[@uri] /level1 \n         level2 fetch_content='true' /dialog-info/dialog/local/identity /level2 \n     /NotifyParsingRules \n     NotifyParsingRules type='variable' id='label' \n         level1 fetch_attribute='display' /dialog-info/dialog/local/identity[@display] /level1 \n     /NotifyParsingRules \n     action \n         assign when='on notify' \n             source value=''/ \n             destination id='call_me_uri'/ \n         /assign \n         assign when='on notify' \n             source id='local_uris'/ \n             destination id='call_me_uri' require1='$(local_uris[$(index)]) =tel:' require2='$(local_uris[$(index)]) tel;'/ \n         /assign \n         assign when='on notify' \n             source id='local_uris'/ \n             destination id='call_me_uri' require1='$(call_me_uri)=='/ \n         /assign \n         assign when='on notify' \n             source id='call_me_uri' value_match='.*ext=(.*)' value_replace='*97$1'/ \n             destination id='pick_up_tel'/ \n         /assign \n         dial target='$(pick_up_tel)' when='on press' state='ringing'/ \n         dial target='$(call_me_uri)' when='on press'/ \n         /action \n     /key \n     setting_replacement id= user_event_list_uri \n     /setting_replacement  /ReplacementPlan  We added a regular XML Definition Code into our  key  element container, which is parsing our NOTIFY and assign values to our variables. Maybe you already saw that in the above Code there is no  subscription  element and you ask yourselves how are we going to subscribe for notifies. So since we want it to be dynamic and allow users to enter their own value where to subscribe we are going to put it into the  settings_replacment  element container.  setting_replacment  element container contains the XML Definition Code which will be used if the setting is set. This element container has one attribute named  id , which tells the phone which setting behavior should be replaced.   At the moment the only valid ID (setting) is  user_event_list_uri . Also this element container has two Public variables which contain our Setting Value and index of our identity.   ReplacementPlan \n     key id= ResourceListBuddy  wui_translation_key= fkeys_ssi_buddy_from_server_list \n     general type='ResourceListBuddy'/ \n     initialization \n         variable name='ui_argument' value=''/ \n         variable name='ui_label' value=''/ \n         state value='initial'/ \n     /initialization \n     NotifyParsingRules type='applies' \n         level1 translates_to='OK' Header:Content-ID== $(ResourceCid) /level1 \n     /NotifyParsingRules \n     NotifyParsingRules type='state' \n         level1 translates_to='ringing' /dialog-info/dialog/state[.='early'] /level1 \n         level1-1 translates_to='calling' /dialog-info/dialog[@direction='initiator'] /level1-1 \n         level2 translates_to='ringing' /dialog-info/dialog/state[.='proceeding'] /level2 \n         level2-1 translates_to='calling' /dialog-info/dialog[@direction='initiator'] /level2-1 \n         level3 translates_to='in_a_call' /dialog-info/dialog/state[.='confirmed'] /level3 \n         level4 translates_to='offhook' /dialog-info/dialog/state[.='trying'] /level4 \n         default translates_to='free'/ \n     /NotifyParsingRules \n     NotifyParsingRules type='array' id='local_uris' \n         level1 fetch_attribute='uri' /dialog-info/dialog/local/target[@uri] /level1 \n         level2 fetch_content='true' /dialog-info/dialog/local/identity /level2 \n     /NotifyParsingRules \n     NotifyParsingRules type='variable' id='label' \n         level1 fetch_attribute='display' /dialog-info/dialog/local/identity[@display] /level1 \n     /NotifyParsingRules \n     action \n         assign when='on notify' \n             source value=''/ \n             destination id='call_me_uri'/ \n         /assign \n         assign when='on notify' \n             source id='local_uris'/ \n             destination id='call_me_uri' require1='$(local_uris[$(index)]) =tel:' require2='$(local_uris[$(index)]) tel;'/ \n         /assign \n         assign when='on notify' \n             source id='local_uris'/ \n             destination id='call_me_uri' require1='$(call_me_uri)=='/ \n         /assign \n         assign when='on notify' \n             source id='call_me_uri' value_match='.*ext=(.*)' value_replace='*97$1'/ \n             destination id='pick_up_tel'/ \n         /assign \n         dial target='$(pick_up_tel)' when='on press' state='ringing'/ \n         dial target='$(call_me_uri)' when='on press'/ \n         /action \n     /key \n     setting_replacement id= user_event_list_uri \n         general type='ResourceListSubscription'/ \n         initialization \n             variable name='setting_value' value=''/ \n             variable name='setting_index' value=''/ \n             identity value='$(setting_index)'/ \n             variable name='subscr_uri' value='sip:$(setting_value);user=phone'/ \n             state value='initial'/ \n         /initialization \n         subscription type='dialog-list' to=' $(subscr_uri) ' for='$(subscr_uri)'/ \n         NotifyParsingRules type='applies' \n             level1 translates_to='OK' /list[@uri='$(subscr_uri)'] /level1 \n         /NotifyParsingRules \n         NotifyParsingRules type='state' \n             level1 translates_to='full' /list[@fullState='true'] /level1 \n             level2 translates_to='partial'/ \n         /NotifyParsingRules \n         NotifyParsingRules type='array' id='cids' \n             level1 fetch_attribute='cid' /list/resource/instance /level1 \n         /NotifyParsingRules \n         NotifyParsingRules type='array' id='uris' \n             level1 fetch_attribute='uri' /list/resource /level1 \n         /NotifyParsingRules \n         action \n             assign state='full' \n                 source value='no buddy'/ \n                 destination context='all' id='state' require1='${type}==ResourceListBuddy'/ \n             /assign \n             assign state='full' \n                 source value=''/ \n                 destination context='all' id='BuddyUri' require1='${type}==ResourceListBuddy'/ \n             /assign \n             assign state='full' \n                 source context='local' id='uris'/ \n                 destination context='all' id='BuddyUri' require1='${type}==ResourceListBuddy' require2='${BuddyUri}=='/ \n             /assign \n             assign when='on notify' \n                 source context='local' id='cids'/ \n                 destination context='all' id='ResourceCid' require1='${type}==ResourceListBuddy' require2='${BuddyUri}==$(uris[$(index)])'/ \n             /assign \n         /action \n     /setting_replacement  /ReplacementPlan  We added the XML Definition Code which will make a SUBSCRIBE to your  dialog-list  events and parse the NOTIFYs to our new Variables which we automatically thanks to the Referencing send to our Function keys with our type we defined in the  id  attribute of our  key  element container.  initialization \n     variable name='setting_value' value=''/ \n     variable name='setting_index' value=''/ \n     identity value='$(setting_index)'/ \n     variable name='subscr_uri' value='sip:$(setting_value);user=phone'/ \n     state value='initial'/  /initialization  These two new variables are not mandatory; if our XML Definition Code doesn't contain them in  initialization  element container then they will be automatically added to the code. Or if there already set, the values will be updated with the values of our setting.", 
            "title": "Replacement plan"
        }, 
        {
            "location": "/xml_definitions/debug/", 
            "text": "Debugging\n #\n\n\nVery often it is required to debug the XML Definition Code to check why is something not working or to understand how something works for better development of the Code. There are a few ways to debug XML Definition Code.\n\n\nSyntax check XML Definition Code\n #\n\n\nThe best way to check if your XML Definition Code has Syntax issues is by downloading the phone settings after the Code has been inserted onto the phone. \n\n\nThe parts of our XML Definition Code where a Syntax error exists will not be saved on the phone.\n\n\nI would suggest using the Plain text Settings, because it is easier to read the XML Definition code without the regular XML Settings. \n\n\nExecution check\n #\n\n\nTo see if a part of you Code has been executed (mostly the action elements), you will find them in the Phone Regular Logs from Level 7+.  Below an example of a Setting Toggle XML Definition Code:\n\n\nApr  2 18:30:58  [DEBUG2] PHN: gui_object::OnKey(P1, 1), State Idle (29)\nApr  2 18:30:58  [DEBUG0] PHN: ReplaceQueryVariables in \nhttp://localhost:80/settings.htm?settings=save\nprivacy_out=off\n\nApr  2 18:30:58  [DEBUG0] PHN: ReplaceQueryVariables replaced: \nhttp://localhost:80/settings.htm?settings=save\nprivacy_out=off\n\nApr  2 18:30:58  [NOTICE] PHN: Sending post request http://localhost:80/settings.htm?settings=save\nprivacy_out=off\nApr  2 18:30:58  [NOTICE] PHN: Fetching URL: http://:...@localhost:80/settings.htm?...\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Send TCP none\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 dns_resolving\nApr  2 18:30:58  [DEBUG2] PHN: TMR: setting up  'gui_state.cpp (792): [static void gui_object::DisplayStateCbAtNextLoop(void*, void*)]' 0x40879274 to fire periodically every 250 ms \nApr  2 18:30:58  [DEBUG1] DNS: Add Cache: localhost.snom.com= (ttl=60, type=7)\nApr  2 18:30:58  [DEBUG0] DNS: AddrInfo for 'localhost.snom.com' invalid, error: Name or service not known (-2)\nApr  2 18:30:58  [WARN  ] PHN: Could not resolve host \nlocalhost\n\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 dns_resolve_cache_lookup_has_failed\nApr  2 18:30:58  [WARN  ] WEBCLIENT: Could not resolve host localhost\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 disconnected\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 deleted\nApr  2 18:30:58  [NOTICE] PHN: Server rejected Action URL request with 400 \n\n\n\n\nYou may see here that \"localhost\" could not be resolved by our DNS server and that is why my Toggle is not working.\n\n\nVariable check\n #\n\n\nIt might be useful to know which value or what variables have been used/set in the code. To do that we are going to open the following URL in our Browsers: http://PHONE_IP/xml_entities.htm\n\n\nThere we will find all the xml_entities split into categories of button and setting types:\n\n\n\n\nLineKey\n are the Free programmable Function keys\n\n\nContextKey\n are the 4 keys below the Display\n\n\nNaviKey\n the navigation keys\n\n\nHardKey\n are the hardcoded keys like \ndnd, directory, menu, transfer, etc\n\n\nSpringboardKey\n are available only on snom 870 phones and are the Virtual Keys in idle\n\n\nGeneralPurposeXml\n are the \ngeneral_purpose_xml_descriptions\n settings on the phone\n\n\nXmlsForEventListUri\n are the \nuser_event_list_uri\n settings on the phone\nBy selecting a category you will get a list of index for that button or setting, each of them can contain a XML Definition Code.\n\n\n\n\nHere is an example of our XML Definition Code from \nExtension Monitoring\n example the 4th part:\n\n\n#type:  BusyLampField\n#state:     free\n#variables:\n  call_id = 313339363334363736333230373839-axkw6vc64k0g\n  identity = 1\n  local_tag = 9th5orwan7\n  remote_name = 2902\n  remote_tag = lhbva8lq73\n  remote_uri = sip:547@10.110.100.110:3072;line=wxecg2hg\n  state_save = free\n  subscr_uri = sip:548@pbx.local\n  transfer_id = -15\n#arrays:\n\n\n\n\nHere we see all the values of our XML Definition Variables we defined in the code.", 
            "title": "Debug"
        }, 
        {
            "location": "/xml_definitions/debug/#debugging", 
            "text": "Very often it is required to debug the XML Definition Code to check why is something not working or to understand how something works for better development of the Code. There are a few ways to debug XML Definition Code.", 
            "title": "Debugging"
        }, 
        {
            "location": "/xml_definitions/debug/#syntax_check_xml_definition_code", 
            "text": "The best way to check if your XML Definition Code has Syntax issues is by downloading the phone settings after the Code has been inserted onto the phone.   The parts of our XML Definition Code where a Syntax error exists will not be saved on the phone.  I would suggest using the Plain text Settings, because it is easier to read the XML Definition code without the regular XML Settings.", 
            "title": "Syntax check XML Definition Code"
        }, 
        {
            "location": "/xml_definitions/debug/#execution_check", 
            "text": "To see if a part of you Code has been executed (mostly the action elements), you will find them in the Phone Regular Logs from Level 7+.  Below an example of a Setting Toggle XML Definition Code:  Apr  2 18:30:58  [DEBUG2] PHN: gui_object::OnKey(P1, 1), State Idle (29)\nApr  2 18:30:58  [DEBUG0] PHN: ReplaceQueryVariables in  http://localhost:80/settings.htm?settings=save privacy_out=off \nApr  2 18:30:58  [DEBUG0] PHN: ReplaceQueryVariables replaced:  http://localhost:80/settings.htm?settings=save privacy_out=off \nApr  2 18:30:58  [NOTICE] PHN: Sending post request http://localhost:80/settings.htm?settings=save privacy_out=off\nApr  2 18:30:58  [NOTICE] PHN: Fetching URL: http://:...@localhost:80/settings.htm?...\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Send TCP none\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 dns_resolving\nApr  2 18:30:58  [DEBUG2] PHN: TMR: setting up  'gui_state.cpp (792): [static void gui_object::DisplayStateCbAtNextLoop(void*, void*)]' 0x40879274 to fire periodically every 250 ms \nApr  2 18:30:58  [DEBUG1] DNS: Add Cache: localhost.snom.com= (ttl=60, type=7)\nApr  2 18:30:58  [DEBUG0] DNS: AddrInfo for 'localhost.snom.com' invalid, error: Name or service not known (-2)\nApr  2 18:30:58  [WARN  ] PHN: Could not resolve host  localhost \nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 dns_resolve_cache_lookup_has_failed\nApr  2 18:30:58  [WARN  ] WEBCLIENT: Could not resolve host localhost\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 disconnected\nApr  2 18:30:58  [DEBUG2] WEBCLIENT: Socket 386 deleted\nApr  2 18:30:58  [NOTICE] PHN: Server rejected Action URL request with 400   You may see here that \"localhost\" could not be resolved by our DNS server and that is why my Toggle is not working.", 
            "title": "Execution check"
        }, 
        {
            "location": "/xml_definitions/debug/#variable_check", 
            "text": "It might be useful to know which value or what variables have been used/set in the code. To do that we are going to open the following URL in our Browsers: http://PHONE_IP/xml_entities.htm  There we will find all the xml_entities split into categories of button and setting types:   LineKey  are the Free programmable Function keys  ContextKey  are the 4 keys below the Display  NaviKey  the navigation keys  HardKey  are the hardcoded keys like  dnd, directory, menu, transfer, etc  SpringboardKey  are available only on snom 870 phones and are the Virtual Keys in idle  GeneralPurposeXml  are the  general_purpose_xml_descriptions  settings on the phone  XmlsForEventListUri  are the  user_event_list_uri  settings on the phone\nBy selecting a category you will get a list of index for that button or setting, each of them can contain a XML Definition Code.   Here is an example of our XML Definition Code from  Extension Monitoring  example the 4th part:  #type:  BusyLampField\n#state:     free\n#variables:\n  call_id = 313339363334363736333230373839-axkw6vc64k0g\n  identity = 1\n  local_tag = 9th5orwan7\n  remote_name = 2902\n  remote_tag = lhbva8lq73\n  remote_uri = sip:547@10.110.100.110:3072;line=wxecg2hg\n  state_save = free\n  subscr_uri = sip:548@pbx.local\n  transfer_id = -15\n#arrays:  Here we see all the values of our XML Definition Variables we defined in the code.", 
            "title": "Variable check"
        }, 
        {
            "location": "/awesome/list/", 
            "text": "A curated list of Snom io projects\n #\n\n\n\n\n\n\n\n\n\n\nWhat is the awesome snom.io list?\n\n\nContribution guide\n\n\n\n\nNetworking and endpoint management\n #\n\n\n\n\nAll the awesome tools about Snom endpoints management, deployment and network-related\n\n\n\n\n\n\nSnom PnP daemon\n - Daemon handling Plug\nPlay provisioning requests sent by snom phones.\n\n\nVoice Quality collector\n - Daemon logging Voice Quality reports sent via SIP \nPUBLISH\n.\n\n\nSIPPing\n - Simple SIP packet forging tool.\n\n\nSnom-remote-control\n - A small HTML/JS page showcasing phone remote control features.\n\n\nSnom RDS php client\n - Snom Redirection service XML-RPC PHP client\n\n\n\n\nBusiness and Productivity Applications\n #\n\n\n\n\nAll the awesome tools managing contacts and productivity applications (CRM, Stock management, etc..) \n\n\n\n\n\n\nSnom Phone Book\n - Backend for snom phones to query various data sources by using the minibrowser-feature.\n\n\n\n\nVideo Source Applications\n #\n\n\n\n\nAll the awesome tools about video and security integration\n\n\n\n\n\n\nSnom Robot and Video Call control\n - control an owi robotic arm edge via your snom phone.\n\n\n\n\nPBX specific Applications\n #\n\n\n\n\nAll awesome the applications PBX-related\n\n\n\n\n\n\ncontribute now\n\n\n\n\nIoT Devices Sensors and Control Applications\n #\n\n\n\n\nSnom Smart Home\n - Smart Home Menu for snom phones.\n\n\n\n\nVertical and Industry Specific Applications\n #\n\n\n\n\ncontribute now\n\n\n\n\nAcknowledgments\n #\n\n\nThis list is inspired by \n@sindresorhus\n' and improved by these \namazing contributors\n.\n\n\nLicense\n #\n\n\n\n\nTo the extent possible under law, \nSnom Technology AG\n has waived all copyright and related or neighboring rights to this work.", 
            "title": "The Awesome list"
        }, 
        {
            "location": "/awesome/list/#a_curated_list_of_snom_io_projects", 
            "text": "What is the awesome snom.io list?  Contribution guide", 
            "title": "A curated list of Snom io projects"
        }, 
        {
            "location": "/awesome/list/#networking_and_endpoint_management", 
            "text": "All the awesome tools about Snom endpoints management, deployment and network-related    Snom PnP daemon  - Daemon handling Plug Play provisioning requests sent by snom phones.  Voice Quality collector  - Daemon logging Voice Quality reports sent via SIP  PUBLISH .  SIPPing  - Simple SIP packet forging tool.  Snom-remote-control  - A small HTML/JS page showcasing phone remote control features.  Snom RDS php client  - Snom Redirection service XML-RPC PHP client", 
            "title": "Networking and endpoint management"
        }, 
        {
            "location": "/awesome/list/#business_and_productivity_applications", 
            "text": "All the awesome tools managing contacts and productivity applications (CRM, Stock management, etc..)     Snom Phone Book  - Backend for snom phones to query various data sources by using the minibrowser-feature.", 
            "title": "Business and Productivity Applications"
        }, 
        {
            "location": "/awesome/list/#video_source_applications", 
            "text": "All the awesome tools about video and security integration    Snom Robot and Video Call control  - control an owi robotic arm edge via your snom phone.", 
            "title": "Video Source Applications"
        }, 
        {
            "location": "/awesome/list/#pbx_specific_applications", 
            "text": "All awesome the applications PBX-related    contribute now", 
            "title": "PBX specific Applications"
        }, 
        {
            "location": "/awesome/list/#iot_devices_sensors_and_control_applications", 
            "text": "Snom Smart Home  - Smart Home Menu for snom phones.", 
            "title": "IoT Devices Sensors and Control Applications"
        }, 
        {
            "location": "/awesome/list/#vertical_and_industry_specific_applications", 
            "text": "contribute now", 
            "title": "Vertical and Industry Specific Applications"
        }, 
        {
            "location": "/awesome/list/#acknowledgments", 
            "text": "This list is inspired by  @sindresorhus ' and improved by these  amazing contributors .", 
            "title": "Acknowledgments"
        }, 
        {
            "location": "/awesome/list/#license", 
            "text": "To the extent possible under law,  Snom Technology AG  has waived all copyright and related or neighboring rights to this work.", 
            "title": "License"
        }, 
        {
            "location": "/awesome/howto-contribute/", 
            "text": "How to contribute\n #\n\n\nThe Snom io Awesome \nlist\n is maintained using a \nMarkdown\n formatted text file.\nThe list managed in git repository hosted on \nGithub\n.\nContributions should be submitted in the \"standard git\" way: trough a \npull request\n.\n\n\nStep-by-step procedure\n #\n\n\n\n\nYou'll need a \nGitHub account\n\n\nAccess to the Snom io Awesome \nlist\n\n\nClick on the edit Icon\n\n\nNow you can start editing the text in the in-browser editor. Make sure you follow guidelines above. The syntax must be coherent with the Markdown \nsyntax\n\n\nWhen you finished editing the file you can submit the change proposal\n\n\n\n\nContribution Guidelines\n #\n\n\nPlease ensure your pull request adheres to the following guidelines:\n\n\n\n\nSearch previous suggestions before making a new one, as yours may be a duplicate.\n\n\nSuggested packages should be tested and documented.\n\n\nMake an individual pull request for each suggestion.\n\n\nUse the following format:\n\n\n\n\n- [Application name](http://application.url/path) - Application description\n\n\n\n\n\n\nAdditions should be added to the bottom of the relevant category.\n\n\nNew categories, or improvements to the existing categorization are welcome.\n\n\nDirect links to the application code repository are welcome.\n\n\nKeep descriptions short and simple, but descriptive.\n\n\nStart the description with a capital and end with a full stop/period.\n\n\nMake sure your text editor is set to remove trailing whitespace.\n\n\n\n\nThank you for your suggestions!\n\n\nUpdating your PR\n #\n\n\nA lot of times, making a PR adhere to the standards above can be difficult.\nIf the maintainers notice anything that we'd like changed, we'll ask you to edit your PR before we merge it.\nIf you're not sure how to do that, \nhere is a guide\n on the different ways you can update your PR so that we can merge it.", 
            "title": "How to contribute"
        }, 
        {
            "location": "/awesome/howto-contribute/#how_to_contribute", 
            "text": "The Snom io Awesome  list  is maintained using a  Markdown  formatted text file.\nThe list managed in git repository hosted on  Github .\nContributions should be submitted in the \"standard git\" way: trough a  pull request .", 
            "title": "How to contribute"
        }, 
        {
            "location": "/awesome/howto-contribute/#step-by-step_procedure", 
            "text": "You'll need a  GitHub account  Access to the Snom io Awesome  list  Click on the edit Icon  Now you can start editing the text in the in-browser editor. Make sure you follow guidelines above. The syntax must be coherent with the Markdown  syntax  When you finished editing the file you can submit the change proposal", 
            "title": "Step-by-step procedure"
        }, 
        {
            "location": "/awesome/howto-contribute/#contribution_guidelines", 
            "text": "Please ensure your pull request adheres to the following guidelines:   Search previous suggestions before making a new one, as yours may be a duplicate.  Suggested packages should be tested and documented.  Make an individual pull request for each suggestion.  Use the following format:   - [Application name](http://application.url/path) - Application description   Additions should be added to the bottom of the relevant category.  New categories, or improvements to the existing categorization are welcome.  Direct links to the application code repository are welcome.  Keep descriptions short and simple, but descriptive.  Start the description with a capital and end with a full stop/period.  Make sure your text editor is set to remove trailing whitespace.   Thank you for your suggestions!", 
            "title": "Contribution Guidelines"
        }, 
        {
            "location": "/awesome/howto-contribute/#updating_your_pr", 
            "text": "A lot of times, making a PR adhere to the standards above can be difficult.\nIf the maintainers notice anything that we'd like changed, we'll ask you to edit your PR before we merge it.\nIf you're not sure how to do that,  here is a guide  on the different ways you can update your PR so that we can merge it.", 
            "title": "Updating your PR"
        }, 
        {
            "location": "/awesome/about/", 
            "text": "About the Awesome Snom io list\n #\n\n\nThe creators and maintainers of this list do not receive and should not receive any forms of payment to accept a change made by any contributor.\nThe goal of this repo is to index articles, learning materials and projects, not to advertise for profit.\n\n\nWhat is Snom io ?\n #\n\n\n\n\nSnom io is a collection of Snom features useful to integrate Snom devices with external services, applications and platforms.\n\n\n\n\nSnom io includes XML Minibrowser, networking, CTI and communication features\n\n\nThe list\n #\n\n\nThe list is \nopen to contributions\n, if you developed an application that you want to share just follow the contribution guidelines in order to submit the request.\n\n\n\n\nWarning\n\n\nAll the software and tools listed here are provided \nas-is\n without any warranty and support by Snom Technology", 
            "title": "About"
        }, 
        {
            "location": "/awesome/about/#about_the_awesome_snom_io_list", 
            "text": "The creators and maintainers of this list do not receive and should not receive any forms of payment to accept a change made by any contributor.\nThe goal of this repo is to index articles, learning materials and projects, not to advertise for profit.", 
            "title": "About the Awesome Snom io list"
        }, 
        {
            "location": "/awesome/about/#what_is_snom_io", 
            "text": "Snom io is a collection of Snom features useful to integrate Snom devices with external services, applications and platforms.   Snom io includes XML Minibrowser, networking, CTI and communication features", 
            "title": "What is Snom io ?"
        }, 
        {
            "location": "/awesome/about/#the_list", 
            "text": "The list is  open to contributions , if you developed an application that you want to share just follow the contribution guidelines in order to submit the request.   Warning  All the software and tools listed here are provided  as-is  without any warranty and support by Snom Technology", 
            "title": "The list"
        }
    ]
}